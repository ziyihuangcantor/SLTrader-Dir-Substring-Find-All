@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools

<script type="text/javascript">
    var _originalCostOfFundGrid = null;
    var _originalCostOfFundToolBar = null;

    $('#SharedLabelCheckBox').change(function () {
        RefreshGrid("#CostOfFundGrid");
    });

    $(document).ready(function () {
        setTimeout(function () {
            _originalCostOfFundGrid = $("#CostOfFundGrid").data('kendoGrid').getOptions();
            _originalCostOfFundToolBar = $("#CostOfFundGrid .k-grid-toolbar").html();

            LoadGridLayout("#CostOfFundGrid");

            $("#CostOfFundGrid .k-grid-toolbar").html(_originalCostOfFundToolBar);
            $("#CostOfFundGrid .k-grid-toolbar").addClass("k-grid-top");
        }, 5);
    });

    function onCostOfFundLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#CostOfFundGrid");
        }, 5);
    }

    function onCostOfFundCheckData() {
        CheckGridData('#CostOfFundGrid');
    }

    function createCostOfFundData() {
        var entity = $("#CostOfFundDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity,
            operatorId: '@Convert.ToInt32(SL_Operator.gte)'
        };
    }

    function additionalCostOfFundData() {
        var entity = $("#CostOfFundDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity
        };
    }
    
    function onCostOfFundEdit(e) {
        var input = e.container.find("input");
        setTimeout(function () {
            input.select();
        }, 25);
    }

    function onCostOfFundDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function(valid) {
                    userPreference = valid;

                    var dropdownList = $('#CostOfFundDropdownList').data("kendoDropDownList");

                    dropdownList.select(function(dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $('#CostOfFundGrid').data("kendoGrid").dataSource.read();
                },
                error: function(valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onCostOfFundChange() {
        $("#CostOfFundGrid").data("kendoGrid").dataSource.read();
    }

    function onCostOfFundContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#CostOfFundGrid");
                break;

            case "Reset Filter":
                ResetFilter("#CostOfFundGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#CostOfFundGrid");

                $("#CostOfFundGrid").data('kendoGrid').setOptions(_originalCostOfFundGrid);
                $("#CostOfFundGrid .k-grid-toolbar").html(_originalCostOfFundToolBar);
                $("#CostOfFundGrid .k-grid-toolbar").addClass("k-grid-top");
                $('#CostOfFundGrid').data("kendoGrid").dataSource.read();
                break;

            case 'Unsort':
                UnsortGrid("#CostOfFundGrid");
                break;
        }
    }
</script>

@(
 Html.Kendo().ToolBar()
    .Name("CostOfFundToolBar")
    .Resizable(true)
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
        items.Add().Template(Html.Kendo().DropDownList()
                            .Name("CostOfFundDropdownList")                            
                            .DataTextField("Custodian")
                            .DataValueField("CompanyId")
                            .OptionLabel(LabelHelper.Text("OptionLabel"))
                            .AutoBind(true)
                                .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                            .Events(events => events.Change("onCostOfFundChange").DataBound("onCostOfFundDefaultLoad").Open("onContraEntityAutoCompleteResize"))
                            .DataSource(dataSource => dataSource
                            .Read(read => read
                            .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                            .SelectedIndex(0).ToHtmlString());
    }))

<hr class="hr-white">

<div id="CostOfFundContent" class="grid-div">
    @(
 Html.Kendo().Grid<SL_CostOfFund>()
        .Name("CostOfFundGrid")
        .Sortable()
        .HtmlAttributes(new { @class = "grid" })
        .Scrollable()
        .Filterable()
         .ColumnMenu(menu =>
         {
             menu.Columns(false);
             menu.Filterable(true);
             menu.Sortable(true);
             menu.ComponentType( "modern" );
         } )
        .NoRecords()
        .Editable(e => e.Mode(GridEditMode.InLine).Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLRule)))
        .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
        .Navigatable()
        .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
        .Events(events =>
        {
            events.DataBound("onCostOfFundCheckData");
            events.Edit("onCostOfFundEdit");
            events.ColumnHide("onCostOfFundLayoutChange");
            events.ColumnShow("onCostOfFundLayoutChange");
            events.ColumnResize("onCostOfFundLayoutChange");
            events.ColumnReorder("onCostOfFundLayoutChange");
        })
        .ToolBar(toolbar => toolbar.Create())
        .Columns(columns =>
        {
            columns.Bound(x => x.SLCOSTOFFUND).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.EffectiveDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
            columns.Bound(x => x.TradeType).GetColumnFormat(ColumnTypeEnum.String, false, "", "_TradeTypeCompleteDropdown");
            columns.Bound(x => x.PcFilter).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.Currency).GetColumnFormat(ColumnTypeEnum.String, false, "", "_CurrencyDropdown");
            columns.Bound(x => x.Description).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.Fund).GetColumnFormat(ColumnTypeEnum.Rate, false, "", "Decimal");
            columns.Command(x =>
            {
                x.Edit();
                x.Destroy();
            });
        })
         .DataSource(dataSource => dataSource
            .Ajax()
            .Read(read => read.Action("Read_CostOfFund", "Fund", new { area = "DomesticTrading" }).Data("additionalCostOfFundData"))
            .Update(update => update.Action("Update_CostOfFund", "Fund", new { area = "DomesticTrading" }))
            .Create(create => create.Action("Create_CostOfFund", "Fund", new { area = "DomesticTrading" }).Data("additionalCostOfFundData"))
            .Destroy(destroy => destroy.Action("Delete_CostOfFund", "Fund", new { area = "DomesticTrading" }))
            .Model(model =>
            {
                model.Id(x => x.SLCOSTOFFUND);
                model.Field(x => x.EntityId).Editable(false);
                model.Field(x => x.EffectiveDate).Editable(true).DefaultValue(DateTime.Today);
                model.Field(x => x.TradeType).Editable(true);
                model.Field(x => x.PcFilter).Editable(true);
                model.Field(x => x.Currency).Editable(true);
                model.Field(x => x.Description).Editable(true);
                model.Field(x => x.Fund).DefaultValue(0m);
            }))
    )
</div>

@(Html.Kendo().ContextMenu()
.Name("CostOfFundContextMenu")
    .Target("#CostOfFundGrid")
    .Events(events => events.Select("onCostOfFundContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
    }))