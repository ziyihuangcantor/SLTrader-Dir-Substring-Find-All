@using BondFire.Entities.Projections
@using BondFire.Entities
@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools


<style scoped>
    #CashPoolDropdownList .k-widget .k-multiselect input {
        display: none;
    }
</style>

<script type="text/javascript">
    var _CashPoolSelectAll = false;
    var _CashPoolDisableRowChangeEvents = false;
    var _CashPoolSelectedRows = [];
    var _CashPoolSummarySelectedRows = [];
    var _CashPoolUpdateRows = [];
    var _CashPoolSuspendRefresh = false;
    var _originalContractDetailGrid = null;
    var _originalCashPoolSummaryGrid = null;
    var _CashPoolEditMode = false;
    var _CashPoolInterval = false;

    var _originalContractDetailGridSelectAll = false;
    var _originalCashPoolSummaryGridSelectAll = false;


    $(document).ready(function () {
        setTimeout(function () {
            _originalContractDetailGrid = $("#ContractDetailGrid").data('kendoGrid').getOptions();
            _originalCashPoolSummaryGrid = $("#CashPoolSummaryGrid").data('kendoGrid').getOptions();

            LoadGridLayout("#ContractDetailGrid");
            LoadGridLayout("#CashPoolSummaryGrid");
        }, 5);  
    });

    $('#CashPoolSummaryButton').hover (
        function() { $(this).addClass('k-state-hover')},
        function () { $(this).removeClass('k-state-hover') }
        )

    $('#CashPoolButton').hover(
    function () { $(this).addClass('k-state-hover') },
    function () { $(this).removeClass('k-state-hover') }
    )

    function BackupCashPoolRowSelection() {
        try
        {
            var grid = $("#ContractDetailGrid").data("kendoGrid");

            var rows = grid.select();

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                _CashPoolSelectedRows.push(selectedItem);
            });
        }
        catch (e)
        {

        }
    }

    function RestoreCashPoolRowSelection() {
        if (_CashPoolSelectedRows.length != 0) {
            for (var i = 0; i < _CashPoolSelectedRows.length; i++) {
                var currId = _CashPoolSelectedRows[i].uid;

                $('#ContractDetailGrid').data("kendoGrid").tbody.find("tr[data-uid='" + currId + "']").addClass("k-state-selected");
            }
        }
    }

    function BackupCashPoolSummaryRowSelection() {
        var grid = $("#CashPoolSummaryGrid").data("kendoGrid");

        var rows = grid.select();

        rows.each(function (index, row) {
            var selectedItem = grid.dataItem(row);
            _CashPoolSummarySelectedRows.push(selectedItem);
        });
    }

    function RestoreCashPoolSummaryRowSelection() {
        if (_CashPoolSummarySelectedRows.length != 0) {
            for (var i = 0; i < _CashPoolSummarySelectedRows.length; i++) {
                var currId = _CashPoolSummarySelectedRows[i].uid;

                $('#CashPoolSummaryGrid').data("kendoGrid").tbody.find("tr[data-uid='" + currId + "']").addClass("k-state-selected");
            }
        }
    }

    function updateBorrowOrderRow(update) {
        try {
            var entity = $("#CashPoolDropdownList").data("kendoMultiSelect").value();

            var entityGrid = $("#CashPoolSummaryGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            $.each(update, function (i, obj) {
                if ($("#ContractDetailGrid").length) {

                    console.log(selectedItem.ListName + " " + obj['ListName']);

                    if (selectedItem.ListName == update.ListName) {
                        var data = $("#ContractDetailGrid").data("kendoGrid").dataSource;

                        var effectiveDate = kendo.parseDate(obj['EffectiveDate']);
                        obj['EffectiveDate'] = effectiveDate;

                        var dateTimeId = kendo.parseDate(obj['DateTimeId']);
                        obj['DateTimeId'] = dateTimeId;

                        _CashPoolUpdateRows.push(obj);
                    }
                }
            });
        }
        catch (e) {
            traderHubProxy.off('updateCashPoolOrder');
        }
    }

    function onCashPoolUpdateSmartRouteDataBound(e) {
        this.trigger("change");
    }


    function onCashPoolSelectAll(e) {
        try {
            var ContractDetailGrid = $("#ContractDetailGrid").data("kendoGrid");
            ContractDetailGrid.select(ContractDetailGrid.tbody.find(">tr"));

            _originalContractDetailGridSelectAll = true;
        }
        catch (e) {
            DisplayControllerByStringError("Info", e.message);
            console.log(e.message);
        }
    }


    function onCashPoolSummarySelectAll(e) {
        try {
            var ContractDetailGrid = $("#CashPoolSummaryGrid").data("kendoGrid");
            ContractDetailGrid.select(ContractDetailGrid.tbody.find(">tr"));

            _originalCashPoolSummaryGridSelectAll = true;
        }
        catch (e) {
            DisplayControllerByStringError("Info", e.message);
            console.log(e.message);
        }
    }

 

    function onCashPoolSummaryContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'Send':
                onCashPoolSummarySend(true);
                break;
            case 'Cancel Pending':
                onCashPoolSummaryCancel(true);
                break;

            case 'AutoFit Columns':
                resizeGridColumns("#CashPoolSummaryGrid");
                break;

            case "Reset Filter":
                ResetFilter("#CashPoolSummaryGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#CashPoolSummaryGrid");

                $("#CashPoolSummaryGrid").data('kendoGrid').setOptions(_originalCashPoolSummaryGrid);
                $('#CashPoolSummaryGrid').data("kendoGrid").dataSource.read();
                break;
            case "Select All":
                onCashPoolSummarySelectAll(e);
                break;
            case 'Export To Excel':
                exportToCashPoolSummaryExcel();
                break;

            case 'Unsort':
                onCashPoolUnsortGrid("#CashPoolSummaryGrid");
                break;

        }
    }

 

    function exportToCashPoolSummaryExcel() {

        try {
            KendoGridToCSVConvertor("#CashPoolSummaryGrid", 'CashPoolSummary', _originalCashPoolSummaryGridSelectAll);
        }
        catch (e) {            
            console.log(e.message);
        }
    }

    function onCashPoolSummaryLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#CashPoolSummaryGrid");
        }, 5);
    }

    function onCashPoolLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#ContractDetailGrid");
        }, 5);
    }

    function onCashPoolContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'Send':
                onCashPoolSend(true);
                break;

            case 'Cancel':
                onCashPoolCancel(true);
                break;

            case 'Clone':
                onCashPoolMirror(true);
                break;

            case 'Bulk Update':
                onCashPoolBulkUpdate(true);
                break;

            case 'Refresh Data':
                onCashPoolChange();
                break;

            case 'AutoFit Columns':
                resizeGridColumns("#ContractDetailGrid");
                break;

            case 'Unsort':
                onCashPoolUnsortGrid("#ContractDetailGrid");
                break;

            case "Reset Filter":
                ResetFilter("#ContractDetailGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#ContractDetailGrid");

                $("#ContractDetailGrid").data('kendoGrid').setOptions(_originalContractDetailGrid);
                $('#ContractDetailGrid').data("kendoGrid").dataSource.read();
                break;

            case 'Select All':
                onCashPoolSelectAll(e);
                break;

            case 'Export To Excel':
                exportToCashPoolExcel();
                break;
        }
    }

    function onCashPoolUnsortGrid(e) {
        UnsortGrid(e);
    }

    function exportToCashPoolExcel() {
        try {
            KendoGridToCSVConvertor("#ContractDetailGrid", 'CashPool', _originalContractDetailGridSelectAll);
        }
        catch (e) {
            DisplayControllerByStringError("Error", e.message);
            console.log(e.message);
        }
    }

    function onCashPoolChange() {
        _CashPoolSelectedRows = [];
        _CashPoolSelectAll = false;

        $("#CashPoolSummaryGrid").data("kendoGrid").dataSource.read();     
    }

    function onCashPoolSummaryRowChange(e) {
        _CashPoolSummarySelectedRows = [];

        $("#ContractDetailGrid").data("kendoGrid").dataSource.read();

        _originalCashPoolSummaryGridSelectAll = false;
        BackupCashPoolSummaryRowSelection();
    }

    function onCashPoolRowChange(e) {
        e.preventDefault();

        _CashPoolSelectedRows = [];


        _originalContractDetailGridSelectAll = false;

        if (_CashPoolDisableRowChangeEvents == false) {
            try {
                var entityGrid = $("#ContractDetailGrid").data("kendoGrid");
                var selectedItem = entityGrid.dataItem(entityGrid.select());

                if (selectedItem != null) {
                    var selectedItem = entityGrid.dataItem(entityGrid.select());

                    var entityId = selectedItem["EntityId"];
                    var effectiveDate = selectedItem["EffectiveDate"];
                    var securityNumber = selectedItem["SecurityNumber"];
                    var issueId = selectedItem["IssueId"];

                    SidePanelUpdate(effectiveDate, entityId, issueId, securityNumber);


                    if (selectedItem.BorrowStatus == '@Convert.ToInt32(StatusMain.Pending)') {
                        EnableContextMenuItem("#CashPoolContextMenu", "Send", true);
                        EnableContextMenuItem("#CashPoolContextMenu", "Cancel", true);
                    }
                    else {
                        EnableContextMenuItem("#CashPoolContextMenu", "Send", false);
                        EnableContextMenuItem("#CashPoolContextMenu", "Cancel", false);
                    }

                    _CashPoolSelectAll = false;
                    BackupCashPoolRowSelection();
                }
            }
            catch (e) {
                DisplayControllerByStringError("Error", e.message);
                console.log(e.message);
            }
        }
    }

    function onCashPoolDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreferenceMultiple',
                type: 'POST',
                contentType: 'application/json;',
                success: function(valid) {
                    userPreference = valid;

                    var dropdownList = $('#CashPoolDropdownList').data("kendoMultiSelect");

                    dropdownList.value(userPreference);


                    $('#CashPoolSummaryGrid').data("kendoGrid").dataSource.read();                    
                },
                error: function(valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onCashPoolError(e) {
        console.log(e.message);
    }

    function clickCashPoolCheck(e) {
        var $cb = $(e);
        var checked = $cb.is(':checked');

        var grid = $("#ContractDetailGrid").data("kendoGrid");
        var selectedItem = grid.dataItem(grid.select());

        selectedItem["IncomeTracked"] = checked;
    }

    function onCashPoolCheckData(e) {
        try {
            CheckGridData('#ContractDetailGrid');
        }
        catch (err) {
            LogError(err.message);
        }

        ReInitVirtualScroll("#ContractDetailGrid");
        RestoreCashPoolRowSelection();
    }

    $('#SharedLabelCheckBox').change(function () {
        RefreshGrid("#CashPoolSummaryGrid");
        RefreshGrid("#ContractDetailGrid");
    });

    function onCashPoolSummaryCheckData() {
        try {
            CheckGridData('#CashPoolSummaryGrid');
        }
        catch (e) {
            console.log(e.message);
        }

        RestoreCashPoolSummaryRowSelection();
    }

    function additionalCashPoolSummaryData() {
        var datepicker = $("#CashPoolCalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entityId = $("#CashPoolDropdownList").data("kendoMultiSelect").value();

        return {
            effectiveDate: value,
            entityId: entityId,
            contraEntityId: ''
        }
    }

    function additionalCashPoolData() {
        var datepicker = $("#CashPoolCalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entityId = $("#CashPoolDropdownList").data("kendoMultiSelect").value();

        try
        {
            var entityGrid = $("#CashPoolSummaryGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            entityId = selectedItem["EntityId"];
            contraEntityId = selectedItem["ContraEntity"];
            poolType = selectedItem["PoolType"];
        }
        catch (e) {
            contraEntityId = "";
            poolType = 'C'
        }

        return {
            effectiveDate: value,
            entityId: entityId,
            contraEntityId: contraEntityId,
            type: poolType
        }
    }

    function additionalCashPoolEntityData() {
        var entityId = $("#CashPoolDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entityId,
        }
    }




    function ReInitVirtualScroll(e) {
        var grid = $(e).data("kendoGrid");
        grid._rowHeight = undefined;
        grid.virtualScrollable.refresh();
    }


</script>
    @(
 Html.Kendo().ToolBar()
    .Name("CashPoolHeaderToolBar")
    .Resizable(true)
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("EffectiveDate").ToHtmlString());

        items.Add().Template(Html.Kendo().DatePicker()
            .Name("CashPoolCalander")
            .Format("yyyy-MM-dd")
            .Value(DateTime.Now)
            .HtmlAttributes(new { @class="width90"})
            .Events(events => events.Change("onCashPoolChange")).ToHtmlString());

        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());

        items.Add().Template(Html.Kendo().MultiSelect()
          .Name("CashPoolDropdownList")
                           .TagMode(TagMode.Multiple)
                   .AutoWidth(true)
                   .Enable(true)
                   .DownArrow(true)
                   .Size(ComponentSize.Small)
                   .ClearButton(false)
                   .HtmlAttributes(new { @style = "width:100%" })
                       .Placeholder("No records selected")
                       .AutoBind(true)
          .ItemTemplate("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                           "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                           "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
           .Events(e =>
           {
               e.DataBound("onCashPoolDefaultLoad");
               e.Close("onCashPoolChange");
           })
           .DataTextField("Custodian")
           .DataValueField("CompanyId")
           .DataSource(ds =>
           {
               ds.Read(read => read.Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" }));
           }).ToHtmlString());
    }))

<hr class="hr-white">

<div id="CashPoolSummaryContent" class="grid-div">
    @(Html.Kendo().Splitter()
        .Name("CashPoolSplitter")
        .HtmlAttributes(new { @class = "grid" })
        .Orientation(SplitterOrientation.Vertical)
        .Panes(panes =>
        {
            panes.Add()
                .Collapsible(false)
                .Size("30%")
                .Scrollable(false)
                .Content(@<text>
    @(Html.Kendo().Grid<SL_CashPoolExtendedProjection>()
    .Name("CashPoolSummaryGrid")
    .Sortable(sort =>
    {
        sort.AllowUnsort(true);
        sort.Enabled(true);
        sort.SortMode(GridSortMode.MultipleColumn);
    })
    .Scrollable()
    .Filterable()
    .Navigatable()
    .NoRecords()
     .HtmlAttributes(new { @class = "grid" })
    .Reorderable(reorder => reorder.Columns(true))
    .ColumnMenu(menu =>
    {
        menu.Columns(true);
        menu.Filterable(true);
        menu.Sortable(true);
        menu.ComponentType( "modern" );
    } )
    .Selectable(seclect => seclect.Mode(GridSelectionMode.Multiple))
    .Events(events =>
    {
        events.Change("onCashPoolSummaryRowChange");
        events.DataBound("onCashPoolSummaryCheckData");
        events.ColumnHide("onCashPoolSummaryLayoutChange");
        events.ColumnShow("onCashPoolSummaryLayoutChange");
        events.ColumnResize("onCashPoolSummaryLayoutChange");
        events.ColumnReorder("onCashPoolSummaryLayoutChange");
    })
    .Columns(cols =>
    {
        cols.Bound(x => x.EffectiveDate).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        cols.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        cols.Bound(x => x.ClearingId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        cols.Bound(x => x.ContraEntity).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.AccountName).GetColumnFormat(ColumnTypeEnum.String, false, "", "");

        cols.Bound(x => x.PoolType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");

        cols.Bound(x => x.TotalMarketValueDeliverable).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(TotalMarketValueDeliverable)#", "");
        cols.Bound(x => x.TotalMarketValueRecieveable).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(TotalMarketValueRecieveable)#", "");

        cols.Bound(x => x.TotalDeliverable).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(TotalDeliverable)#", "");
        cols.Bound(x => x.TotalDeliverableExposure).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(TotalDeliverableExposure)#", "");

        cols.Bound(x => x.TotalRecieveable).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(TotalRecieveable)#", "");
        cols.Bound(x => x.TotalRecieveableExposure).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(TotalRecieveableExposure)#", "");

        cols.Bound(x => x.Currency).GetColumnFormat(ColumnTypeEnum.String, true, "", "");
    })
    .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
    .DataSource(ds => ds.Ajax()
        .ServerOperation(false)
        .AutoSync(true)
        .Read(read => read.Action("Read_CashPoolSummary", "Contract", new { area = "DomesticTrading" }).Data("additionalCashPoolSummaryData"))
        .Aggregates(agg =>
        {
            agg.Add(x => x.TotalMarketValueDeliverable).Sum();
            agg.Add(x => x.TotalMarketValueRecieveable).Sum();

            agg.Add(x => x.TotalDeliverable).Sum();
            agg.Add(x => x.TotalDeliverableExposure).Sum();

            agg.Add(x => x.TotalRecieveable).Sum();
            agg.Add(x => x.TotalRecieveableExposure).Sum();
        })))</text>);

            panes.Add()
                .Collapsible(false)
                .Size("70%")
                .Scrollable(false)
                .Content(@<text>
    @(
 Html.Kendo().Grid<SL_ContractExtendedProjection>()
    .Name( "ContractDetailGrid" )
    .HtmlAttributes(new { @class = "grid" })
    .Sortable( sort =>
    {
        sort.AllowUnsort( true );
        sort.Enabled( true );
        sort.SortMode( GridSortMode.MultipleColumn );
    } )
    .Filterable()
    .Scrollable(scroll => scroll.Virtual(true))
    .NoRecords()
    .Reorderable( reorder => reorder.Columns( true ) )
    .ColumnMenu( menu =>
    {
        menu.Columns( true );
        menu.Filterable( true );
        menu.Sortable( true );
        columnMenu.ComponentType( "modern" );
    } )
    .AutoBind( false )
    .Selectable( seclect => seclect.Mode( GridSelectionMode.Multiple ) )
    .Events( events =>
    {
        events.Change( "onCashPoolRowChange" );
        events.DataBound( "onCashPoolCheckData" );
        events.ColumnHide( "onCashPoolLayoutChange" );
        events.ColumnShow( "onCashPoolLayoutChange" );
        events.ColumnResize( "onCashPoolLayoutChange" );
        events.ColumnReorder( "onCashPoolLayoutChange" );
    } )
    .Columns(columns =>
    {
        columns.Bound(x => x.EffectiveDate).Hidden(true).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
        columns.Bound(x => x.SLContract).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound(x => x.EntityId).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.ClearingId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.ContraEntity).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.AccountName).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound(x => x.ContractNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(p => p.TradeType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Sedol).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Isin).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.SecNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Classification).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.RecordDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "").Hidden(true);
        columns.Bound(x => x.MktPrice).GetColumnFormat(ColumnTypeEnum.Money, false, "", "").Hidden();
        columns.Bound(x => x.IssueId).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.QuantityDelta).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDeltaDirection(QuantityDelta)#", "").Hidden(true);
        columns.Bound(x => x.QuantityFullSettled).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(QuantityFullSettled)#", "").Hidden(true);
        columns.Bound(x => x.QuantityStartOfDay).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(QuantityStartOfDay)#", "").Hidden(true);
        columns.Bound(x => x.Quantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(Quantity)#", "");
        columns.Bound(x => x.QuantityOnRecallOpen).GetColumnFormat(ColumnTypeEnum.Position, false, "", "");
        columns.Bound(x => x.AmountFullSettled).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(AmountFullSettled)#", "").Hidden(true);
        columns.Bound(x => x.AmountDelta).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDeltaDirection(AmountDelta)#", "").Hidden(true);
        columns.Bound(x => x.Amount).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(Amount)#", "");
        columns.Bound(x => x.AmountStartOfDay).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(AmountStartOfDay)#", "").Hidden(true);
        columns.Bound(x => x.ExcessNetExposureAmount).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetMoneyDirection(ExcessNetExposureAmount)#", "");
        columns.Bound(x => x.DepositoryStatus).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound(x => x.CollateralFlag).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.ProfitId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.RebateRate).GetColumnFormat(ColumnTypeEnum.Rate, true, "#=GetRateDirection(RebateRate)#", "");
        columns.Bound(x => x.RebateRateId).Hidden(true);
        columns.Bound(x => x.Mark).GetColumnFormat(ColumnTypeEnum.Margin, false, "#=GetRateDirection(Mark)#", "");
        columns.Bound(x => x.MarkParameterId).Hidden(true);
        columns.Bound(x => x.FeeType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.FeeOffset).GetColumnFormat(ColumnTypeEnum.Rate, true, "#=GetRateDirection(FeeOffset)#", "");
        columns.Bound(x => x.CashSettleDate).Hidden(true).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
        columns.Bound(x => x.SecuritySettleDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
        columns.Bound(x => x.TermDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
        columns.Bound(x => x.CurrencyCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.BookRebateRateIntraday).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(BookRebateRateIntraday)#", "");
        columns.Bound(x => x.BookRebateRateEndOfDay).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(BookRebateRateEndOfDay)#", "");
        columns.Bound(x => x.DividendRate).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.DividendCallable).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.SecurityLoc).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.CashLoc).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.IncomeAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(IncomeAmount)#", "");
        columns.Bound(x => x.Spread).GetColumnFormat(ColumnTypeEnum.Money, false, "#=GetRateDirection(Spread)#", "");
        columns.Bound(x => x.DateTimeId).GetColumnFormat(ColumnTypeEnum.Time, false, "", "");
    } )
    .Resizable( cols => cols.Columns( bool.Parse( DataSystemValues.LoadSystemValue( "ResizeableGrid", "true" ) ) ) )
    .DataSource( ds => ds.Ajax()
        .ServerOperation( false )
        .AutoSync( true )
        .Sort(sort =>
        {
            sort.Add( x => x.Ticker );
        })
        .Read( read => read.Action( "Read_ContractByCashPool", "Contract", new { area = "DomesticTrading" } ).Data( "additionalCashPoolData" ) )
        .Aggregates( s =>
        {
            s.Add(x => x.QuantityFullSettled).Sum();
            s.Add(x => x.QuantityDelta).Sum();
            s.Add(x => x.Quantity).Sum();
            s.Add(x => x.QuantityStartOfDay).Sum();
            s.Add(x => x.AmountFullSettled).Sum();
            s.Add(x => x.AmountDelta).Sum();
            s.Add(x => x.Amount).Sum();
            s.Add(x => x.AmountStartOfDay).Sum();
            s.Add(x => x.IncomeAmount).Sum();
            s.Add(x => x.RebateRate).Average();
        } )
        .PageSize(100)))

            </text>);
        })
)
</div>

@(Html.Kendo().ContextMenu()
.Name("CashPoolSummaryContextMenu")
    .Target("#CashPoolSummaryGrid")
    .Events(events => events.Select("onCashPoolSummaryContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
        items.Add().Separator(true);
        items.Add().Text("Select All").Enabled(true);
        items.Add().Text("Export To Excel").Enabled(true);
    }))




@(Html.Kendo().ContextMenu()
.Name("CashPoolContextMenu")
    .Target("#ContractDetailGrid")
    .Events(events => events.Select("onCashPoolContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("Refresh Data").Enabled(true);
        items.Add().Separator(true);
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
        items.Add().Separator(true);
        items.Add().Text("Select All").Enabled(true);
        items.Add().Text("Export To Excel").Enabled(true);

    }))
