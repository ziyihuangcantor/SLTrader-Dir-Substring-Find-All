@using System.ComponentModel
@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Tools


<style scoped>   
    #ProfitLossCalculatorChart {
        width: 100%;
        height: 100%;
    }

    #ProfitLossCalculatorGrid {
        width: 100%;
        height: 100%;
    }

      #ProfitLossCalculatorButton.zeroclipboard-is-hover {
        background-color: #1ba1e2;
    }

    #ProfitLossCalculatorToolBar .k-radio-label {
        top: -8px;
        padding-left:20px;
        vertical-align:middle;
    }
</style>

<script type="text/javascript">
    var _originalProfitLossCalculatorGrid = null;
    var enumType = null;

    $(document).ready(function () {
        setTimeout(function () {
            _originalProfitLossCalculatorGrid = $('#ProfitLossCalculatorGrid').data('kendoGrid').getOptions();

            LoadGridLayout("#ProfitLossCalculatorGrid");
        }, 5);


        var clientEvent1 = new ZeroClipboard(document.getElementById("ProfitLossCalculatorButton"));

        clientEvent1.on("ready", function (readyEvent) {
            clientEvent1.on("copy", function (event) {
                var data1 = KendoGridToText("#ProfitLossCalculatorGrid", "ProfitLossCalculatorGrid", false);
                clientEvent1.setText(data1);
            });
        });
    });

    $('#SharedLabelCheckBox').on('change', function () {
        RefreshGrid("#ProfitLossCalculatorGrid");
    });

    function onProfitLossCalculatorCheckData(e) {
        CheckGridData('#ProfitLossCalculatorGrid');
    }


    function onProfitLossCalculatorChange() {      
    }

    function onProfitLossCalculatorStart() {
        kendo.ui.progress($("#ProfitLossCalculatorGrid"), true);
    }

    function onProfitLossCalculatorEnd() {
        kendo.ui.progress($("#ProfitLossCalculatorGrid"), false);

    }

    function onProfitLossCalculatorGridLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#ProfitLossCalculatorGrid");
        }, 5);
    }


    function onProfitLossCalculatorDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    userPreference = valid;

                    var dropdownList = $('#ProfitLossCalculatorEntityDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });                    
                },
                error: function (valid) {
                    userPreference = null;
                }
            })
        }
        catch (e) {
            console.log(e.message);
        }
    }
 

    function onProfitLossCalculatorError(e) {
        console.log(e.message);
    }

    function onProfitLossCalculatorContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#ProfitLossCalculatorGrid");
                break;

            case 'Unsort':
                UnsortGrid("#ProfitLossCalculatorGrid");
                break;

            case "Reset Filter":
                ResetFilter("#ProfitLossCalculatorGrid");
                break;

            case 'Select All':
                onProfitLossCalculatorSelectAll();
                break;

            case 'Export To Excel':
                exportToProfitLossCalculatorExcel();
                break;
        }
    }

    function onProfitLossCalculatorSelectAll() {
        try {
            var ProfitLossCalculatorGrid = $("#ProfitLossCalculatorGrid").data("kendoGrid");
            ProfitLossCalculatorGrid.select(ProfitLossCalculatorGrid.tbody.find(">tr"));
        } catch (e) {
            console.log(e.message);
        }
    }


    function exportToProfitLossCalculatorExcel() {
        KendoGridToCSVConvertor("#ProfitLossCalculatorGrid", 'ProfitLossCalculatorGrid', false);
    }


    function OnProfitLossCalculatorRecalc() {
        kendo.ui.progress($("#ProfitLossCalculatorGrid"), true);

        try {
            var ProfitLossCalculatorEntity = $("#ProfitLossCalculatorEntityDropdownList").data("kendoDropDownList").value();
            var startDatepickerSource = $("#ProfitLossCalculatorStartDateCalander").data("kendoDatePicker");
            var stopDatepickerSource = $("#ProfitLossCalculatorStopDateCalander").data("kendoDatePicker");
            var excludePc = $("#ExcludeProfitCenterTextBox").text();

            var startDate = kendo.toString(startDatepickerSource.value(), 'yyyy-MM-dd');
            var stopDate = kendo.toString(stopDatepickerSource.value(), 'yyyy-MM-dd');

            var profitLossCategoryItems = [];
            var profitLossCategoryModels = getDataItems('#ProfitLossCalculatorCategoryGrid',
                       true,
                       '@DataSystemValues.LoadSystemValue("BoxCalculationMaxItems","1000")');
            console.log(profitLossCategoryModels);

            if (profitLossCategoryModels.length > 0) {
                for (i = 0; i < profitLossCategoryModels.length; i++) {
                    profitLossCategoryItems.push(
                    {
                        Category: profitLossCategoryModels[i].Category,
                        OperatorId: profitLossCategoryModels[i].OperatorId,
                        Value: profitLossCategoryModels[i].Value
                    });
                }
            }

            $.ajax({
                url: '@Url.Action("Read_ContractProfitLoss", "ContractRelated", new { area = "DomesticTrading" })',
                type: 'POST',
                data: JSON.stringify({
                    startDate: startDate,
                    stopDate: stopDate,
                    entityId: ProfitLossCalculatorEntity,
                    excludePc: excludePc,
                    categoryList: profitLossCategoryItems
                }),
                contentType: 'application/json;',
                success: function (valid) {
                    
                    $.each(valid, function (i, obj) {

                        var data = $("#ProfitLossCalculatorGrid").data("kendoGrid").dataSource;

                        var EffectiveDate = kendo.parseDate(obj['EffectiveDate']);
                        obj['EffectiveDate'] = EffectiveDate;
                    })

                    $("#ProfitLossCalculatorGrid").data("kendoGrid").dataSource.data(valid);
                    kendo.ui.progress($("#ProfitLossCalculatorGrid"), false);
                },
                error: function (valid) {
                    kendo.ui.progress($("#ProfitLossCalculatorGrid"), false);
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }
</script>


@(
 Html.Kendo().ToolBar()
        .Name( "ProfitLossCalculatorToolBar" )
    .Resizable( true )
    .HtmlAttributes( new { @class = "tBar" } )
    .Items( items =>
    {
        items.Add().Template( LabelHelper.Label( "StartDate" ).ToHtmlString() );

        items.Add().Template( Html.Kendo().DatePicker()
            .Name( "ProfitLossCalculatorStartDateCalander" )
            .Format( "yyyy-MM-dd" )
            .Value( DateTime.Today )
            .Events( events => events.Change( "onProfitLossCalculatorChange" ) )
            .HtmlAttributes( new { @class = "Toolbar-Cell" } ).ToHtmlString() );

        items.Add().Template( LabelHelper.Label( "StopDate" ).ToHtmlString() );

        items.Add().Template( Html.Kendo().DatePicker()
            .Name( "ProfitLossCalculatorStopDateCalander" )
            .Format( "yyyy-MM-dd" )
            .Value( DateTime.Today )
             .Events( events => events.Change( "onProfitLossCalculatorChange" ) )
            .HtmlAttributes( new { @class = "Toolbar-Cell" } ).ToHtmlString() );

        items.Add().Template( LabelHelper.Label( "Entity" ).ToHtmlString() );
        items.Add().Template( Html.Kendo().DropDownList()
                            .Name( "ProfitLossCalculatorEntityDropdownList" )
                            .HtmlAttributes( new {@class="width90" } )
                            .DataTextField( "Custodian" )
                            .DataValueField( "CompanyId" )
                            .OptionLabel( LabelHelper.Text( "OptionLabel" ) )
                            .AutoBind( true )
                                .Template( "#if(data.Custodian == \"" + LabelHelper.Text( "OptionLabel" ) + "\")" +
                                   "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                   "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#" )
                            .Events( events => events.Change( "onProfitLossCalculatorChange" ).DataBound( "onProfitLossCalculatorDefaultLoad" ).Open( "onContraEntityAutoCompleteResize" ) )
                            .DataSource( dataSource => dataSource
                            .Events( events => events.Error( "onProfitLossCalculatorError" ) )
                            .Read( read => read
                            .Action( "Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" } ) ) )
                            .SelectedIndex( 0 ).ToHtmlString() );
    } ))

<hr class="hr-white">   
<div id="ProfitLossCalculatorContent" class="grid-div">

    @(Html.Kendo().Splitter()
        .Name("ProfitLossCalculatorSplitter")
        .HtmlAttributes(new { @class = "grid" })
        .Orientation(SplitterOrientation.Horizontal)
        .Panes(panes =>
        {
        panes.Add()
             .Collapsible(false)
             .Size("50%")
             .Scrollable(false)
             .Content( @<text>

                @(Html.Kendo().Grid<ProfitLossCategoryResultsModel>()
                .Name("ProfitLossCalculatorGrid")
                       .HtmlAttributes(new { @class = "grid" })
                  .Sortable(sort =>
                  {
                      sort.AllowUnsort(true);
                      sort.Enabled(true);
                      sort.SortMode(GridSortMode.MultipleColumn);
                  })
                  .Scrollable(scrollable => scrollable.Virtual(true).Enabled(true))
                  .Filterable()
                  .Navigatable()
                  .AutoBind(false)
                  .ColumnMenu(menu =>
                  {
                      menu.Columns(false);
                      menu.Filterable(true);
                      menu.Sortable(true);
                      menu.ComponentType( "modern" );
                  } )
                  .Events(events =>
                  {
                      events.DataBound("onProfitLossCalculatorCheckData");
                      events.ColumnResize("onProfitLossCalculatorGridLayoutChange");
                  })
                  .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Row))
                  .Reorderable(reorder => reorder.Columns(true))
                  .Resizable(resize => resize.Columns(true))
                .Columns(columns =>
                {
                    columns.Bound(x => x.EffectiveDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
                    columns.Bound(x => x.Category).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                    columns.Bound(x => x.Balance).GetColumnFormat(ColumnTypeEnum.Money, true, "", "");
                    columns.Bound(x => x.Income).GetColumnFormat(ColumnTypeEnum.Money, true, "", "");
                    columns.Bound(x => x.Spread).GetColumnFormat(ColumnTypeEnum.Rate, true, "", "");
                })
                .DataSource(ds =>
                {
                    ds.Ajax()
                        .ServerOperation(false)
                        .Aggregates(agg =>
                        {
                            agg.Add(x => x.Balance).Sum();
                            agg.Add(x => x.Income).Sum();
                            agg.Add(x => x.Spread).Sum();
                        });
                }))
            </text>);


    panes.Add()
         .Collapsible(false)
        .Size("50%")
        .Scrollable(false)
        .Content( @<text>
 @(Html.Kendo().ToolBar()
        .Name("ProfitLossCalculatorInternalToolBar")
    .Resizable(true)
    .HtmlAttributes(new { @class = "tBar" })
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("ExludeProfitCenter").ToHtmlString());

        items.Add().Template(Html.Kendo().TextBox().Name("ExcludeProfitCenterTextBox").ToHtmlString());

        items.Add().Template(Html.Kendo().Button().Name("ProfitLossCalculatorRecalcButton").Events(e => e.Click("OnProfitLossCalculatorRecalc")).Content(LabelHelper.Label("Recalc").ToHtmlString()).ToHtmlString());

        items.Add().Template(Html.Kendo().Button().Name("ProfitLossCalculatorSaveButton").Events(e => e.Click("OnProfitLossCalculatorRecalc")).Content(LabelHelper.Label("Save Item(s)").ToHtmlString()).ToHtmlString());
    }))

   
                        @(Html.Kendo().Grid<ProfitLossCategoryModel>()
                                      .Name("ProfitLossCalculatorCategoryGrid")
                                                             .HtmlAttributes(new { @class = "grid" })
                  .Sortable(sort =>
                  {
                      sort.AllowUnsort(true);
                      sort.Enabled(true);
                      sort.SortMode(GridSortMode.MultipleColumn);
                  })
                  .ToolBar(toolbar =>
                  {
                      toolbar.Create();
                  })
                  .Scrollable(scrollable => scrollable.Virtual(true).Enabled(true))
                  .Filterable()
                  .Navigatable()
                  .AutoBind(false)
                  .Editable(edit => edit.Enabled(true).Mode(GridEditMode.InLine))
                  .ColumnMenu(menu =>
                  {
                      menu.Columns(false);
                      menu.Filterable(true);
                      menu.Sortable(true);
                      menu.ComponentType( "modern" );
                  } )
                  .Events(events =>
                  {
                      events.DataBound("onProfitLossCalculatorCheckData");
                      events.ColumnResize("onProfitLossCalculatorGridLayoutChange");
                  })
                  .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Row))
                  .Reorderable(reorder => reorder.Columns(true))
                  .Resizable(resize => resize.Columns(true))
                .Columns(columns =>
                {
                    columns.Bound(x => x.Category).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                    columns.Bound(x => x.OperatorId).GetColumnFormat(ColumnTypeEnum.String, false, "", "_ProfitLossOperatorDropdown");
                    columns.Bound(x => x.Value).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                    columns.Command(x =>
                    {
                        x.Edit();
                        x.Destroy();
                    });
                })
                .DataSource(ds =>
                {
                    ds.Ajax()
                    .ServerOperation(false)
                    .Create(create => create.Action("CreateProfitLossCategory", "ContractRelated", new { area = "DomesticTrading" }))
                    .Update(update => update.Action("UpdateProfitLossCategory", "ContractRelated", new { area = "DomesticTrading" }))
                    .Destroy(destroy => destroy.Action("DeleteProfitLossCategory", "ContractRelated", new { area = "DomesticTrading" }))
                    .Model(model =>
                    {
                        model.Id(x => x.Category);
                    });
                }))
        </text>);
        }))
</div>

@(
 Html.Kendo().ContextMenu()
.Name( "ProfitLossCalculatorContextMenu" )
            .Target( "#ProfitLossCalculatorGrid" )
.Events( events => events.Select( "onProfitLossCalculatorContextMenuSelect" ) )
.Items( items =>
{
    items.Add().Text("AutoFit Columns");
    items.Add().Text( "Unsort" ).Enabled( true );
    items.Add().Text( "Reset Filter" ).Enabled( true );
    items.Add().Text( "Select All" ).Enabled( true );
    items.Add().Separator( true );
    items.Add().Text( "Copy" ).Enabled( true ).HtmlAttributes( new { ID = "ProfitLossCalculatorButton" } );
    items.Add().Text( "Export To Excel" ).Enabled( true );
} ))