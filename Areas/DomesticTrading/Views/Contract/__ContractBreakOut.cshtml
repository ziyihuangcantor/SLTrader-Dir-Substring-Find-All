@using System.ComponentModel
@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools

<script type="text/javascript">
    var _originalContractGrid = null;

    $.connection.hub.reconnected(function () {
        try {
            var summaryType = $("#ContarctSummaryDetailDropdownList").data("kendoDropDownList").value()

            var grid = $("#ContractBreakOutDetails").data("kendoGrid").dataSource;
        }
        catch (e) { }
    });

    $('#SharedLabelCheckBox').on('change', function () {
        RefreshGrid("#ContractBreakOutDetails");
    });

    $(document).ready(function () {
        setTimeout(function () {
            _originalContractGrid = $('#ContractBreakOutDetails').data('kendoGrid').getOptions();

            LoadGridLayout("#ContractBreakOutDetails");
        }, 5);

        var clientEvent2 = new ZeroClipboard(document.getElementById("ContractButton"));

        clientEvent2.on("ready", function (readyEvent) {
            clientEvent2.on("copy", function (event) {
                var data2 = KendoGridToText("#ContractBreakOutDetails", "ContractBreakOutDetails", contractSelectAll);
                clientEvent2.setText(data2);
            });
        });
    });


    function onContractBreakOutDetailGridLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#ContractBreakOutDetails");
        }, 5);
    }

    var contractSelectAll = false;

    var _contractSelectedRows = [];


    function BackupContractRowSelection() {
        var grid = $("#ContractBreakOutDetails").data("kendoGrid");

        var rows = grid.select();

        rows.each(function (index, row) {
            var selectedItem = grid.dataItem(row);
            _contractSelectedRows.push(selectedItem);
        });
    }

    function RestoreContractRowSelection() {
        if (_contractSelectedRows.length != 0) {
            for (var i = 0; i < _contractSelectedRows.length; i++) {
                var curr_id = _contractSelectedRows[i].uid;

                $('#ContractBreakOutDetails').data("kendoGrid").tbody.find("tr[data-uid='" + curr_id + "']").addClass("k-state-selected");
            }
        }
    }

    function onContractBreakOutCheckData(e) {
        CheckGridData('#ContractBreakOutDetails');

        RestoreContractRowSelection();
    }


    function additionalContractData() {

        var datepicker = $("#ContractBreakOutCalander").data("kendoDatePicker");
        var effectiveDate = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entity = $("#ContractBreakOutDropdownList").data("kendoDropDownList").value();

        return {
            effectiveDate: effectiveDate,
            entityId: entity,
        }
    }

    function onContractError(e) {
        LogError(e.message);
    }

    function onContractSummaryError(e) {
        LogError(e.message);
    }

    function onReturnContractSelected(e) {
        if (e) {
            var dataItems = [];

            var grid = $('#ContractBreakOutDetails').data('kendoGrid');
            var rows = grid.select();

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });

            HelperPartialWindow(
                JSON.stringify(dataItems),
                'Book Returns',
                1100,
                450,
                '/DomesticTrading/Boxcalculation/Load_ReturnByContract'
            );
        }
    }

    function onApplyFee(e) {
        if (e) {
            var dataItems = [];

            var grid = $('#ContractBreakOutDetails').data('kendoGrid');
            var rows = grid.select();

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });

            HelperPartialWindow(
                JSON.stringify(dataItems),
                'Apply Fee',
                1100,
                450,
                '/DomesticTrading/Contract/Load_ContractByFee'
            );
        }
    }

    function onShowProfitLossChart(e) {
        if (e) {
            var entity = $("#ContractBreakOutDropdownList").data("kendoDropDownList");



            HelperPartialWindow(
                JSON.stringify({
                    entityId: entity.value()
                }),
                'Profit & Loss',
                1100,
                450,
                '/DomesticTrading/Contract/LoadProfitLoss'
            );
        }
    }

    function onActivityContractSelected(e) {
        if (e) {
            var entityGrid = $("#ContractBreakOutDetails").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());


            HelperPartialWindow(
                JSON.stringify(selectedItem),
                'Activity',
                1100,
                450,
                '/DomesticTrading/Activity/LoadActivityByContract'
            );
        }
    }

    function addContractToLcor(e) {
        if (e) {
            var dataItems = [];

            var grid = $('#ContractBreakOutDetails').data('kendoGrid');
            var rows = grid.select();

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });

            HelperPartialWindow(
                JSON.stringify({ items: dataItems }),
                'Add items to LCOR',
                490,
                490,
                '/DomesticTrading/AutoAction/LoadAutoBorrowContractProjectionPartial'
            );
        }
    }

    function onBorrowCallbackContractSelected(e) {
        if (e) {
            var dataItems = [];

            var grid = $('#ContractBreakOutDetails').data('kendoGrid');
            var rows = grid.select();

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });

            HelperPartialWindow(
                JSON.stringify(dataItems),
                'Borrow Callback',
                1100,
                450,
                '/DomesticTrading/Boxcalculation/Load_BorrowCallback'
            );
        }
    }

    function onProfitIdContractSelected(e) {
        if (e) {
            var dataItems = [];

            var grid = $('#ContractBreakOutDetails').data('kendoGrid');
            var rows = grid.select();

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });

            HelperPartialWindow(
                JSON.stringify(dataItems),
                'PC Change',
                1100,
                450,
                '/DomesticTrading/Boxcalculation/Load_ProfitCenter'
            );
        }
    }

    function onRecallContractSelected(e) {

        if (e) {
            var dataItems = [];

            var grid = $('#ContractBreakOutDetails').data('kendoGrid');
            var rows = grid.select();

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });

            HelperPartialWindow(
                JSON.stringify(dataItems),
                'Book Recalls',
                1100,
                450,
                '/DomesticTrading/Boxcalculation/Load_RecallByContract'
            );
        }
    }

    function onUpdateContractSelected(e) {

        if (e) {
            var dataItems = [];

            var grid = $('#ContractBreakOutDetails').data('kendoGrid');
            var rows = grid.select();

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });

            HelperPartialWindow(
                JSON.stringify(dataItems),
                'Update Contracts',
                1100,
                450,
                '/DomesticTrading/Boxcalculation/Load_ContractUpdate'
            );
        }
    }

    function onRateChangeContractSelected(e) {
        if (e) {
            var dataItems = [];

            var grid = $('#ContractBreakOutDetails').data('kendoGrid');
            var rows = grid.select();

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });

            HelperPartialWindow(
                JSON.stringify(dataItems),
                'Rate Change Contracts',
                1200,
                450,
                '/DomesticTrading/BoxCalculation/Load_RateChangeByContract'
            );
        }
    }

    function addContractToList(e) {
        if (e) {
            var dataItems = [];

            var grid = $('#ContractBreakOutDetails').data('kendoGrid');
            var rows = grid.select();

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });

            HelperPartialWindow(
                JSON.stringify(dataItems),
                'Add items to list',
                500,
                400,
                '/DomesticTrading/Action/LoadActionContractPartial'
            );
        }
    }

    function onContractBreakOutRowChange(e) {
        _contractSelectedRows = [];

        try {
            var entityGrid = $("#ContractBreakOutDetails").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            var entityId = selectedItem["EntityId"];
            var effectiveDate = selectedItem["EffectiveDate"];
            var securityNumber = selectedItem["SecurityNumber"];
            var issueId = selectedItem["IssueId"];
            var contractNumber = selectedItem["ContractNumber"];
            var contraEntity = selectedItem["ContraEntity"];
            var tradeType = selectedItem["TradeType"];

            SidePanelUpdateByContract(effectiveDate, entityId, issueId, securityNumber, contraEntity, contractNumber, tradeType);


            if (selectedItem["TradeType"] == '@Convert.ToInt32(TradeType.StockBorrow)') {
                EnableContextMenuItem("#ContractContextMenu", "Return", true);
                EnableContextMenuItem("#ContractContextMenu", "Recall", false);
            }
            else if (selectedItem["TradeType"] == '@Convert.ToInt32(TradeType.StockLoan)') {
                EnableContextMenuItem("#ContractContextMenu", "Return", false);
                EnableContextMenuItem("#ContractContextMenu", "Recall", true);
            }
        }
        catch (e) {
            LogError(e.message);
            console.log(e.message);
        }

        BackupContractRowSelection();
    }

    function onContractBreakOutDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    userPreference = valid;

                    var dropdownList = $('#ContractBreakOutDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $('#ContractBreakOutDetails').data("kendoGrid").dataSource.read();
                },
                error: function (valid) {
                    userPreference = null;
                }
            });
        } catch (e) {
            LogError(e.message);
        }
    };

    function onContractSelectAll() {
        try {
            var contractGrid = $("#ContractBreakOutDetails").data("kendoGrid");
            contractGrid.select(contractGrid.tbody.find(">tr"));

            contractSelectAll = true;
        } catch (e) {
            LogError(e.message);
        }
    }

    function onContractContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'Apply Fee':
                onApplyFee(true);
                break;

            case 'Return':
                onReturnContractSelected(true);
                break;

            case 'Recall':
                onRecallContractSelected(true);
                break;

            case 'Rate Change':
                onRateChangeContractSelected(true);
                break;

            case 'PC Chg':
                onProfitIdContractSelected(true);
                break;

            case 'Activity':
                onActivityContractSelected(true);
                break;

            case 'Deltas':
                toggleContractColumns();
                break;

            case 'Callback':
                onBorrowCallbackContractSelected(true);
                break;

            case 'Update':
                onUpdateContractSelected(true);
                break;

            case 'AutoFit Columns':
                resizeGridColumns("#ContractBreakOutDetails");
                break;


            case 'Unsort':
                onContractUnsortGrid("#ContractBreakOutDetails");
                break;

            case "Reset Grid":
                ResetUserLayout("#ContractBreakOutDetails");
                $('#ContractBreakOutDetails').data('kendoGrid').setOptions(_originalContractGrid);
                $('#ContractBreakOutDetails').data("kendoGrid").dataSource.read();
                break;

            case "Reset Filter":
                $("#ContractSecuritySearchTextBox").val("");
                ResetFilter("#ContractBreakOutDetails");
                break;

            case 'Select All':
                onContractSelectAll();
                break;

            case 'Export To Excel':
                exportToContractExcel();
                break;
        }
    }

    var hiddenColumns = false;

    function onContractUnsortGrid(e) {
        UnsortGrid(e);
    }

    function onContractBreakOutChange() {
        $("#ContractBreakOutDetails").data("kendoGrid").dataSource.read();
    }

    function exportToContractExcel() {
        KendoGridToCSVConvertor("#ContractBreakOutDetails", 'ContractBreakOutDetails', contractSelectAll);
    }

    $('#SharedLabelCheckBox').change(function () {
        RefreshGrid("#ContractBreakOutDetails");
    });

    function toggleContractColumns() {
        var entityGrid = $("#ContractBreakOutDetails").data("kendoGrid");

        if (hiddenColumns) {
            entityGrid.hideColumn("BorrowQuantityDelta");
            entityGrid.hideColumn("BorrowAmountDelta");

            entityGrid.hideColumn("LoanQuantityDelta");
            entityGrid.hideColumn("LoanAmountDelta");

            entityGrid.showColumn("CurrencyCode");
            entityGrid.showColumn("SettlementDate");
            entityGrid.showColumn("QuantityOnRecall");

            hiddenColumns = false;

        } else {
            entityGrid.showColumn("BorrowQuantityDelta");
            entityGrid.showColumn("BorrowAmountDelta");

            entityGrid.showColumn("LoanQuantityDelta");
            entityGrid.showColumn("LoanAmountDelta");

            entityGrid.hideColumn("CurrencyCode");
            entityGrid.hideColumn("SettlementDate");
            entityGrid.hideColumn("QuantityOnRecall");

            hiddenColumns = true;
        }
    }

    function onContractBreakOutSearchChange(e) {
        e.preventDefault();

        try {

            var grid = $("#ContractBreakOutDetails").data("kendoGrid").dataSource;

            var cusipTextBox = document.getElementById("ContractSecuritySearchTextBox").value;

            QuickColumnFilter(grid, 'Ticker', cusipTextBox);
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onContractBreakOutQuickFilterDataBound() {
        $("#ContractBreakOutFilterDropdownList").data("kendoDropDownList").text('@LabelHelper.Text("OptionLabel")');
    }

    function onContractFilterLoad() {
        var entity = $("#ContractBreakOutDropdownList").data("kendoDropDownList");

        return {
            entityId: entity.value(),
            gridName: 'ContractBreakOutDetails'
        }
    }

    function onContractBreakOutFilterChange() {
        try {
            var grid = $("#ContractBreakOutDetails").data("kendoGrid");
            var entityId = $("#ContractBreakOutDropdownList").data("kendoDropDownList").value();;
            var filterDropDown = $('#ContractBreakOutFilterDropdownList').data("kendoDropDownList").value();

            $.ajax({
                url: '/DomesticTrading/BoxCalculation/QuickFilterLookup',
                type: 'POST',
                data: JSON.stringify({
                    entityId: entityId,
                    gridName: 'ContractBreakOutDetails',
                    filterName: filterDropDown
                }),
                contentType: 'application/json;',
                success: function (valid) {

                    if (valid != null) {
                        $("#ContractSecuritySearchTextBox").val("");

                        var filter = { logic: "and", filters: [] };

                        for (i = 0; i < valid.length; i++) {
                            var quickFilter = valid[i];
                            var ops = null;

                            if (quickFilter.OperatorId == 1) {
                                ops = '@SL_Operator.gte';
                            }
                            else if (quickFilter.OperatorId == 2) {
                                ops = '@SL_Operator.gt';
                            }
                            else if (quickFilter.OperatorId == 3) {
                                ops = '@SL_Operator.lt';
                            }
                            else if (quickFilter.OperatorId == 4) {
                                ops = '@SL_Operator.lte';
                            }
                            else if (quickFilter.OperatorId == 5) {
                                ops = '@SL_Operator.eq';
                            }
                            else if (quickFilter.OperatorId == 6) {
                                ops = '@SL_Operator.neq';
                            }

                            filter.filters.push({ field: quickFilter.Field, operator: ops, value: quickFilter.Value });
                        }

                        grid.dataSource.filter(filter);
                    }
                    else {
                        grid.dataSource.filter({});
                    }
                },
                error: function (valid) {
                    grid.dataSource.filter({});
                }
            })
        }
        catch (e) {
            LogError(e.message);
        }
    }
</script>


@(
 Html.Kendo().ToolBar()
    .Name("ContractBreakOutToolBar")
    .Resizable(true)
    .HtmlAttributes(new { @class = "tBar"})
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("EffectiveDate").ToHtmlString());

        items.Add().Template(Html.Kendo().DatePicker()
            .Name("ContractBreakOutCalander")
            .Format("yyyy-MM-dd")
            .Value(DateTime.Now)
            .HtmlAttributes(new { @class="width90" })
            .Events(events => events.Change("onContractBreakOutChange")).ToHtmlString());

        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());

        items.Add().Template(Html.Kendo().DropDownList()
    .Name("ContractBreakOutDropdownList")
    .HtmlAttributes(new { @class="width90" })
    .Animation(true)
    .DataTextField("Custodian")
    .DataValueField("CompanyId")
    .OptionLabel("Empty List")
    .AutoBind(true)
    .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
    .Events(events => events.Change("onContractBreakOutChange").DataBound("onContractBreakOutDefaultLoad").Open("onContraEntityAutoCompleteResize"))
    .DataSource(dataSource => dataSource
    .Read(read => read
    .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
    .SelectedIndex(0).ToHtmlString());

         items.Add().Template(
            "<table>
    <tr>
        <td>
            " +
            LabelHelper.LabelFor("TickerSearch", "ContractBreakOutSecuritySearchTextBox").ToHtmlString() + "
        </td>
        <td>
            " +
            Html.Kendo().AutoComplete().Name("ContractBreakOutSecuritySearchTextBox").HtmlAttributes(new { @class = "width90" }).Events(eve => eve.Filtering("onContractBreakOutSearchChange")).Suggest(true).ToHtmlString() + "
        </td>
    </tr>
</table>"
            ).HtmlAttributes(new { @style = "float:right;margin-top:3px;" });

    }))

<hr class="hr-white">

<div id="ContractBreakOutContent" class="grid-div">

    @(Html.Kendo().Grid<SL_ContractBreakOutExtendedProjection>
        ()
        .Name("ContractBreakOutDetails")
        .HtmlAttributes(new { @class = "grid" })
        .Sortable(sort =>
        {
        sort.AllowUnsort(true);
        sort.Enabled(true);
        sort.SortMode(GridSortMode.MultipleColumn);
        })
        .Scrollable(scrollable => scrollable.Virtual(true).Enabled(true))
        .Filterable()
        .Navigatable()
        .NoRecords()
        .AutoBind(false)
        .ColumnMenu(menu =>
        {
        menu.Columns(true);
        menu.Filterable(true);
        menu.Sortable(true);
        })
        .Events(events =>
        {
        events.Change("onContractBreakOutRowChange");
        events.DataBound("onContractBreakOutCheckData");
        events.ColumnHide("onContractBreakOutDetailGridLayoutChange");
        events.ColumnShow("onContractBreakOutDetailGridLayoutChange");
        events.ColumnResize("onContractBreakOutDetailGridLayoutChange");
        events.ColumnReorder("onContractBreakOutDetailGridLayoutChange");
        })
        .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Row))
        .Reorderable(reorder => reorder.Columns(true))
        .Columns(columns =>
        {
        columns.Bound(x => x.EffectiveDate).Hidden(true).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
        columns.Bound(x => x.SLContract).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound( x => x.ExecutingSystem ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
        columns.Bound(x => x.EntityId).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.ContraEntity).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.AccountName).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound(x => x.ContractNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.ForeignKey(x => x.TradeType, SLTrader.Tools.EnumExtensions.GetEnumTradeType(), "Value", "Text").GetColumnFormat(ColumnTypeEnum.String, false, "#=GetTradeTypeAlias('black', TradeType)#", "").Filterable(filter => filter.Extra(false));
        columns.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound( x => x.Isin ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.Sedol ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound(x => x.Classification).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.RecordDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "").Hidden(true);
        columns.Bound(x => x.MktPrice).GetColumnFormat(ColumnTypeEnum.Money, false, "", "").Hidden();
        columns.Bound(x => x.IssueId).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");

        columns.Bound(x => x.BorrowQuantityDelta).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDeltaDirection(BorrowQuantityDelta)#", "").Hidden(true);
        columns.Bound(x => x.BorrowQuantityFullSettled).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(BorrowQuantityFullSettled)#", "").Hidden(true);
        columns.Bound(x => x.BorrowQuantityStartOfDay).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(BorrowQuantityStartOfDay)#", "").Hidden(true);
        columns.Bound(x => x.BorrowQuantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(BorrowQuantity)#", "");
        columns.Bound(x => x.BorrowQuantityOnRecall).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDeltaDirection(BorrowQuantityOnRecall)#", "");
        columns.Bound(x => x.BorrowAmountFullSettled).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(BorrowAmountFullSettled)#", "").Hidden(true);
        columns.Bound(x => x.BorrowAmountDelta).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDeltaDirection(BorrowAmountDelta)#", "").Hidden(true);
        columns.Bound(x => x.BorrowAmount).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(BorrowAmount)#", "");
        columns.Bound(x => x.BorrowAmountStartOfDay).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(BorrowAmountStartOfDay)#", "").Hidden(true);

        columns.Bound(x => x.BorrowReturnQuantityPending).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(BorrowReturnQuantityPending)#", "");
        columns.Bound(x => x.BorrowReturnAmountPending).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(BorrowReturnAmountPending)#", "").Hidden(true);


        columns.Bound(x => x.LoanQuantityDelta).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDeltaDirection(LoanQuantityDelta)#", "").Hidden(true);
        columns.Bound(x => x.LoanQuantityFullSettled).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(LoanQuantityFullSettled)#", "").Hidden(true);
        columns.Bound(x => x.LoanQuantityStartOfDay).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(LoanQuantityStartOfDay)#", "").Hidden(true);
        columns.Bound(x => x.LoanQuantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(LoanQuantity)#", "");
        columns.Bound(x => x.LoanQuantityOnRecall).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDeltaDirection(LoanQuantityOnRecall)#", "");
        columns.Bound(x => x.LoanAmountFullSettled).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(LoanAmountFullSettled)#", "").Hidden(true);
        columns.Bound(x => x.LoanAmountDelta).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDeltaDirection(LoanAmountDelta)#", "").Hidden(true);
        columns.Bound(x => x.LoanAmount).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(LoanAmount)#", "");
        columns.Bound(x => x.LoanAmountStartOfDay).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(LoanAmountStartOfDay)#", "").Hidden(true);


        columns.Bound(x => x.LoanReturnQuantityPending).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(LoanReturnQuantityPending)#", "");
        columns.Bound(x => x.LoanReturnAmountPending).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(LoanReturnAmountPending)#", "").Hidden(true);

        columns.Bound(x => x.DepositoryStatus).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound(x => x.CollateralFlag).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.ProfitId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.RebateRate).GetColumnFormat(ColumnTypeEnum.Rate, true, "#=GetRateDirection(RebateRate)#", "");
        columns.Bound(x => x.RebateRateId).Hidden(true);
        columns.Bound(x => x.Mark).GetColumnFormat(ColumnTypeEnum.Margin, false, "#=GetRateDirection(Mark)#", "");
        columns.Bound(x => x.MarkParameterId).Hidden(true);
        columns.Bound(x => x.ValueDate).Hidden(true).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
        columns.Bound(x => x.SettlementDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
        columns.Bound( x => x.TermDate ).GetColumnFormat( ColumnTypeEnum.Date, false, "", "" );
        columns.Bound(x => x.CurrencyCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.SecurityLoc).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.CashLoc).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound( x => x.IncomeTracked ).Hidden( true ).GetColumnFormat( ColumnTypeEnum.String, false, "<input type='checkbox' #=(IncomeTracked) ? checked='checked' : '' # />", "" );
        columns.Bound( x => x.DividendRate ).Hidden( true ).GetColumnFormat( ColumnTypeEnum.Margin, false, "#=GetRateDirection(DividendRate)#", "" );
        columns.Bound( x => x.CashLoc ).Hidden( true ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound(x => x.ActivityItemCount).GetColumnFormat(ColumnTypeEnum.Position, false, "# if (ActivityItemCount > 0) { #<i class='fa fa-bars color-green' ></i># }# ", "").Title("").HtmlAttributes(new { title = "Actions - #= ActivityItemCount # " }).Filterable(false);
        columns.Bound(X => X.ContractFlag).GetColumnFormat(ColumnTypeEnum.String, false, "# if (ContractFlag == 'Pending') { #<i class='fa  fa-info-circle color-blue' ></i># } else if (ContractFlag == 'Success') { #<i class='fa  fa-exclamation-circle color-green'></i># } else if (ContractFlag != ''){ #<i class='fa  fa-exclamation-triangle color-red'></i># } #", "").Title("").HtmlAttributes(new { title = "Status - #= ContractFlag # " }).Filterable(false);
        columns.Bound(x => x.IncomeAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(IncomeAmount)#", "");
        columns.Bound(x => x.Spread).GetColumnFormat(ColumnTypeEnum.Money, false, "#=GetRateDirection(Spread)#", "");
        columns.Bound( x => x.Comment ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.FeeFundRate ).GetColumnFormat( ColumnTypeEnum.String, false, "#=GetRateDirection(FeeFundRate)#", "" );
        columns.Bound( x => x.FeeType ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.FeeOffset ).GetColumnFormat( ColumnTypeEnum.String, false, "#=GetRateNullableDirection(FeeOffset)#", "" );
        columns.Bound( x => x.FeeRate ).GetColumnFormat( ColumnTypeEnum.String, false, "#=GetRateDirection(FeeRate)#", "" );
        columns.Bound(x => x.DateTimeId).GetColumnFormat(ColumnTypeEnum.Time, false, "", "");
        })
        .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
        .Pageable(page =>
        {
        page.PageSizes(false);
        page.Enabled(true);
        page.Numeric(false);
        page.PreviousNext(false);
        page.Info(false);
        })
        .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(100)
        .ServerOperation(false)
        .Read(read => read.Action("Read_ContractBreakOutExtendedSummary", "Contract", new { area = "DomesticTrading" }).Data("additionalContractData"))
        .Events(events => events.Error("onContractError"))
        .Model(model => model.Id(x => x.SLContract))
        .Sort(sort => sort.Add(x => x.TradeType).Order(ListSortDirection.Descending))
        .Aggregates(s =>
        {
        s.Add(x => x.BorrowQuantityFullSettled).Sum();
        s.Add(x => x.BorrowQuantityDelta).Sum();
        s.Add(x => x.BorrowQuantity).Sum();
        s.Add(x => x.BorrowQuantityStartOfDay).Sum();
        s.Add(x => x.BorrowAmountFullSettled).Sum();
        s.Add(x => x.BorrowAmountDelta).Sum();
        s.Add(x => x.BorrowAmount).Sum();
        s.Add(x => x.BorrowAmountStartOfDay).Sum();
        s.Add(x => x.BorrowReturnQuantityPending).Sum();
        s.Add(x => x.BorrowReturnAmountPending).Sum();

        s.Add(x => x.LoanQuantityFullSettled).Sum();
        s.Add(x => x.LoanQuantityDelta).Sum();
        s.Add(x => x.LoanQuantity).Sum();
        s.Add(x => x.LoanQuantityStartOfDay).Sum();
        s.Add(x => x.LoanAmountFullSettled).Sum();
        s.Add(x => x.LoanAmountDelta).Sum();
        s.Add(x => x.LoanAmount).Sum();
        s.Add(x => x.LoanAmountStartOfDay).Sum();
        s.Add(x => x.LoanReturnQuantityPending).Sum();
        s.Add(x => x.LoanReturnAmountPending).Sum();

        s.Add(x => x.IncomeAmount).Sum();
        s.Add(x => x.RebateRate).Average();
        })))

        @(Html.Kendo().ContextMenu()
        .Name( "ContractContextMenu" )
        .Target( "#ContractBreakOutDetails" )
        .Events( events => events.Select( "onContractContextMenuSelect" ) )
        .Items( items =>
        {
        items.Add().Text( "Apply Fee" ).Enabled( SessionSecurityService.IsEditable( ManagerTask.EditSLFundingRate ) );
        items.Add().Text( "Return" ).Enabled( SessionSecurityService.IsEditable( ManagerTask.EditSLContract ) );
        items.Add().Text( "Recall" ).Enabled( SessionSecurityService.IsEditable( ManagerTask.EditSLContract ) );
        items.Add().Text( "Rate Change" ).Enabled( SessionSecurityService.IsEditable( ManagerTask.EditSLContract ) );
        items.Add().Text( "PC Chg" ).Enabled( SessionSecurityService.IsEditable( ManagerTask.EditSLContract ) );
        items.Add().Text( "Activity" ).Enabled( SessionSecurityService.IsEditable( ManagerTask.EditSLContract ) );
        items.Add().Text( "Deltas" ).Enabled( SessionSecurityService.IsEditable( ManagerTask.EditSLContract ) );
        items.Add().Text( "Callback" ).Enabled( SessionSecurityService.IsEditable( ManagerTask.EditSLContract ) );
        items.Add().Text( "Update" ).Enabled( SessionSecurityService.IsEditable( ManagerTask.EditSLContract ) );
        items.Add().Separator( true );
        items.Add().Text("AutoFit Columns");
        items.Add().Text( "Unsort" ).Enabled( true );
        items.Add().Text( "Reset Filter" ).Enabled( true );
        items.Add().Text( "Reset Grid" ).Enabled( true );
        items.Add().Text( "Select All" ).Enabled( true );
        items.Add().Separator( true );
        items.Add().Text( "Copy" ).Enabled( true ).HtmlAttributes( new { ID = "ContractButton" } );
        items.Add().Text( "Export To Excel" ).Enabled( true );
        } ))
