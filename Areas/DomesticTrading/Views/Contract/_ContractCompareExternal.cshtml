@using BondFire.Entities.Projections
@using BondFire.Entities
@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools


<script type="text/javascript">
    var _originalContractCompareExternalGrid = null;
    var _originalContractCompareExternalToolBar = null;

    $(document).ready(function () {
        setTimeout(function () {
            _originalContractCompareExternalGrid = $("#ContractCompareExternalGrid").data('kendoGrid').getOptions();            
            _originalContractCompareExternalToolBar = $("#ContractCompareExternalGrid .k-grid-toolbar").html();

            LoadGridLayout("#ContractCompareExternalGrid");         

            $("#ContractCompareExternalGrid .k-grid-toolbar").html(_originalContractCompareExternalToolBar);
            $("#ContractCompareExternalGrid .k-grid-toolbar").addClass("k-grid-top");
        }, 5);  
    });


    function onContractCompareExternalLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#ContractCompareExternalGrid");
        }, 5);
    }

 
    function onContractCompareExternalCheckData(e) {
        try {
            CheckGridData('#ContractCompareExternalGrid');
        }
        catch (err) {
            LogError(err.message);
        }
    }

    function ReInitVirtualScroll(e) {
        var grid = $(e).data("kendoGrid");
        grid._rowHeight = undefined;
        grid.virtualScrollable.refresh();
    }

    function onContractCompareExternalContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'Refresh Data':
                $("#ContractCompareExternalGrid").data("kendoGrid").dataSource.read();
                break;

            case 'AutoFit Columns':
                resizeGridColumns("#ContractCompareExternalGrid");
                break;

            case 'Unsort':
                UnsortGrid("#ContractCompareExternalGrid");                
                break;

            case "Reset Filter":
                ResetFilter("#ContractCompareExternalGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#ContractCompareExternalGrid");

                $("#ContractCompareExternalGrid").data('kendoGrid').setOptions(_originalContractCompareExternalGrid);
                $("#ContractCompareExternalGrid .k-grid-toolbar").html(_originalContractCompareExternalToolBar);
                $("#ContractCompareExternalGrid .k-grid-toolbar").addClass("k-grid-top");
                $('#ContractCompareExternalGrid').data("kendoGrid").dataSource.read();
                break;
        }
    }

</script>

<div id="CashPoolSummaryContent" class="grid-div">
    @(
 Html.Kendo().Grid<SL_ContractCompareExternal>()
    .Name( "ContractCompareExternalGrid" )
    .HtmlAttributes(new { @class = "grid" })
    .Sortable( sort =>
    {
        sort.AllowUnsort( true );
        sort.Enabled( true );
        sort.SortMode( GridSortMode.MultipleColumn );
    } )
    .Filterable()
    .Scrollable(scroll => scroll.Virtual(true))
    .NoRecords()
    .Reorderable( reorder => reorder.Columns( true ) )
    .ColumnMenu( menu =>
    {
        menu.Columns( true );
        menu.Filterable( true );
        menu.Sortable( true );
        menu.ComponentType( "modern" );
    } )
    .AutoBind( true )
    .ToolBar(tbar =>
    {
        tbar.Create();
    })
    .Selectable( seclect => seclect.Mode( GridSelectionMode.Multiple ) )
    .Events( events =>
    {
        events.DataBound( "onContractCompareExternalCheckData" );
        events.ColumnHide( "onContractCompareExternalLayoutChange" );
        events.ColumnShow( "onContractCompareExternalLayoutChange" );
        events.ColumnResize( "onContractCompareExternalLayoutChange" );
        events.ColumnReorder( "onContractCompareExternalLayoutChange" );
    } )
    .Columns(columns =>
    {
        columns.Bound(x => x.ExecutionSystemType).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
        columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound(x => x.ContraEntity).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.IsFixedIncome).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.UsePreviousBusinessDay).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.ExternalConnectionString).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.FileMask).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.PROCESSEDFILE).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Lei).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(p => p.ContraLei).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.FixedIncomeEntity).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.MemoInfo).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Command(x =>
        {
            x.Edit();
            x.Destroy();
        });
    } )
    .Resizable( cols => cols.Columns( bool.Parse( DataSystemValues.LoadSystemValue( "ResizeableGrid", "true" ) ) ) )
    .DataSource( ds => ds.Ajax()
        .ServerOperation( false )        
        .Sort(sort =>
        {
            sort.Add( x => x.FileMask );
        })
        .Model(model =>
        {
            model.Id(x => x.SLCONTRACTCOMPAREEXTERNAL);
        })
        .Read( read => read.Action( "Read_ContractCompareExternal", "ContractCompareExternal", new { area = "DomesticTrading" } ))
        .Update(update => update.Action("Update_ContractCompareExternal", "ContractCompareExternal", new { area = "DomesticTrading" }))
        .Destroy(destroy => destroy.Action("Delete_ContractCompareExternal", "ContractCompareExternal", new { area = "DomesticTrading" }))
        .Create(create => create.Action("Create_ContractCompareExternal", "ContractCompareExternal", new { area = "DomesticTrading" }))
        .PageSize(100)))
</div>

@(Html.Kendo().ContextMenu()
.Name("ContractCompareExternalContextMenu")
    .Target("#ContractCompareExternalGrid")
    .Events(events => events.Select("onContractCompareExternalContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("Refresh Data").Enabled(true);
        items.Add().Separator(true);
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);        
    }))