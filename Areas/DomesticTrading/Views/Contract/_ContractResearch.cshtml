@using System.ComponentModel
@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Tools
<style scoped>
        #ContractResearchToolBar label {
            padding-left: 10px;
        }
</style>

<script type="text/javascript">
   
    function onContractResearchCheckData(e) {
        CheckGridData('#ContractResearchDetails');

    }

    function onContractResearchLookup() {
        $("#ContractResearchDetails").data("kendoGrid").dataSource.read();
    }

    function additionalContractResearchData() {

        var startDatepickerSource = $("#ContractStartDateCalander").data("kendoDatePicker");
        var stopDatepickerSource = $("#ContractStopDateCalander").data("kendoDatePicker");

        var startDate = kendo.toString(startDatepickerSource.value(), 'yyyy-MM-dd');
        var stopDate = kendo.toString(stopDatepickerSource.value(), 'yyyy-MM-dd');

        var entity = $("#ContractResearchDropdownList").data("kendoDropDownList").value();
        var issue = document.getElementById("ContractResearchTextBox").value;

        return {
            startDate: startDate,
            stopDate : stopDate,
            entityId: entity,
            criteria: issue
        }
    }

    function onContractResearchError(e) {
        console.log(e.message);
    }


    function onContractResearchRowChange(e) {
        var entityGrid = $("#ContractResearchDetails").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        var entityId = selectedItem["EntityId"];
        var securityNumber = selectedItem["SecurityNumber"];
        var issueId = selectedItem["IssueId"];
        var effectiveDate = selectedItem["EffectiveDate"];


        UpdateIssue(entityId, securityNumber);
        UpdateBox(effectiveDate, entityId, issueId);
        UpdateTrading(entityId, issueId);
        UpdateSharedView(entityId, securityNumber);
    }

    function onContractResearchDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    userPreference = valid;

                    var dropdownList = $('#ContractResearchDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });               
                },
                error: function (valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    };

    function exportToContractExcel() {
        KendoGridToCSVConvertor("#ContractResearchDetails", 'ContractResearchDetails', contractSelectAll);
    }

    $('#SharedLabelCheckBox').change(function () {
        RefreshGrid("#ContractResearchDetails");
    });
</script>


@(
 Html.Kendo().ToolBar()
        .Name("ContractResearchToolBar")
    .Resizable(true)
    .HtmlAttributes(new { @class = "tBar" })
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("StartDate").ToHtmlString());

        items.Add().Template(Html.Kendo().DatePicker()
            .Name("ContractStartDateCalander")
            .Format("yyyy-MM-dd")
            .Value(DateTime.Now)
            .HtmlAttributes(new { @class = "Toolbar-Cell" }).ToHtmlString());

        items.Add().Template(LabelHelper.Label("StopDate").ToHtmlString());

        items.Add().Template(Html.Kendo().DatePicker()
            .Name("ContractStopDateCalander")
            .Format("yyyy-MM-dd")
            .Value(DateTime.Now)
            .HtmlAttributes(new { @class = "Toolbar-Cell" }).ToHtmlString());

        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());

        items.Add().Template(Html.Kendo().DropDownList()
    .Name("ContractResearchDropdownList")
    .HtmlAttributes(new { @class = "Toolbar-Cell" })
    .Animation(true)
    .DataTextField("Custodian")
    .DataValueField("CompanyId")
    .OptionLabel("Empty List")
    .AutoBind(true)
    .DataSource(dataSource => dataSource
    .Read(read => read
    .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
    .SelectedIndex(0).ToHtmlString());


        items.Add().Template(LabelHelper.Label("Issue").ToHtmlString());

        items.Add().Template(Html.TextBox("ContractResearchTextBox", "", new { @class = "k-textbox width100" }).ToHtmlString());

        items.Add().Template(Html.Kendo().Button().Name("ContractResearchButton").Content(LabelHelper.Text("Lookup")).Events(e => e.Click("onContractResearchLookup")).ToHtmlString());
    }))

<hr class="hr-white">
<div id="ContractContent" class="grid-div">

    @(Html.Kendo().Grid<SL_ContractExtendedProjection>()
          .Name("ContractResearchDetails")
          .HtmlAttributes(new { @class = "grid" })
          .Sortable(sort =>
          {
              sort.AllowUnsort(true);
              sort.Enabled(true);
              sort.SortMode(GridSortMode.MultipleColumn);
          })
          .Scrollable(scrollable => scrollable.Virtual(true).Enabled(true))
          .Filterable()
          .Navigatable()
          .AutoBind(false)
          .Events(events => events.Change("onContractResearchRowChange").DataBound("onContractResearchCheckData"))
          .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Row))
          .Columns(columns =>
          {
              columns.Bound(x => x.EffectiveDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
              columns.Bound(x => x.SLContract).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
              columns.Bound(x => x.EntityId).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.ContraEntity).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.ContractNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.TradeType).GetColumnFormat(ColumnTypeEnum.String, false, "#=GetTradeTypeAlias('black', TradeType)#", "");
              columns.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.Classification).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.IssueId).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.QuantityDelta).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDeltaDirection(QuantityDelta)#", "").Hidden(true);
              columns.Bound(x => x.Quantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(Quantity)#", "");
              columns.Bound(x => x.QuantityOnRecall).GetColumnFormat(ColumnTypeEnum.String, false, "# if (QuantityOnRecall > 0) { #<i class='fa  fa-check-circle-o color-blue'></i># } #", "").Title("").HtmlAttributes(new { title = "Quantity On Recall - #= QuantityOnRecall # " }).Filterable(false);
              columns.Bound(x => x.AmountDelta).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDeltaDirection(AmountDelta)#", "").Hidden(true);
              columns.Bound(x => x.Amount).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(Amount)#", "");
              columns.Bound(x => x.CollateralFlag).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.ProfitId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.RebateRate).GetColumnFormat(ColumnTypeEnum.Rate, true, "#=GetRateDirection(RebateRate)#", "");
              columns.Bound(x => x.RebateRateId).Hidden(true);
              columns.Bound(x => x.Mark).GetColumnFormat(ColumnTypeEnum.Margin, false, "#=GetRateDirection(Mark)#", "");
              columns.Bound(x => x.MarkParameterId).Hidden(true);
              columns.Bound(x => x.ValueDate).Hidden(true).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
              columns.Bound(x => x.SettlementDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
              columns.Bound(x => x.CurrencyCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.SecurityLoc).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.CashLoc).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.ActivityItemCount).GetColumnFormat(ColumnTypeEnum.Position, false, "# if (ActivityItemCount > 0) { #<i class='fa fa-bars color-green'></i># }# ", "").Title("").HtmlAttributes(new { title = "Actions - #= ActivityItemCount # " }).Filterable(false);
              columns.Bound(X => X.ContractFlag).GetColumnFormat(ColumnTypeEnum.String, false, "# if (ContractFlag == 'Pending') { #<i class='fa  fa-info-circle color-blue'></i># } else if (ContractFlag == 'Success') { #<i class='fa  fa-exclamation-circle color-green'></i># } else if (ContractFlag != ''){ #<i class='fa  fa-exclamation-triangle color-red'></i># } #", "").Title("").HtmlAttributes(new { title = "Status - #= ContractFlag # " }).Filterable(false);
              columns.Bound(x => x.IncomeAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(IncomeAmount)#", "");           
          })
          .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
          .Pageable(page =>
          {
              page.PageSizes(false);
              page.Enabled(true);
              page.Numeric(false);
              page.PreviousNext(false);
              page.Info(false);
          })
          .DataSource(dataSource => dataSource
              .Ajax()
              .PageSize(100)
              .ServerOperation(false)
              .Read(read => read.Action("Read_ContractExtendedResearch", "Contract", new { area = "DomesticTrading" }).Data("additionalContractResearchData"))
              .Events(events => events.Error("onContractResearchError"))
              .Model(model => model.Id(x => x.SLContract))
              .Sort(sort => sort.Add(x => x.TradeType).Order(ListSortDirection.Descending))      
              .Aggregates(s =>
              {
                  s.Add(x => x.QuantityDelta).Sum();
                  s.Add(x => x.Quantity).Sum();
                  s.Add(x => x.AmountDelta).Sum();
                  s.Add(x => x.Amount).Sum();
                  s.Add(x => x.IncomeAmount).Sum();
                  s.Add(x => x.RebateRate).Average();
              })))
</div>
