
<script type="text/javascript">

    function onNotificationShow(e) {
        if (!$("." + e.sender._guid)[1]) {
            var element = e.element.parent(),
                eWidth = element.width(),
                eHeight = element.height(),
                wWidth = $(window).width(),
                wHeight = $(window).height(),
                newTop, newLeft;

            newLeft = Math.floor(wWidth / 2 - eWidth / 2);
            newTop = Math.floor(wHeight / 2 - eHeight / 2);

            e.element.parent().css({ top: newTop, left: newLeft });
        }
    }

    function ResizeLayout() {
        resizeTabs("#MainTabStrip", 40);
    }

    $(window).resize(function(){
        resizeTabs("#MainTabStrip", 40);
    });

    try {
        var traderHubProxy = $.connection.traderHub;

        $.connection.hub.logging = true;
    
        traderHubProxy.client.updateServiceAction = function (update) {
            console.log(update);
        };

        $.connection.hub.start({ transport: ['webSockets', 'serverSentEvents'], xdomain: true })
        .done(function () { UpdateRealTimeControl("Connected", "lightgreen"); })
        .fail(function () { UpdateRealTimeControl("Failed", "coral"); });

    }
    catch (e) {
        console.log(e.message);
    }

    function onLocalWindowClose() {        
    }

    function onLocalDetailWindowActivate(e) {
        this.center();
    }

    $.connection.hub.connectionSlow(function () {
        UpdateRealTimeControl("Slow RD", "lightyellow");
    });

    $.connection.hub.reconnecting(function () {
        UpdateRealTimeControl("Reconnecting", "coral");
    });

    var tryingToReconnect = false;

    $.connection.hub.reconnecting(function () {
        tryingToReconnect = true;
    });

    $.connection.hub.reconnected(function () {
        UpdateRealTimeControl("Connected", "lightgreen");
    });

    $.connection.hub.error(function (error) {
        console.log('SignalR error: ' + error);
    });

    $.connection.hub.disconnected(function () {
        setTimeout(function () {
            $.connection.hub.start({ transport: ['webSockets', 'serverSentEvents'], xdomain: true })
                    .done(function () { UpdateRealTimeControl("Connected", "lightgreen"); })
                    .fail(function () { UpdateRealTimeControl("Failed", "coral"); });
        }, 1000);
    });

    function onFlip() {
        var panes = $("#MainSplitterChild").data("kendoSplitter").children();
        var app = panes[0];
    }

    $(document).ready(function () {
        initSession('@Url.Action("Index", "Login", new { area = "Login" })');
    });
</script>

<div id="TopBar">@{ Html.RenderPartial("~/Areas/Header/Views/Header/_Header.cshtml", SL_Application.DomesticTrading); }</div>
<div id="NavBar">@{ Html.RenderPartial("~/Areas/DomesticTrading/Views/Menu/Index.cshtml");}</div>

@(Html.Kendo().Splitter()
      .Name("MainSplitterVertical")
      .Orientation(SplitterOrientation.Horizontal)
      .HtmlAttributes(new { @class = "splitter" })       
      .Panes(verticalPanes =>
          {
          verticalPanes.Add()
          .HtmlAttributes(new { id = "SecurityMasterSplitterPanel"})
          .Size("260px")           
            .Collapsible(true)
            .Resizable(true)
            .Scrollable(false)            
          .Content(@<text>
                @Html.Partial("~/Areas/DomesticTrading/Views/Shared/_SecurityMaster.cshtml")
            </text>);
                    
            verticalPanes.Add()
                        .HtmlAttributes(new { id = "top-pane" })
                        .Scrollable(false)
                        .Collapsible(false)
                        .Content(
                          Html.Kendo().Splitter()
                              .Name("MainSplitterChild")
                              .HtmlAttributes(new { @class = "height100p" })
                              .Orientation(SplitterOrientation.Vertical)
                              .Events(e => e.Collapse("ResizeLayout").Resize("ResizeLayout").Expand("ResizeLayout"))                              
                              .Panes(horizontalPanes =>
                              {
                                  horizontalPanes.Add()
                                      .HtmlAttributes(new { id = "left-pane", @class="childSplitter" })                                                                         
                                      .Collapsible(true)
                                      .Resizable(true)                                  
                                      .Scrollable(false)                                                                          
                                      .Content(@<text>
                                    @Html.Partial("~/Areas/DomesticTrading/Views/Tab/Index.cshtml")
                                     </text>);

                                  horizontalPanes.Add()
                                      .HtmlAttributes(new { id = "SharedDetailSplit" })
                                      .Collapsible(true)
                                      .Resizable(true)
                                      .Collapsed(true)
                                      .Size("30%")   
                                      .Scrollable(false)                                     
                                      .Content(@<text>
                                        @Html.Partial("~/Areas/DomesticTrading/Views/Shared/Templates/_SharedDetail.cshtml")
                                    </text>);
                              }).ToHtmlString()
                        );
}))

<div>
    @(Html.Kendo().Notification()
        .Name("NotificationBox")
        .Stacking(NotificationStackingSettings.Down)
        .Events(events => events.Show("onNotificationShow")))

    @(Html.Kendo().Window()
        .Name("LocalDetailWindow")
        .Modal(true)
        .AutoFocus(true)        
        .Events(ev =>
        {
            ev.Activate("onLocalDetailWindowActivate");
        })
        .Actions(actions =>
        {
            actions.Close();
        })
        .Visible(false)
        .Draggable(true)
        .Iframe(false)
        .Scrollable(false)
        .Resizable(resize => resize.Enabled(false))
        .Title("Details"))


    @(Html.Kendo().Window()
        .Name("LocalOneOffDetailWindow")
        .Modal(true)
        .AutoFocus(true)
        .Animation(amin =>
        {
            amin.Enable(true);
            amin.Open(effect => effect.Zoom(ZoomDirection.In));
            amin.Close(close => close.Zoom(ZoomDirection.Out));
        })
        .Visible(false)
        .Resizable(resize => resize.Enabled(false))
        .Draggable(true)
        .Scrollable(false)
        .Title("Details"))

</div>