@using System.ComponentModel
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Enums
@using SLTrader.Tools
@using SLTrader.Models.ContractRelatedModels
@using BondFire.Entities
@using BondFire.Entities.Projections
@using Currency = BondFire.Entities.Currency
@using SL_ExecutionSystemType = BondFire.Entities.SL_ExecutionSystemType
@using SL_DeliveryCode = BondFire.Entities.SL_DeliveryCode

@using EnumExtensions = SLTrader.Tools.EnumExtensions
@using TradeType = BondFire.Entities.TradeType

@model IEnumerable<TradeChangeModel>

<script type="text/javascript">
    var _originalScratchPad = null;
    var _contraEntityChanged = false;

    function onScratchPadContraEntityChanged(e) {
        return {
            contraEntityChanged: _contraEntityChanged
        };
    }

    function onError(e) {
        console.log(e.message);
    }

    $(document).ready(function () {
        setTimeout(function () {
            _originalScratchPad = $("#ScratchPadGrid").data('kendoGrid').getOptions();

            LoadGridLayout("#ScratchPadGrid");
        }, 5);

        var clientScratchPadCopyButton = new ZeroClipboard(document.getElementById("ScratchPadCopyButton"));

        clientScratchPadCopyButton.on("ready", function (readyEvent) {
            clientScratchPadCopyButton.on("copy", function (event) {
                var data = KendoGridToText("#ScratchPadGrid", "ScratchPadGrid", false);
                clientScratchPadCopyButton.setText(data);
            });
        });


       var toolbar = $("#HeaderToolBar").data("kendoToolBar"),
            scratchpadButton = $("#ScratchpadButton"),
            isDisabled = scratchpadButton.hasClass("k-state-disabled");

            toolbar.enable(scratchpadButton, true);
    });

    function onTradeListCreditLimitTest() {

        $("#SaveTradesButton").data("kendoButton").enable(false);
        $("#ConfirmTradesButton").data("kendoButton").enable(false);

        try {
            var grid = $('#ScratchPadGrid').data('kendoGrid');
            var rows = grid.dataSource.data();

            $("#SaveTradesButton").data("kendoButton").enable(false);
            $("#ConfirmTradesButton").data("kendoButton").enable(false);

            console.log(rows);

            $.ajax({
                url: "@Url.Action("ExceedCreditLimitList", "Trade", new { area = "DomesticTrading" })",
                data: JSON.stringify({
                    items: rows
                }),
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    console.log(valid);
                    if (valid == true) {
                        DisplayControllerByStringError("Credit Limit", "Credit Limit Exceeded");

                        $("#SaveTradesButton").data("kendoButton").enable(false);
                        $("#ConfirmTradesButton").data("kendoButton").enable(false);
                    }
                    else {
                        $("#SaveTradesButton").data("kendoButton").enable(true);
                        $("#ConfirmTradesButton").data("kendoButton").enable(true);
                    }

                    return valid;
                },
                error: function (e) {
                    $("#StatusLabel").text(e.statusText);
                    $("#SaveTradesButton").data("kendoButton").enable(false);
                    $("#ConfirmTradesButton").data("kendoButton").enable(false);

                    return false;
                }
            });
        }
        catch (e) {
            $("#SaveTradesButton").data("kendoButton").enable(false);
            $("#ConfirmTradesButton").data("kendoButton").enable(false);
        }
    }

    function onScatchPadPendWindowOpen() {
        var wnd = $("#ScratchPadPendingWindow").data("kendoWindow");

        wnd.setOptions({
            title: 'Processing',
            modal: true
        });

        wnd.content("<div id='LoadingDiv' style='width:200px;height:150px;'></div>");
        kendo.ui.progress($("#LoadingDiv"), true);

        wnd.open();
        wnd.center();
    }

    function onScatchPadPendWindowClose() {
        var wnd = $("#ScratchPadPendingWindow").data("kendoWindow");

        wnd.close();
    }

    function onScratchPadGridLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#ScratchPadGrid");
        }, 5);
    }


    function clickScratchPadCheck(e) {

        var $cb = $(e);
        var checked = $cb.is(':checked');
        var grid = $("#ScratchPadGrid").data("kendoGrid");
        var selectedItem = grid.dataItem(grid.select());

        selectedItem["Enabled"] = checked;
    }

    function onScratchPadCheckData() {
        try
        {
            CheckGridData('#ScratchPadGrid');            
        }
        catch(e)
        {
            console.log(e.message);
        }
    }

    function additionalScratchPadData() {
        var entityId = $("#ScratchpadEntityDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entityId,
        }
    }

    function additionalScratchPadExecutingSystem() {
        var executingSystem = $("#BoxContractExecutingSystemDropdownList").data("kendoDropDownList").value();

        return {
            executingSystem : executingSystem
        }
    }

    function onScatchPadExecutingSystemChange() {
        $("#BoxContractContraEntityTradeTypeDropdownList").data("kendoDropDownList").dataSource.read();
        $("#ScratchPadDeliveryCodeDropdownList").data("kendoDropDownList").dataSource.read();
    }

    function onScratchPadTradeTypeChange() {
        $("#ScratchPadDeliveryCodeDropdownList").data("kendoDropDownList").dataSource.read();
    }

    function onScratchPadDeliveryCodeRequestEnd() {
        var tradeType = $("#BoxContractContraEntityTradeTypeDropdownList").data("kendoDropDownList").value();

        if (tradeType == '@Convert.ToInt32(TradeType.StockBorrow)')
        {
            $("#ScratchPadDeliveryCodeDropdownList").data("kendoDropDownList").value('@Convert.ToInt32(SL_DeliveryCode.PTS)');
        }
        else if (tradeType == '@Convert.ToInt32(TradeType.StockLoan)')
        {
            $("#ScratchPadDeliveryCodeDropdownList").data("kendoDropDownList").value('@Convert.ToInt32(SL_DeliveryCode.CCF)');
        }
        else if ((tradeType == '@Convert.ToInt32(TradeType.FullyPaidBorrow)') || (tradeType == '@Convert.ToInt32(TradeType.FullyPaidLoan)'))
        {
            $("#ScratchPadDeliveryCodeDropdownList").data("kendoDropDownList").value('@Convert.ToInt32(SL_DeliveryCode.PHYS)');
        }
        else
        {
            $("#ScratchPadDeliveryCodeDropdownList").data("kendoDropDownList").value('@Convert.ToInt32(SL_DeliveryCode.NONE)');
        }
    }

    function additionalScratchPadClientNeedData() {
        var entityId = $("#ScratchpadEntityDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entityId,
        }
    }

    function clearScratchPadGrid() {
        $("#ScratchpadListTextBox").val("");
        $("#ScratchPadGrid").data("kendoGrid").dataSource.data([]);
    }

    function scratchPadSelectAll() {
        var spGrid = $('#ScratchPadGrid').data('kendoGrid');
        var rows = spGrid.dataSource.data();

        for (var index = 0; index < rows.length; index++) {
            spGrid.dataSource.data()[index].IsChecked = true;
        }
    }

    function spScratchPadResetToolbar() {
        if ('@DataSystemValues.LoadSystemValue("ScratchpadResetToolbar",true.ToString(), SessionService.SecurityContext)' == '@true.ToString()') {
            $('#ContraEntityCheckBox').attr('checked', false).triggerHandler('change');
            $('#TradeTypeCheckBox').attr('checked', false).triggerHandler('change');
            $('#CurrencyCheckBox').attr('checked', false).triggerHandler('change');
            $('#ProfitCenterCheckBox').attr('checked', false).triggerHandler('change');
            $('#RebateRateCheckBox').attr('checked', false).triggerHandler('change');
            $('#ExecutingSystemCheckBox').attr('checked', false).triggerHandler('change');
            $('#MarkCheckBox').attr('checked', false).triggerHandler('change');
            $('#PriceRoundToCheckBox').attr('checked', false).triggerHandler('change');
            $('#ScratchPadInventorySourceCheckBox').attr('checked', false).triggerHandler('change');

            $("#SratchPadContraEntityDropdownList").data("kendoAutoComplete").value("");            
            document.getElementById("ProfitCenterTextBox").value = "";
            $("#RebateRateTextBox").data("kendoNumericTextBox").value(0);
            $("#MarkTextBox").data("kendoNumericTextBox").value(1.02);

            $('#ScratchPadDeliveryCodeCheckBox').attr('checked', false).triggerHandler('change');
            $('#ScratchPadCollateralFlagCheckBox').attr('checked', false).triggerHandler('change');
            $('#ScratchPadIntraDayEnumCheckBox').attr('checked', false).triggerHandler('change');

            $('#ScratchPadAvailLookupCheckBox').attr('checked', false).triggerHandler('change');

            $('#ScratchPadPriceCalcTypeCheckBox').attr('checked', false).triggerHandler('change');
            $('#ScratchPadAmountCalcTypeCheckBox').attr('checked', false).triggerHandler('change');

        }
    }

    function onScratchpadListParse() {
        var entityId = $("#ScratchpadEntityDropdownList").data("kendoDropDownList").value();

        var items = $('#ScratchpadListTextBox').val();

        var contraEntityId = ($("#ContraEntityCheckBox").is(':checked')) ? $("#SratchPadContraEntityDropdownList").data("kendoAutoComplete").value() : "";
        var tradeType = $("#BoxContractContraEntityTradeTypeDropdownList").data("kendoDropDownList").value();
        var executingSystemType = $("#BoxContractExecutingSystemDropdownList").data("kendoDropDownList").value();

        var currency = $("#BoxContractContraEntityCurrencyDropdownList").data("kendoDropDownList").value();
        var profitCenter = ($("#ProfitCenterCheckBox").is(':checked')) ? document.getElementById("ProfitCenterTextBox").value : "";
        var source = ($("#ScratchPadInventorySourceCheckBox").is(':checked')) ? $("#ScratchPadInventorySourceDropdownList").data("kendoMultiSelect").dataItems() : '@LabelHelper.Text("UseBox")';
        var deliveryCode = ($("#ScratchPadDeliveryCodeCheckBox").is(':checked')) ? $("#ScratchPadDeliveryCodeDropdownList").data("kendoDropDownList").value() : null;

        var fee = ($("#FeeCheckBox").is(':checked')) ? $("#ScratchpadFeeTypeDropdownList").data("kendoDropDownList").value() : null;
        var feeOffSet = ($("#FeeCheckBox").is(':checked')) ? $("#FeeOffsetTextBox").data("kendoNumericTextBox").value() : null;

        var priceClacType = $("#ScratchPadPriceCalcTypeDropdownList").data("kendoAutoComplete").value();
        var tradeAmountCalc = $("#ScratchPadTradeAmountCalcTypeDropdownList").data("kendoAutoComplete").value();

        var allowOddLot = ($("#ScratchPadAllowOddLotCheckBox").is(':checked')) ? true : false;
        var customFormatParse = ($("#ScratchPadAllowCustomFormatParseCheckBox").is(':checked')) ? true : false;

        var cashSettlementDatePicker = $("#ScratchpadCashSettleCalander").data("kendoDatePicker");
        var cashSettlementDateValue = kendo.toString(cashSettlementDatePicker.value(), 'yyyy-MM-dd');

        var securitySettlementDatePicker = $("#ScratchpadSecuritySettleCalander").data("kendoDatePicker");
        var securitySettlementDateValue = kendo.toString(securitySettlementDatePicker.value(), 'yyyy-MM-dd');

        var tradeDateDatePicker = $("#ScratchpadTradeDateCalander").data("kendoDatePicker");
        var tradeDateValue = kendo.toString(tradeDateDatePicker.value(), 'yyyy-MM-dd');

        if (!$("#TradeDateCheckBox").is(':checked')) {
            tradeDateValue = null;
        }
        var collateralFlag = ($("#ScratchPadCollateralFlagCheckBox").is(':checked')) ? $("#ScratchPadCollateralFlagDropdownList").data("kendoDropDownList").value() : '@SL_CollateralFlag.C.ToString()';
        var intraDay = $("#ScratchPadIntraDayDropdownList").data("kendoDropDownList").value();
        var scratchpadAvail = $("#ScratchPadAvailLookupDropdownList").data("kendoDropDownList").value();

        var expectedEndDatePicker = $("#ScratchpadExpectedEndDateCalander").data("kendoDatePicker");
        var expectedEndDateValue = kendo.toString(expectedEndDatePicker.value(), 'yyyy-MM-dd');

        if (!$("#ExpectedEndDateCheckBox").is(':checked')) {
            expectedEndDateValue = null;
        }

        var termDatePicker = $("#ScratchpadTermDateCalander").data("kendoDatePicker");
        var termDateValue = kendo.toString(termDatePicker.value(), 'yyyy-MM-dd');

        if (!$("#TermDateCheckBox").is(':checked')) {
            termDateValue = null;
        }

        if (source != null) {
            if ((source.length == 0) && ($("#ScratchPadInventorySourceCheckBox").is(':checked'))) {
                source = '@LabelHelper.Text("UseAll")';
            }
        }

        var datepickerEffectiveDate = $("#ScratchPadEffectiveDatePicker").data("kendoDatePicker");
        var effectiveDate = kendo.toString(datepickerEffectiveDate.value(), 'yyyy-MM-dd');


        var rebateRate = ($("#RebateRateCheckBox").is(':checked')) ? $("#RebateRateTextBox").data("kendoNumericTextBox").value() : null;
        var mark = ($("#MarkCheckBox").is(':checked')) ? $("#MarkTextBox").data("kendoNumericTextBox").value() : null;
        var grid = $('#ScratchPadGrid').data('kendoGrid');

        $("#ScratchPadParseDataButton").data("kendoButton").enable(false);

        onScatchPadPendWindowOpen();

        $.ajax({
            url: "@Url.Action("LoadList", "Trade", new { area = "DomesticTrading" })",
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify({
                entityId: entityId,
                list: items,
                tradeType: tradeType,
                rebateRate: rebateRate,
                mark: mark,
                currency: currency,
                profitCenter: profitCenter,
                contraEntityId: contraEntityId,
                feeType: fee,
                feeOffSet: feeOffSet,
                tradeDate: tradeDateValue,
                cashSettleDate: cashSettlementDateValue,
                securitySettleDate: securitySettlementDateValue,
                termDate: termDateValue,
                expectedEndDate: expectedEndDateValue,
                effectiveDate: effectiveDate,
                deliveryCode: deliveryCode,
                collateralFlag: collateralFlag,
                intraDayEnum: intraDay,
                executingSystemType: executingSystemType,
                allowOddLot: allowOddLot,
                useCustomFormat: customFormatParse,
                tradeAmountCalcType : tradeAmountCalc ,
                tradePriceAmountCalcType : priceClacType,
                source: source,
                scratchpadAvailLookup: scratchpadAvail
            }),
            success: function (valid) {
                $.each(valid, function (i, obj) {

                    var valueDate = kendo.parseDate(obj['CashSettleDate']);

                    obj['CashSettleDate'] = valueDate;

                    var settlementDate = kendo.parseDate(obj['SecuritySettleDate']);

                    obj['SecuritySettleDate'] = settlementDate;

                    var termDate = kendo.parseDate(obj['TermDate']);
                    obj['TermDate'] = termDate;

                    var tradeDate = kendo.parseDate(obj['TradeDate']);
                    obj['TradeDate'] = tradeDate;

                    var expectedEndDate = kendo.parseDate(obj['ExpectedEndDate']);
                    obj['ExpectedEndDate'] = expectedEndDate;
                });

                grid.dataSource.data(valid);
                grid.refresh();

                onScratchPadCheckData();
                spScratchPadResetToolbar();
                var errorCount = 0;

                $.each(valid, function (i, obj) {
                    if ((obj['MemoInfo'] != null) && (obj['MemoInfo'] != '')) {
                        errorCount = errorCount + 1;
                    }
                });
                onScatchPadPendWindowClose();

                DisplayControllerByStringError("Info", "Sucessfully parsed " + (valid.length - errorCount) + " items, with " + errorCount + " error(s).");

                if (valid.length > 0) {
                    $("#SaveTradesButton").data("kendoButton").enable(true);
                    $("#ApplyChangesButton").data("kendoButton").enable(true);
                    $("#MirrorTradeButton").data("kendoButton").enable(true);
                    $("#ConfirmTradesButton").data("kendoButton").enable(true);
                }

                $("#ScratchPadParseDataButton").data("kendoButton").enable(true);
            },
            error: function (valid) {
                onScatchPadPendWindowClose();
                DisplayControllerByStringError("Error", valid.message);
                $("#ScratchPadParseDataButton").data("kendoButton").enable(true);
            }
        });
    }

    function onExecutingSystemAndTradeType() {
        var executingSystemType = $("#BoxContractExecutingSystemDropdownList").data("kendoDropDownList").value();
        var tradeType = $("#BoxContractContraEntityTradeTypeDropdownList").data("kendoDropDownList").value();

        return {
            tradeType: tradeType,
            executingSystem: executingSystemType
        }
    }

    function onExecutingSystem() {
        var executingSystemType = $("#BoxContractExecutingSystemDropdownList").data("kendoDropDownList").value();

        return {
            executingSystem: executingSystemType
        }
    }


    function processScratchPadData() {

        onScatchPadPendWindowOpen();

        try {
            var contraEntityId = ($("#ContraEntityCheckBox").is(':checked')) ? $("#SratchPadContraEntityDropdownList").data("kendoAutoComplete").value() : "";
            var tradeType = ($("#TradeTypeCheckBox").is(':checked')) ? $("#BoxContractContraEntityTradeTypeDropdownList").data("kendoDropDownList").value() : null;
            var currency = ($("#CurrencyCheckBox").is(':checked')) ? $("#BoxContractContraEntityCurrencyDropdownList").data("kendoDropDownList").value() : null;
            var profitCenter = ($("#ProfitCenterCheckBox").is(':checked')) ? document.getElementById("ProfitCenterTextBox").value : "";
            var source = ($("#ScratchPadInventorySourceCheckBox").is(':checked')) ? $("#ScratchPadInventorySourceDropdownList").data("kendoMultiSelect").dataItems() : '@LabelHelper.Text("UseBox")';

            var rebateRate = ($("#RebateRateCheckBox").is(':checked')) ? $("#RebateRateTextBox").data("kendoNumericTextBox").value() : null;
            var mark = ($("#MarkCheckBox").is(':checked')) ? $("#MarkTextBox").data("kendoNumericTextBox").value() : null;
            var executingSystemType = ($("#ExecutingSystemCheckBox").is(':checked')) ? $("#BoxContractExecutingSystemDropdownList").data("kendoDropDownList").value() : null;
            var deliveryCode = ($("#ScratchPadDeliveryCodeCheckBox").is(':checked')) ? $("#ScratchPadDeliveryCodeDropdownList").data("kendoDropDownList").value() : null;

            var collateralFlag = ($("#ScratchPadCollateralFlagCheckBox").is(':checked')) ? $("#ScratchPadCollateralFlagDropdownList").data("kendoDropDownList").value() : null;
            var intraDay = $("#ScratchPadIntraDayDropdownList").data("kendoDropDownList").value();
            var scratchpadAvail = $("#ScratchPadAvailLookupDropdownList").data("kendoDropDownList").value();

            var fee = ($("#FeeCheckBox").is(':checked')) ? $("#ScratchpadFeeTypeDropdownList").data("kendoDropDownList").value() : null;
            var feeOffSet = ($("#FeeCheckBox").is(':checked')) ? $("#FeeOffsetTextBox").data("kendoNumericTextBox").value() : null;

            var priceClacType = $("#ScratchPadPriceCalcTypeDropdownList").data("kendoAutoComplete").value();
            var tradeAmountCalc = $("#ScratchPadTradeAmountCalcTypeDropdownList").data("kendoAutoComplete").value();


            var cashSettlementDatePicker = $("#ScratchpadCashSettleCalander").data("kendoDatePicker");
            var cashSettlementDateValue = kendo.toString(cashSettlementDatePicker.value(), 'yyyy-MM-dd');

            var securitySettlementDatePicker = $("#ScratchpadSecuritySettleCalander").data("kendoDatePicker");
            var securitySettlementDateValue = kendo.toString(securitySettlementDatePicker.value(), 'yyyy-MM-dd');

            var tradeDateDatePicker = $("#ScratchpadTradeDateCalander").data("kendoDatePicker");
            var tradeDateValue = kendo.toString(tradeDateDatePicker.value(), 'yyyy-MM-dd');

            if (!$("#TradeDateCheckBox").is(':checked')) {
                tradeDateValue = null;
            }

            var expectedEndDatePicker = $("#ScratchpadExpectedEndDateCalander").data("kendoDatePicker");
            var expectedEndDateValue = kendo.toString(expectedEndDatePicker.value(), 'yyyy-MM-dd');

            if (!$("#ExpectedEndDateCheckBox").is(':checked')) {
                expectedEndDateValue = null;
            }

            var termDatePicker = $("#ScratchpadTermDateCalander").data("kendoDatePicker");
            var termDateValue = kendo.toString(termDatePicker.value(), 'yyyy-MM-dd');

            if (!$("#TermDateCheckBox").is(':checked')) {
                termDateValue = null;
            }

            var datepickerEffectiveDate = $("#ScratchPadEffectiveDatePicker").data("kendoDatePicker");
            var effectiveDate = kendo.toString(datepickerEffectiveDate.value(), 'yyyy-MM-dd');


            var grid = $('#ScratchPadGrid').data('kendoGrid');
            var rows = grid.dataSource.data();
            $("#ScratchPadParseDataButton").data("kendoButton").enable(false);

            if ((source == "") && ($("#ScratchPadInventorySourceCheckBox").is(':checked'))) {
                source = '@LabelHelper.Text("UseAll")';
            }

            $.ajax({
                url: "@Url.Action("UpdateTradesScratchPad", "Trade", new { area = "DomesticTrading" })",
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({
                    contraEntityid: contraEntityId,
                    tradeType: tradeType,
                    profitCenter: profitCenter,
                    rate: rebateRate,
                    mark: mark,
                    feeType: fee,
                    feeOffset: feeOffSet,
                    currency: currency,
                    tradeDate: tradeDateValue,
                    cashSettleDate: cashSettlementDateValue,
                    securitySettleDate: securitySettlementDateValue,
                    expectedEndDate : expectedEndDateValue,
                    termDate: termDateValue,
                    executingSystemType: executingSystemType,
                    deliveryCode: deliveryCode,
                    collateralFlag: collateralFlag,
                    intraDayEnum : intraDay,
                    source: source,
                    scratchpadAvailLookup: scratchpadAvail,
                    priceAmountCalcType: priceClacType,
                    tradeAmountCalcType: tradeAmountCalc,
                    list: rows,
                    effectiveDate : effectiveDate
                }),
                success: function (valid) {
                    $.each(valid, function (i, obj) {

                        var valueDate = kendo.parseDate(obj['CashSettleDate']);

                        obj['CashSettleDate'] = valueDate;

                        var settlementDate = kendo.parseDate(obj['SecuritySettleDate']);

                        obj['SecuritySettleDate'] = settlementDate;

                        var termDate = kendo.parseDate(obj['TermDate']);
                        obj['TermDate'] = termDate;

                        var tradeDate = kendo.parseDate(obj['TradeDate']);
                        obj['TradeDate'] = tradeDate;

                        var expectedEndDate = kendo.parseDate(obj['ExpectedEndDate']);
                        obj['ExpectedEndDate'] = expectedEndDate;
                    });


                    grid.dataSource.data(valid);
                    grid.refresh();
                    spScratchPadResetToolbar();
                    onScratchPadCheckData();
                    onScatchPadPendWindowClose();                    
                    $("#ScratchPadParseDataButton").data("kendoButton").enable(true);
                },
                error: function (valid) {
                    DisplayControllerByStringError("Error", "Error Processing!");
                    onScatchPadPendWindowClose();
                    $("#ScratchPadParseDataButton").data("kendoButton").enable(true);
                }
            });
        }
        catch (e) {
            DisplayControllerByStringError("Error", "Error Processing!");            
            $("#ScratchPadParseDataButton").data("kendoButton").enable(true);
        }

        onScratchPadCheckData();
    }

    function confirmScratchPadTrades() {

        var grid = $('#ScratchPadGrid').data('kendoGrid');
        var rows = grid.dataSource.data();
        var rowCount = rows.length;

        onScatchPadPendWindowOpen();

        $.ajax({
            url: "@Url.Action("ConfirmTrades", "Trade", new { area = "DomesticTrading" })",
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify(rows),
            success: function (valid) {
                $.each(valid, function (i, obj) {

                    var valueDate = kendo.parseDate(obj['CashSettleDate']);

                    obj['CashSettleDate'] = valueDate;

                    var settlementDate = kendo.parseDate(obj['SecuritySettleDate']);

                    obj['SecuritySettleDate'] = settlementDate;

                    var termDate = kendo.parseDate(obj['TermDate']);
                    obj['TermDate'] = termDate;

                    var tradeDate = kendo.parseDate(obj['TradeDate']);
                    obj['TradeDate'] = tradeDate;

                    var expectedEndDate = kendo.parseDate(obj['ExpectedEndDate']);
                    obj['ExpectedEndDate'] = expectedEndDate;
                });

                grid.dataSource.data(valid);
                grid.refresh();
                spScratchPadResetToolbar();
                onScratchPadCheckData();
                onScatchPadPendWindowClose();
                DisplayControllerByStringError("Info", "Successfully created " + (rowCount - valid.length) + " trade(s).");

                if ((rowCount - valid.length) == 0) {
                    $("#SaveTradesButton").data("kendoButton").enable(false);
                    $("#ConfirmTradesButton").data("kendoButton").enable(false);
                    $("#ApplyChangesButton").data("kendoButton").enable(false);
                    $("#MirrorTradeButton").data("kendoButton").enable(false);
                }
            },
            error: function (valid) {
                DisplayControllerByStringError("Error", "Error Processing!");
                onScatchPadPendWindowClose();
            }
        });
    }

    function saveScratchPadLcorTrades() {
        var grid = $('#ScratchPadGrid').data('kendoGrid');
        var rows = grid.dataSource.data();
        var rowCount = rows.length;

        onScatchPadPendWindowOpen();

        $.ajax({
            url: "@Url.Action("SaveLcorTrades", "AutoAction", new { area = "DomesticTrading" })",
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify(rows),
            success: function (valid) {
                $.each(valid, function (i, obj) {
                    var valueDate = kendo.parseDate(obj['CashSettleDate']);

                    obj['CashSettleDate'] = valueDate;

                    var settlementDate = kendo.parseDate(obj['SecuritySettleDate']);

                    obj['SecuritySettleDate'] = settlementDate;

                    var termDate = kendo.parseDate(obj['TermDate']);
                    obj['TermDate'] = termDate;

                    var tradeDate = kendo.parseDate(obj['TradeDate']);
                    obj['TradeDate'] = tradeDate;

                    var expectedEndDate = kendo.parseDate(obj['ExpectedEndDate']);
                    obj['ExpectedEndDate'] = expectedEndDate;
                });

                grid.dataSource.data(valid);
                grid.refresh();
                spScratchPadResetToolbar();
                onScratchPadCheckData();
                onScatchPadPendWindowClose();
                DisplayControllerByStringError("Info", "Successfully created " + (rowCount - valid.length) + " AutoBorrow(s).");

                if ((rowCount - valid.length) == 0) {
                    $("#SaveTradesButton").data("kendoButton").enable(false);
                    $("#ApplyChangesButton").data("kendoButton").enable(false);
                    $("#MirrorTradeButton").data("kendoButton").enable(false);
                    $("#ConfirmTradesButton").data("kendoButton").enable(false);
                }
            },
            error: function (valid) {
                DisplayControllerByStringError("Error", "Error Processing!");
                onScatchPadPendWindowClose();
            }
        });
    }

    function saveScratchPadAutoBorrowTrades() {
        var grid = $('#ScratchPadGrid').data('kendoGrid');
        var rows = grid.dataSource.data();
        var rowCount = rows.length;

        onScatchPadPendWindowOpen();

        $.ajax({
            url: "@Url.Action("SaveLcorTrades", "SmartRoute", new { area = "DomesticTrading" })",
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify(rows),
            success: function (valid) {
                $.each(valid, function (i, obj) {
                    var valueDate = kendo.parseDate(obj['CashSettleDate']);

                    obj['CashSettleDate'] = valueDate;

                    var settlementDate = kendo.parseDate(obj['SecuritySettleDate']);

                    obj['SecuritySettleDate'] = settlementDate;

                    var termDate = kendo.parseDate(obj['TermDate']);
                    obj['TermDate'] = termDate;

                    var tradeDate = kendo.parseDate(obj['TradeDate']);
                    obj['TradeDate'] = tradeDate;

                    var expectedEndDate = kendo.parseDate(obj['ExpectedEndDate']);
                    obj['ExpectedEndDate'] = expectedEndDate;
                });

                grid.dataSource.data(valid);
                grid.refresh();
                spScratchPadResetToolbar();
                onScratchPadCheckData();
                onScatchPadPendWindowClose();
                DisplayControllerByStringError("Info", "Successfully created " + (rowCount - valid.length) + " AutoBorrow(s).");


                if ((rowCount - valid.length) == 0) {
                    $("#SaveTradesButton").data("kendoButton").enable(false);
                    $("#ApplyChangesButton").data("kendoButton").enable(false);
                    $("#MirrorTradeButton").data("kendoButton").enable(false);
                    $("#ConfirmTradesButton").data("kendoButton").enable(false);
                }
            },
            error: function (valid) {
                onScatchPadPendWindowClose();
                DisplayControllerByStringError("Error", "Error Processing!");
            }
        });
    }

    function saveScratchPadTrades() {
        var grid = $('#ScratchPadGrid').data('kendoGrid');
        var rows = grid.dataSource.data();
        var rowCount = rows.length;

        onScatchPadPendWindowOpen();

        $.ajax({
            url: "@Url.Action("SaveTrades", "Trade", new { area = "DomesticTrading" })",
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify(rows),
            success: function (valid) {
                $.each(valid, function (i, obj) {
                    var valueDate = kendo.parseDate(obj['CashSettleDate']);

                    obj['CashSettleDate'] = valueDate;

                    var settlementDate = kendo.parseDate(obj['SecuritySettleDate']);

                    obj['SecuritySettleDate'] = settlementDate;

                    var termDate = kendo.parseDate(obj['TermDate']);
                    obj['TermDate'] = termDate;

                    var tradeDate = kendo.parseDate(obj['TradeDate']);
                    obj['TradeDate'] = tradeDate;

                    var expectedEndDate = kendo.parseDate(obj['ExpectedEndDate']);
                    obj['ExpectedEndDate'] = expectedEndDate;
                });

                grid.dataSource.data(valid);
                grid.refresh();
                spScratchPadResetToolbar();
                onScratchPadCheckData();
                onScatchPadPendWindowClose();
                DisplayControllerByStringError("Info", "Successfully created " + (rowCount - valid.length) + " trade(s).");

                if ((rowCount - valid.length) == 0) {
                    $("#SaveTradesButton").data("kendoButton").enable(false);
                    $("#ApplyChangesButton").data("kendoButton").enable(false);
                    $("#MirrorTradeButton").data("kendoButton").enable(false);
                    $("#ConfirmTradesButton").data("kendoButton").enable(false);
                }
            },
            error: function (valid) {
                onScatchPadPendWindowClose();
                DisplayControllerByStringError("Error", "Error Processing!");
            }
        });
    }

    function spScratchPadMirrorProcess() {
        var grid = $('#ScratchPadGrid').data('kendoGrid');
        var rows = grid.dataSource.data();
        var rowCount = rows.length;

        onScatchPadPendWindowOpen();

        var contraEntityId = ($("#ContraEntityCheckBox").is(':checked')) ? $("#SratchPadContraEntityDropdownList").data("kendoAutoComplete").value() : null;
        var currency = ($("#CurrencyCheckBox").is(':checked')) ? $("#BoxContractContraEntityCurrencyDropdownList").data("kendoDropDownList").value() : null;
        var profitCenter = ($("#ProfitCenterCheckBox").is(':checked')) ? document.getElementById("ProfitCenterTextBox").value : "";

        var rebateRate = ($("#RebateRateCheckBox").is(':checked')) ? $("#RebateRateTextBox").data("kendoNumericTextBox").value() : null;
        var mark = ($("#MarkCheckBox").is(':checked')) ? $("#MarkTextBox").data("kendoNumericTextBox").value() : null;

        if (!$("#TermDateCheckBox").is(':checked')) {
            termDateValue = null;
        }

        $.ajax({
            url: "@Url.Action("ScratchPadMirrorTrades", "Trade", new { area = "DomesticTrading" })",
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify({
                contraEntityid: contraEntityId,
                profitCenter: profitCenter,
                rate: rebateRate,
                mark: mark,
                currency: currency,
                list: rows
            }),
            success: function (valid) {
                $.each(valid, function (i, obj) {
                    var valueDate = kendo.parseDate(obj['CashSettleDate']);

                    obj['CashSettleDate'] = valueDate;

                    var settlementDate = kendo.parseDate(obj['SecuritySettleDate']);

                    obj['SecuritySettleDate'] = settlementDate;

                    var termDate = kendo.parseDate(obj['TermDate']);
                    obj['TermDate'] = termDate;

                    var tradeDate = kendo.parseDate(obj['TradeDate']);
                    obj['TradeDate'] = tradeDate;

                    var expectedEndDate = kendo.parseDate(obj['ExpectedEndDate']);
                    obj['ExpectedEndDate'] = expectedEndDate;
                });

                grid.dataSource.data(valid);
                grid.refresh();
                onScratchPadCheckData();
                spScratchPadResetToolbar();
                onScatchPadPendWindowClose();
            },
            error: function (valid) {
                onScatchPadPendWindowClose();
                DisplayControllerByStringError("Error", "Error Processing!");
            }
        });
    }

    function removeScratchPadTrades() {
        var grid = $('#ScratchPadGrid').data('kendoGrid');
        var rows = grid.dataSource.data();
        var removeRowCount = rows.length;

        onScatchPadPendWindowOpen();

        $.ajax({
            url: "@Url.Action("RemoveTrades", "Trade", new { area = "DomesticTrading" })",
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify(rows),
            success: function (valid) {
                $.each(valid, function (i, obj) {
                    var valueDate = kendo.parseDate(obj['CashSettleDate']);

                    obj['CashSettleDate'] = valueDate;

                    var settlementDate = kendo.parseDate(obj['SecuritySettleDate']);

                    obj['SecuritySettleDate'] = settlementDate;

                    var termDate = kendo.parseDate(obj['TermDate']);
                    obj['TermDate'] = termDate;

                    var tradeDate = kendo.parseDate(obj['TradeDate']);
                    obj['TradeDate'] = tradeDate;

                    var expectedEndDate = kendo.parseDate(obj['ExpectedEndDate']);
                    obj['ExpectedEndDate'] = expectedEndDate;
                });

                grid.dataSource.data(valid);
                grid.refresh();
                onScratchPadCheckData();
                spScratchPadResetToolbar();
                onScatchPadPendWindowClose();

                if (valid.length == 0) {
                    $("#SaveTradesButton").data("kendoButton").enable(false);
                    $("#SaveTradesButton").data("kendoButton").enable(false);
                    $("#ApplyChangesButton").data("kendoButton").enable(false);
                    $("#ConfirmTradesButton").data("kendoButton").enable(false);
                }
            },
            error: function (valid) {
                onScatchPadPendWindowClose();
                DisplayControllerByStringError("Error", "Error Processing!");
            }
        });

        $("#ScratchpadListTextBox").val("");
    }

    function onScratchPadEdit(e) {
        var input = e.container.find("input");

        if(e.container.find("input").attr("name") == 'ContraEntityId') {
            _contraEntityChanged = true;
        }
        else
        {
            _contraEntityChanged = false;
        }

        setTimeout(function () { input.select(); });        
    }

    $(document).ready(function () {
        $('#EntityCheckBox').change(function () {
            $("#ScratchpadEntityDropdownList").data("kendoDropDownList").enable($(this).is(':checked'));
        });

        $('#ContraEntityCheckBox').change(function () {
            $("#SratchPadContraEntityDropdownList").data("kendoAutoComplete").enable($(this).is(':checked'));
        });

        $('#CashSettlementDateCheckBox').change(function () {
            $("#ScratchpadCashSettleCalander").data("kendoDatePicker").enable($(this).is(':checked'));
        });

        $('#SecuritySettlementDateCheckBox').change(function () {
            $("#ScratchpadSecuritySettleCalander").data("kendoDatePicker").enable($(this).is(':checked'));
        });

        $('#TradeDateCheckBox').change(function () {
            $("#ScratchpadTradeDateCalander").data("kendoDatePicker").enable($(this).is(':checked'));
        });


        $('#ExpectedEndDateCheckBox').change(function () {
            $("#ScratchpadExpectedEndDateCalander").data("kendoDatePicker").enable($(this).is(':checked'));
        });

        $('#TermDateCheckBox').change(function () {
            $("#ScratchpadTermDateCalander").data("kendoDatePicker").enable($(this).is(':checked'));
        });

        $('#CurrencyCheckBox').change(function () {
            $("#BoxContractContraEntityCurrencyDropdownList").data("kendoDropDownList").enable($(this).is(':checked'));
        });

        $('#RebateRateCheckBox').change(function () {
            $("#RebateRateTextBox").data("kendoNumericTextBox").enable($(this).is(':checked'));
        });

        $('#MarkCheckBox').change(function () {
            $("#MarkTextBox").data("kendoNumericTextBox").enable($(this).is(':checked'));
        });

        $('#TradeTypeCheckBox').change(function () {
            $("#BoxContractContraEntityTradeTypeDropdownList").data("kendoDropDownList").enable($(this).is(':checked'));
        });

        $('#PriceRoundToCheckBox').change(function () {
            $("#PriceRoundToTextBox").data("kendoNumericTextBox").enable($(this).is(':checked'));
        });

        $('#ScratchPadInventorySourceCheckBox').change(function () {
            $("#ScratchPadInventorySourceDropdownList").data("kendoMultiSelect").enable($(this).is(':checked'));
        });

        $('#ExecutingSystemCheckBox').change(function () {
            $("#BoxContractExecutingSystemDropdownList").data("kendoDropDownList").enable($(this).is(':checked'));
        });

        $('#FeeCheckBox').change(function () {
            $("#FeeOffsetTextBox").data("kendoNumericTextBox").enable($(this).is(':checked'));
            $("#ScratchpadFeeTypeDropdownList").data("kendoDropDownList").enable($(this).is(':checked'));
        });

        $('#ScratchPadDeliveryCodeCheckBox').change(function () {
            $("#ScratchPadDeliveryCodeDropdownList").data("kendoDropDownList").enable($(this).is(':checked'));
        });

        $('#ScratchPadCollateralFlagCheckBox').change(function () {
            $("#ScratchPadCollateralFlagDropdownList").data("kendoDropDownList").enable($(this).is(':checked'));
        });

        $('#ScratchPadIntraDayEnumCheckBox').change(function () {
            $("#ScratchPadIntraDayDropdownList").data("kendoDropDownList").enable($(this).is(':checked'));
        });

        $('#ScratchPadAvailLookupCheckBox').change(function () {
            $("#ScratchPadAvailLookupDropdownList").data("kendoDropDownList").enable($(this).is(':checked'));
        });

        $('#ScratchPadPriceCalcTypeCheckBox').change(function () {
            $("#ScratchPadPriceCalcTypeDropdownList").data("kendoAutoComplete").enable($(this).is(':checked'));
        });

        $('#ScratchPadAmountCalcTypeCheckBox').change(function () {
            $("#ScratchPadTradeAmountCalcTypeDropdownList").data("kendoAutoComplete").enable($(this).is(':checked'));
        });
    });

    $(function () {
        $('#ScratchPadGrid').on('click', '.chkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#ScratchPadGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));
            dataItem['Enabled'] = checked;
        });
    });

    $(function () {
        //wire focus of all numerictextbox widgets on the page
        $("input[type=text]").bind("focus", function () {
            var input = $(this);

            var selectTimeId = setTimeout(function () {
                input.select();
            });
        });
    })

    function checkScratchPadAll(ele) {
        var grid = $('#ScratchPadGrid').data('kendoGrid');
        var datasourcedata = grid.dataSource.data();

        for (var i = 0; i < datasourcedata.length; i++) {
            var dataitem = datasourcedata[i];
            dataitem['Enabled'] = true;
        }
    }

    function onScratchPadError(e) {
        console.log(e.message);
    }

    function exportToScratchPadExcel() {
        KendoGridToCSVConvertor("#ScratchPadGrid", 'ScratchPadGrid');
    }

    function onScratchPadSelectAll(e) {
        try {
            var scratchPadGrid = $("#ScratchPadGrid").data("kendoGrid");
            scratchPadGrid.select(scratchPadGrid.tbody.find(">tr"));
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onScratchPadUnsortGrid(e) {
        UnsortGrid(e);
    }

    function onCheckScratchPadAll(e) {

        var spGrid = $('#ScratchPadGrid').data('kendoGrid');
        var rows = spGrid.dataSource.data();

        for (var index = 0; index < rows.length; index++) {
            spGrid.dataSource.data()[index].Enabled = true;
        }

        spGrid.dataSource.sync();
    }

    function onScratchPadContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'Unsort':
                onScratchPadUnsortGrid('#ScratchPadGrid');
                break;


            case 'Check All':
                onCheckScratchPadAll(e);
                break;

            case 'Select All':
                onScratchPadSelectAll(true);
                break;


            case "Reset Grid":
                ResetUserLayout("#ScratchPadGrid");

                $("#ScratchPadGrid").data('kendoGrid').setOptions(_originalScratchPad);
                break;

            case "Reset Filter":
                ResetFilter("#ScratchPadGrid");
                break;

            case 'Export To Excel':
                exportToScratchPadExcel();
                break;

            case 'AutoFit Columns':
                resizeGridColumns("#ScratchPadGrid");
                break;
        }
    }

    function scratchPadResizeDropdown(e) {

        var autoComplete = $("#SratchPadContraEntityDropdownList").data("kendoAutoComplete");
        autoComplete.list.width(200); //adjust width of the drop-down list
    }

    function onScratchPadInventorySourceDropdownDataBound(e) {

    }

    function onScratchPadChange() {

    }

    function ScratchPadUploadDataButton(e) {

    }


    function loadCleintNeeds() {

        var clientId = $("#ScratchPadClientNeedDropdownList").data("kendoDropDownList").value();
        var entityId = $("#ScratchpadEntityDropdownList").data("kendoDropDownList").value();

        $("#LoadClientNeedButton").data("kendoButton").enable(false);

        try
        {
            $.ajax({
                url: "@Url.Action("LoadClientNeedList", "ClientNeed", new { area = "DomesticTrading" })",
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({
                    entityId: entityId,
                    clientId: clientId
                }),
                success: function (valid) {
                    var text = "";
                    var qty = 100;
                    var ticker = "";

                    $.each(valid, function (i, obj) {

                        console.log(obj["NeedQuantity"]);

                        if (obj["NeedQuantity"] == null)
                        {
                            qty = 100000;
                        }
                        else
                        {
                            qty = obj["NeedQuantity"];
                        }


                        if (obj["Ticker"] != null)
                        {
                            ticker = obj["Ticker"];
                        }
                        else
                        {
                            ticker = obj["SecurityNumber"];
                        }


                        text += ticker + " " + qty + "\n";
                    });

                    $("#ScratchpadListTextBox").val(text);

                    $("#LoadClientNeedButton").data("kendoButton").enable(true);
                    $("#ScratchPadParseDataButton").data("kendoButton").enable(true);
                },
                error: function (valid) {
                    $("#LoadClientNeedButton").data("kendoButton").enable(false);
                    onScatchPadPendWindowClose();
                    DisplayControllerByStringError("Error", "Error Processing!");
                    $("#ScratchPadParseDataButton").data("kendoButton").enable(true);
                }
            });
        }
        catch(e)
        {
            DisplayControllerByStringError("Error", e.message);
        }
    }

    function onScratchPadDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    userPreference = valid;

                    var dropdownList = $('#ScratchpadEntityDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    
                    $("#BoxContractContraEntityCurrencyDropdownList").data("kendoDropDownList").value(dropdownList.dataItem().DefaultCurrency);
                },
                error: function (valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) { }
    }

    function onScratchPadEntityChange(e) {
        var company = $('#ScratchpadEntityDropdownList').data("kendoDropDownList").dataItem();

        $("#BoxContractExecutingSystemDropdownList").data("kendoDropDownList").select(company.DefaultExecutionSystem);
        $("#BoxContractContraEntityCurrencyDropdownList").data("kendoDropDownList").value(company.DefaultCurrency);
        $("#BoxContractContraEntityTradeTypeDropdownList").data("kendoDropDownList").dataSource.read();
        $("#SratchPadContraEntityDropdownList").data("kendoAutoComplete").dataSource.read();        
    }

    function onContraEntityTradeTypeDropdownListRequestEnd(e) {
        $("#BoxContractContraEntityTradeTypeDropdownList").data("kendoDropDownList").select(0);
    }

    function onTradeFileUploadError(e) {
        DisplayControllerByStringError("Error", e.message);
    }

    function onTradeFileUploadComplete(e) {
        var entityId = $("#ScratchpadEntityDropdownList").data("kendoDropDownList").value();

        $.ajax({
            url: '@Url.Action("TradeListFileProcess", "Trade", new { area = "DomesticTrading" } )',
            type: 'POST',
            contentType: 'application/json;',
            success: function (valid) {
                DisplayControllerByStringError("Info", valid.message);

            },
            error: function (valid) {

            }
        });
    }
</script>

<style scoped>
     input {
        text-transform: uppercase;
    }

    
    #ScratchPadSplitter {
        height: 70%;
        width: 100%;
    }

    #ScratchpadListTextBox {
        width: 99%;
        height:100%;        
    }
    
    #ScratchTable {
        border-collapse:collapse;
        margin:0;
    }

    #ScratchTable th,
    #ScratchTable td {
        width:100%;
        min-height:50px;
    }
     
     .k-widget.k-tooltip {
        font-size: small;
    }

    #ScratchPadCopyButton.zeroclipboard-is-hover {
        background-color: #1ba1e2;
    }

    hideControl {
        visibility: hidden;
    }

    #ScratchPadInventorySourceDropdownList .k-multiselect input {
        display: none;
    }


    #ScratchPadTradeTable td {
        margin: 0px;
        padding: 0px;
    }
</style>

<div id="ItemsDiv" class="toolbar">
    @(Html.Kendo().ToolBar()
                        .Name("ScratchPadButtonToolBar")
                        .Resizable(true)
                        .Items(items =>
                        {
                            items.Add().Template(Html.Kendo().Button().Name("ScratchPadParseDataButton").Events(e => e.Click("onScratchpadListParse")).Content(@<text><i class="fa fa-pencil"></i>&nbsp;Parse List</text>).ToHtmlString());
                            items.Add().Template(Html.Kendo().Button().Name("ApplyChangesButton").Events(e => e.Click("processScratchPadData")).Content(@<text><i class="fa fa-repeat"></i>&nbsp;Apply Options</text>).ToHtmlString());
                            items.Add().Template(Html.Kendo().Button().Name("MirrorTradeButton").Events(e => e.Click("spScratchPadMirrorProcess")).Content(@<text><i class="fa fa-retweet"></i>&nbsp;Mirror Trades</text>).ToHtmlString());
                            items.Add().Template(Html.Kendo().Button().Name("SaveTradesButton").HtmlAttributes(new { @class = "k-widget k-notification k-notification-warning" }).Events(e => e.Click("saveScratchPadTrades")).Content(@<text> <i class="icon-check color-green" ></i>&nbsp;Save Trades</text>).ToHtmlString());
                            items.Add().Template(Html.Kendo().Button().Name("ConfirmTradesButton").HtmlAttributes(new { @class = "k-widget k-notification k-notification-success" }).Events(e => e.Click("confirmScratchPadTrades")).Content(@<text><i class="icon-check color-green" ></i>&nbsp;Confirm Trades</text>).ToHtmlString());
                            items.Add().Template(Html.Kendo().Button().Name("TrashTradesButton").HtmlAttributes(new { @class = "k-widget k-notification k-notification-error" }).Events(e => e.Click("removeScratchPadTrades")).Content(@<text> <i class="fa fa-trash-o"></i>&nbsp;Trash</text>).ToHtmlString());

                            items.Add().Template(
                            "<table ID='ScratchPadTradeTable'><tr><td>" +
                            LabelHelper.LabelFor("EffectiveDate", "ScratchPadEffectiveDatePicker").ToHtmlString() + "</td><td>" +
                            Html.Kendo().DatePicker()
                            .Name("ScratchPadEffectiveDatePicker")
                            .Format("yyyy-MM-dd")
                            .Max(DateTime.Today)
                            .Value(DateTime.Today)
                            .HtmlAttributes(new { @class = "width90" }).ToHtmlString() + "</td></tr></table>").HtmlAttributes(new { @class = "float-right" });
                        }))

<table id="ScratchPadOptionsToolBar" class="toolbar">
<tr>
<td valign="middle">
@Html.Kendo().CheckBox().Name("EntityCheckBox").Label(LabelHelper.Text("Entity"))
</td>
<td>
@(Html.Kendo().DropDownList().Name("ScratchpadEntityDropdownList")
.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" })
.DataTextField("Custodian")
.DataValueField("CompanyId")
.OptionLabel(LabelHelper.Text("OptionLabel"))
.Animation(true)
.AutoBind(true)
.AutoWidth(true)
.Size(ComponentSize.Small)
.Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" + "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" + "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
.Events(events =>
{
events.DataBound("onScratchPadDefaultLoad");
events.Change("onScratchPadEntityChange");
})
.Enable(false)
.DataSource(dataSource => dataSource.Read(read => read.Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
.Value(SessionService.UserPreference.DefaultFirm))
</td>
<td>
@Html.Kendo().CheckBox().Name("ContraEntityCheckBox").Label(LabelHelper.Text("ContraEntity"))
</td>
<td>
@(Html.Kendo().AutoComplete()
.Name("SratchPadContraEntityDropdownList")
.DataTextField("ContraEntity")
.Enable(false)
.AutoWidth(true)
.DataSource(source =>
{
source.Read(read => read.Action("Read_ContraEntityDropdown", "ContraEntity", new { area = "DomesticTrading" }).Data("additionalScratchPadData"));
})
.HtmlAttributes(new { ID = "SratchPadContraEntityDropdownList", @class = "sratchpad-item-width" })
.Filter("startswith")
.Template("<span class=\"k-state-default\">#:data.ContraEntity# #:data.AccountName# </span>"))
</td>

@if (SessionService.UserPreference.UserTypeId == SL_UserType.DOMESTIC)
{
<td style="display:none">
@(Html.Kendo().CheckBox().Name("ExecutingSystemCheckBox").Label(LabelHelper.Text("ExecutingSystem")).Enable(SessionSecurityService.IsEditable(ManagerTask.ViewSLInternational)))
</td>
<td style="display:none">
@(Html.Kendo().DropDownList()
.Name("BoxContractExecutingSystemDropdownList")
.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" })
.SelectedIndex(0)
.Events(events => events.Change("onScatchPadExecutingSystemChange"))
.Enable(false)
.Value(SessionService.UserFirms.Where(x => x.CompanyId.ToString() == SessionService.UserPreference.DefaultFirm).First().DefaultExecutionSystem.ToString())
.BindTo(Enum.GetNames(typeof(SL_ExecutionSystemType)).ToList()))
</td>
<td style="display:none">
@Html.Kendo().CheckBox().Name("TradeDateCheckBox").Label(LabelHelper.Text("TradeDate"))
</td>
<td style="display:none">
@(Html.Kendo().DatePicker()
.Name("ScratchpadTradeDateCalander")
.Format("yyyy-MM-dd")
.Enable(false)
.Value(DateTime.Now)
.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" }))
</td>

<td>
@Html.Kendo().CheckBox().Name("ScratchPadAmountCalcTypeCheckBox").Label(LabelHelper.Text("AmountCalcType"))
</td>
<td>

@(Html.Kendo().AutoComplete()
.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" })
.Name("ScratchPadTradeAmountCalcTypeDropdownList")
.Suggest(true)
.Enable(false)
.AutoWidth(true)
.BindTo(Enum.GetNames(typeof(SL_TradeAmountCalcType)).ToList())
.Value(SL_TradeAmountCalcType.Cash.ToString())
)
</td>
}
else
{
<td>
@(Html.Kendo().CheckBox().Name("ExecutingSystemCheckBox").Label(LabelHelper.Text("ExecutingSystem")).Enable(SessionSecurityService.IsEditable(ManagerTask.ViewSLInternational)))
</td>
<td>
@(Html.Kendo().DropDownList()
.Name("BoxContractExecutingSystemDropdownList")
.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" })
.SelectedIndex(0)
.Events(events => events.Change("onScatchPadExecutingSystemChange"))
.Enable(false)
.Size(ComponentSize.Small)
.Value(SessionService.UserFirms.Where(x => x.CompanyId.ToString() == SessionService.UserPreference.DefaultFirm).First().DefaultExecutionSystem.ToString())
.BindTo(Enum.GetNames(typeof(SL_ExecutionSystemType)).ToList()))
</td>
<td>
@Html.Kendo().CheckBox().Name("TradeDateCheckBox").Label(LabelHelper.Text("TradeDate"))
</td>
<td>
@(Html.Kendo().DatePicker()
.Name("ScratchpadTradeDateCalander")
.Format("yyyy-MM-dd")
.Enable(false)
.Value(DateTime.Now)
.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" }))
</td>
}
</tr>
<tr>
<td>
@Html.Kendo().CheckBox().Name("TradeTypeCheckBox").Label(LabelHelper.Text("TradeType"))
</td>
<td>
@(Html.Kendo().DropDownList()
.Name("BoxContractContraEntityTradeTypeDropdownList")
.DataValueField("Value")
.DataTextField("Text")
.AutoWidth(true)

.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" })
.Enable(false)
.Events(events =>
{
events.Change("onScratchPadTradeTypeChange");
})
.Value(DataSystemValues.LoadSystemValue("ScratchPadDefaultTradeType", "StockBorrow"))
.DataSource(dataSource =>
{
dataSource.Read(read => read.Action("Read_SLTradeTypeByExecutingSystem", "Enum", new { area = "DomesticTrading" }).Data("additionalScratchPadExecutingSystem"));
dataSource.Events(ev => ev.RequestEnd("onContraEntityTradeTypeDropdownListRequestEnd"));
}))
</td>
<td>
@Html.Kendo().CheckBox().Name("RebateRateCheckBox").Label(LabelHelper.Text("RebateRate"))
</td>
<td>
@Html.Kendo().NumericTextBox().Name("RebateRateTextBox").HtmlAttributes(new { @class = "sratchpad-item-width" }).Spinners(false).Value(0).Enable(false).Decimals(4).Format("000.0000")
</td>
@if (SessionService.UserPreference.UserTypeId == SL_UserType.DOMESTIC)
{
<td style="display:none">
@Html.Kendo().CheckBox().Name("CashSettlementDateCheckBox").Label(LabelHelper.Text("CashSettleDate"))
</td>
<td style="display:none">
@(Html.Kendo().DatePicker()
.Name("ScratchpadCashSettleCalander")
.Format("yyyy-MM-dd")
.Enable(false)
.Value(DateTime.Now)
.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" }))
</td>
<td style="display:none">
@Html.Kendo().CheckBox().Name("SecuritySettlementDateCheckBox").Label(LabelHelper.Text("SecuritySettleDate"))
</td>
<td style="display:none">
@(Html.Kendo().DatePicker()
.Name("ScratchpadSecuritySettleCalander")
.Format("yyyy-MM-dd")
.Enable(false)
.Value(DateTime.Now)
.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" }))
</td>
<td>
@Html.Kendo().CheckBox().Name("ScratchPadPriceCalcTypeCheckBox").Label(LabelHelper.Text("PriceCalcType"))
</td>
<td>
@(Html.Kendo().AutoComplete()
.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" })
.Name("ScratchPadPriceCalcTypeDropdownList")
.Suggest(true)
.Enable(false)
.AutoWidth(true)
.BindTo(Enum.GetNames(typeof(SL_TradePriceAmountCalcType)).ToList())
.Value(SL_TradePriceAmountCalcType.CASH.ToString())
)
</td>
}
else
{
<td>
@Html.Kendo().CheckBox().Name("CashSettlementDateCheckBox").Label(LabelHelper.Text("CashSettleDate"))
</td>
<td>
@(Html.Kendo().DatePicker()
.Name("ScratchpadCashSettleCalander")
.Format("yyyy-MM-dd")
.Enable(false)
.Value(DateTime.Now)
.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" }))
</td>
<td>
@Html.Kendo().CheckBox().Name("SecuritySettlementDateCheckBox").Label(LabelHelper.Text("SecuritySettleDate"))
</td>
<td>
@(Html.Kendo().DatePicker()
.Name("ScratchpadSecuritySettleCalander")
.Format("yyyy-MM-dd")
.Enable(false)
.Value(DateTime.Now)
.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" }))
</td>
}
</tr>
<tr>
<td>
@Html.Kendo().CheckBox().Name("MarkCheckBox").Label(LabelHelper.Text("Mark"))
</td>
<td>
@Html.Kendo().NumericTextBox().Name("MarkTextBox").HtmlAttributes(new { @class = "sratchpad-item-width" }).Spinners(false).Value(1.02).Format("#,##0.00").Enable(false)
</td>
<td>
@Html.Kendo().CheckBox().Name("ProfitCenterCheckBox").Label(LabelHelper.Text("ProfitCenter"))
</td>
<td>
@Html.Kendo().TextBox().Name("ProfitCenterTextBox").HtmlAttributes(new { @class = "sratchpad-item-width" })
</td>
@if (SessionService.UserPreference.UserTypeId == SL_UserType.DOMESTIC)
{
<td style="display:none">
@Html.Kendo().CheckBox().Name("TermDateCheckBox").Label(LabelHelper.Text("TermDate"))
</td>
<td style="display:none">
@(Html.Kendo().DatePicker()
.Name("ScratchpadTermDateCalander")
.Format("yyyy-MM-dd")
.Enable(false)
.Value(DateTime.Now)
.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" }))
</td>
<td style="display:none">
@Html.Kendo().CheckBox().Name("ExpectedEndDateCheckBox").Label(LabelHelper.Text("ExpectedEndDate"))
</td>
<td style="display:none">
@(Html.Kendo().DatePicker()
.Name("ScratchpadExpectedEndDateCalander")
.Format("yyyy-MM-dd")
.Enable(false)
.Value(DateTime.Now)
.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" }))
</td>
}
else
{
<td>
@Html.Kendo().CheckBox().Name("TermDateCheckBox").Label(LabelHelper.Text("TermDate"))
</td>
<td>
@(Html.Kendo().DatePicker()
.Name("ScratchpadTermDateCalander")
.Format("yyyy-MM-dd")
.Enable(false)
.Value(DateTime.Now)
.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" }))
</td>
<td>
@Html.Kendo().CheckBox().Name("ExpectedEndDateCheckBox").Label(LabelHelper.Text("ExpectedEndDate"))
</td>
<td>
@(Html.Kendo().DatePicker()
.Name("ScratchpadExpectedEndDateCalander")
.Format("yyyy-MM-dd")
.Enable(false)
.Value(DateTime.Now)
.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" }))
</td>
}
</tr>
<tr>
<td>
@Html.Kendo().CheckBox().Name("FeeCheckBox").Label(LabelHelper.Text("Fee"))
</td>
<td>
@(Html.Kendo().DropDownList()
.Name("ScratchpadFeeTypeDropdownList")
.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" })
.DataTextField("Fee")
.DataValueField("Fee")
.OptionLabel(LabelHelper.Text("OptionLabel"))
.Animation(true)
.AutoBind(false)
.Events(events => events.Open("onContraEntityAutoCompleteResize"))
.Enable(false)
.DataSource(dataSource => dataSource
.Read(read => read.Action("Read_FeeTypesDropdown", "FeeType", new { area = "DomesticTrading" }).Data("additionalScratchPadData")))
.SelectedIndex(1))

@Html.Kendo().NumericTextBox().Name("FeeOffsetTextBox").HtmlAttributes(new { @style = "width:60px;" }).Spinners(true).Value(0.25).Format("#,##0.00").Enable(false)
</td>
<td>
@Html.Kendo().CheckBox().Name("ScratchPadInventorySourceCheckBox").Label(LabelHelper.Text("InventorySource"))
</td>
<td>
@(Html.Kendo().MultiSelect()
.Name("ScratchPadInventorySourceDropdownList")
//                    .HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" })
.AutoClose(false)
.TagMode(TagMode.Single)
.AutoWidth(true)
.Enable(false)
.Size(ComponentSize.Small)
.Placeholder(LabelHelper.Text("UseAll"))
.AutoBind(false)
.Events(e => e.DataBound("onScratchPadInventorySourceDropdownDataBound"))
.DataSource(ds =>
{
ds.Read(read => read.Action("Read_OppurtunityInventorySourceDropdown", "Simulator", new { area = "DomesticTrading" }).Data("additionalScratchPadData"));
}))
</td>

@if (SessionService.UserPreference.UserTypeId == SL_UserType.DOMESTIC)
{
<td style="display:none">
@Html.Kendo().CheckBox().Name("CurrencyCheckBox").Label(LabelHelper.Text("Currency"))
</td>
<td style="display:none">
@(Html.Kendo().DropDownList()
.Name("BoxContractContraEntityCurrencyDropdownList")
.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" })
.AutoWidth(true)
.DataTextField("Text")
.DataValueField("Value")
.Value(Currency.USDollars.ToString())
.Enable(false)
.BindTo(EnumExtensions.GetEnumSelectList<Currency>()))
</td>
<td style="display:none">
@Html.Kendo().CheckBox().Name("ScratchPadDeliveryCodeCheckBox").Label(LabelHelper.Text("DeliveryCode"))
</td>
<td style="display:none">
@(Html.Kendo().DropDownList()
.Name("ScratchPadDeliveryCodeDropdownList")
.DataValueField("Value")
.DataTextField("Text")
.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" })
.Enable(false)
.AutoBind(true)
.Template("<span class=\"k-state-default\">#:data.Text# #:data.Description# </span>")
.Events(events => events.Open("onContraEntityAutoCompleteResize"))
.DataSource(ds =>
{
ds.Read(read => read.Action("Read_SLDeliveryCodeByTradeType", "Enum", new { area = "DomesticTrading" }).Data("onExecutingSystemAndTradeType"));
ds.Events(ev =>
{
ev.RequestStart("onScratchPadDeliveryCodeRequestEnd");
});
}))
</td>
}
else
{
<td>
@Html.Kendo().CheckBox().Name("CurrencyCheckBox").Label(LabelHelper.Text("Currency"))
</td>
<td>
@(Html.Kendo().DropDownList()
.Name("BoxContractContraEntityCurrencyDropdownList")
.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" })
.AutoWidth(true)
.DataTextField("Text")
.DataValueField("Value")
.Value(Currency.USDollars.ToString())
.Enable(false)
.BindTo(EnumExtensions.GetEnumSelectList<Currency>()))
</td>
<td>
@Html.Kendo().CheckBox().Name("ScratchPadDeliveryCodeCheckBox").Label(LabelHelper.Text("DeliveryCode"))
</td>
<td>
@(Html.Kendo().DropDownList()
.Name("ScratchPadDeliveryCodeDropdownList")
.DataValueField("Value")
.DataTextField("Text")
.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" })
.Enable(false)
.AutoBind(true)
.Template("<span class=\"k-state-default\">#:data.Text# #:data.Description# </span>")
.Events(events => events.Open("onContraEntityAutoCompleteResize"))
.DataSource(ds =>
{
ds.Read(read => read.Action("Read_SLDeliveryCodeByTradeType", "Enum", new { area = "DomesticTrading" }).Data("onExecutingSystemAndTradeType"));
ds.Events(ev =>
{
ev.RequestStart("onScratchPadDeliveryCodeRequestEnd");
});
}))
</td>
}
</tr>
<tr>
<td>
@Html.Kendo().CheckBox().Name("ScratchPadCollateralFlagCheckBox").Label(LabelHelper.Text("CollateralFlag"))
</td>
<td>
@(Html.Kendo().DropDownList()
.Name("ScratchPadCollateralFlagDropdownList")
.DataValueField("Value")
.DataTextField("Text")
.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" })
.Enable(false)
.Template("<span class=\"k-state-default\">#:data.Text# #:data.Description# </span>")
.Events(events => events.Open("onContraEntityAutoCompleteResize"))
.Value(DataSystemValues.LoadSystemValue("ScratchPadDefaultCollateralFlag", "1"))
.DataSource(ds =>
{
ds.Read(read => read.Action("Read_SLCollateralFlagByExecutingSystem", "Enum", new { area = "DomesticTrading" }).Data("onExecutingSystem"));
}))
</td>
<td>
@Html.Kendo().CheckBox().Name("ScratchPadIntraDayEnumCheckBox").Label(LabelHelper.Text("IntraDay"))
</td>
<td>
@(Html.Kendo().DropDownList()
.Name("ScratchPadIntraDayDropdownList")
.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" })
.Enable(false)
.Value(ScratchPadIntraDayEnum.Avg.ToString())
.BindTo(Enum.GetNames(typeof(ScratchPadIntraDayEnum)).ToList()))
</td>
@if (SessionService.UserPreference.UserTypeId == SL_UserType.INTERNATIONAL)
{
<td>
@Html.Kendo().CheckBox().Name("ScratchPadAvailLookupCheckBox").Label(LabelHelper.Text("AvailLookup"))
</td>
<td>
@(Html.Kendo().DropDownList().Name("ScratchPadAvailLookupDropdownList")
.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" })
.AutoWidth(true)
.Value(PushPadAvailLookupEnum.TotalAvail.ToString())
.Enable(false)
.BindTo(Enum.GetNames(typeof(PushPadAvailLookupEnum)).ToList()))
</td>
<td>
@Html.Kendo().CheckBox().Name("ScratchPadAllowOddLotCheckBox").Label(LabelHelper.Text("AllowOddLot"))
</td>
<td>
@Html.Kendo().CheckBox().Name("ScratchPadAllowCustomFormatParseCheckBox").Label(LabelHelper.Text("CustomParse"))
</td>
}
</tr>
@if (SessionService.UserPreference.UserTypeId == SL_UserType.DOMESTIC)
{
<tr>

<td>
@Html.Kendo().CheckBox().Name("ScratchPadAvailLookupCheckBox").Label(LabelHelper.Text("AvailLookup"))
</td>
<td>
@(Html.Kendo().DropDownList().Name("ScratchPadAvailLookupDropdownList")
.HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" })
.AutoWidth(true)
.Value(PushPadAvailLookupEnum.TotalAvail.ToString())
.Enable(false)
.BindTo(Enum.GetNames(typeof(PushPadAvailLookupEnum)).ToList()))
</td>
<td>
@Html.Kendo().CheckBox().Name("ScratchPadAllowOddLotCheckBox").Label(LabelHelper.Text("AllowOddLot"))
</td>
<td>
@Html.Kendo().CheckBox().Name("ScratchPadAllowCustomFormatParseCheckBox").Label(LabelHelper.Text("CustomParse"))
</td>
</tr>
}

@if (SessionService.UserPreference.UserTypeId == SL_UserType.INTERNATIONAL)
{
<tr>
    <td>
        @Html.Kendo().CheckBox().Name("ScratchPadPriceCalcTypeCheckBox").Label(LabelHelper.Text("PriceCalcType"))
    </td>
    <td>
        @(Html.Kendo().AutoComplete()
            .HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" })
            .Name("ScratchPadPriceCalcTypeDropdownList")
            .Suggest(true)
            .Enable(false)
            .AutoWidth(true)
            .BindTo(Enum.GetNames(typeof(SL_TradePriceAmountCalcType)).ToList())
            .Value(SL_TradePriceAmountCalcType.CASH.ToString())
        )
    </td>


    <td>
        @Html.Kendo().CheckBox().Name("ScratchPadAmountCalcTypeCheckBox").Label(LabelHelper.Text("AmountCalcType"))
    </td>
    <td>

        @(Html.Kendo().AutoComplete()
            .HtmlAttributes(new { @class = "Toolbar-Cell sratchpad-item-width" })
            .Name("ScratchPadTradeAmountCalcTypeDropdownList")
            .Suggest(true)
            .Enable(false)
            .AutoWidth(true)
            .BindTo(Enum.GetNames(typeof(SL_TradeAmountCalcType)).ToList())
            .Value(SL_TradeAmountCalcType.Cash.ToString())
        )
    </td>
</tr>
}
</table>
</div>
    @(Html.Kendo().Splitter()
                    .Name("ScratchPadSplitter")
            .Orientation(SplitterOrientation.Vertical)
              .HtmlAttributes(new { @class = "grid" })
            .Panes(panes =>
            {
            panes.Add()
                .Collapsible(false)
                .Size("20%")
                .Scrollable(false)
                .Content(@<text>
                    @Html.TextArea("ScratchpadListTextBox")
                </text>);

            panes.Add()
            .Collapsible(false)
            .Size("50%")
            .Scrollable(false)
            .Content(@<text>
                @(Html.Kendo().Grid(Model)
    .Name("ScratchPadGrid")
    .Scrollable()
     .HtmlAttributes(new { @class = "grid" })
    .Selectable(select => select.Type(GridSelectionType.Row).Mode(GridSelectionMode.Multiple))
    .Resizable(resize => resize.Columns(true))
    .Events(e =>
    {
        e.DataBound("onScratchPadCheckData");
        e.Change("onScratchPadChange");
        e.Edit("onScratchPadEdit");
        e.ColumnHide("onScratchPadGridLayoutChange");
        e.ColumnShow("onScratchPadGridLayoutChange");
        e.ColumnResize("onScratchPadGridLayoutChange");
        e.ColumnReorder("onScratchPadGridLayoutChange");
    })
    .Sortable()
    .Filterable()
    .Reorderable(reorder =>
    {
        reorder.Columns(true);
    })
    .ColumnMenu(menu =>
    {
        menu.Columns(true);
        menu.Filterable(true);
        menu.Sortable(true);
        menu.ComponentType( "modern" );
    } )
    .NoRecords()
    .Editable(edit => edit.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(false).Enabled(true))
    .Columns(columns =>
    {
        columns.Bound(x => x.RuleAlert).GetColumnFormat(ColumnTypeEnum.String, false, "# if (RuleAlert != '' && RuleAlert != null) { #" +
               "<div  class='k-widget k-notification k-notification-warning text-center'><i class='fa  fa-exclamation'></i></div>" +
           "# } #", "").Title("").Width(30).HtmlAttributes(new { title = "Error - #= RuleAlert # " });
        columns.Bound(x => x.Enabled).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox' #= Enabled ? checked='checked':'' # class='chkbx' />", "").HeaderTemplate("<input type='checkbox' id='masterCheckBox' onclick='checkScratchPadAll(this)' checked ='checked'/>").Filterable(false);
        columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound(x => x.SubmissionType).GetColumnFormat(ColumnTypeEnum.String, false, "#if (MemoInfo != '' && MemoInfo != null) { #" +
              "<div class='k-widget k-notification k-notification-error text-center'><i class='fa  fa-times'></i></div>" +
           "# }#", "").HtmlAttributes(new { title = "Error - #= MemoInfo # " });
        columns.Bound( x => x.ExecutingType ).GetColumnFormat( ColumnTypeEnum.String, false, "", "_ScratchPadExecutingSystemDropdown" );
        columns.Bound(x => x.ContraEntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "_ScratchPadContraEntityAutoComplete");
        columns.Bound(x => x.ContractNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound(p => p.TradeType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.IssueId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.SecNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Sedol).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Isin).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.MktPrice).GetColumnFormat(ColumnTypeEnum.Money, false, "#=GetMoneyDirection(MktPrice)#", "DecimalNumber");
        columns.Bound(x => x.Price).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(Price)#", "DecimalNumber");
        columns.Bound(x => x.Availability).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(Availability)#", "QuantityDecimalNumber");
        columns.Bound(x => x.InventorySource).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden();
        columns.Bound(x => x.LoanForPurpose).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(LoanForPurpose)#", "QuantityDecimalNumber").Hidden();
        columns.Bound(x => x.Quantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(Quantity)#", "QuantityDecimalNumber");
        columns.Bound(x => x.Amount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(Amount)#", "DecimalNumber");
        columns.Bound(x => x.RebateRate).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(RebateRate)#", "RebateRateDecimalNumber");
        columns.Bound(x => x.IntraDayLendingRate).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(IntraDayLendingRate)#", "RebateRateDecimalNumber");
        columns.Bound(x => x.Mark).GetColumnFormat(ColumnTypeEnum.Margin, false, "#=GetRateDirection(Mark)#", "DecimalNumber");
        columns.Bound(x => x.CostOfFunds).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(CostOfFunds)#", "");
        columns.Bound(x => x.ProfitId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Comment).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.BatchCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.TradePriceAmountCalcType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.TradeAmountCalcType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.FeeType).GetColumnFormat(ColumnTypeEnum.String, false, "", "_ScratchPadFeeTypeSystemDropdown");
        columns.Bound(x => x.FeeOffSet).GetColumnFormat(ColumnTypeEnum.Rate, false, "", "RebateRateDecimalNumber");
        columns.Bound(x => x.TradeDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "Date");
        columns.Bound(x => x.CollateralFlag).GetColumnFormat(ColumnTypeEnum.String, false, "", "_CollateralFlagDropdown");
        columns.Bound(x => x.CashSettleDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "Date");
        columns.Bound(x => x.SecuritySettleDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "Date");
        columns.Bound(x => x.TermDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "Date");
        columns.Bound(x => x.ExpectedEndDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "Date");

        columns.Bound( x => x.CurrencyCode ).GetColumnFormat( ColumnTypeEnum.Date, false, "", "_CurrencyDropdown" );
        columns.Bound(x => x.IncomeAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(IncomeAmount)#", "");
        columns.Bound(x => x.DeliveryCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "_ScratchPadDeliveryCodeDropdown");
        columns.Bound(x => x.SubmissionType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.MemoInfo).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.IsCustomPrice).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Command(c => c.Destroy()).Width(80);
    })
    .DataSource(read => read.Ajax()
        .Aggregates(agg =>
        {
            agg.Add(x => x.Quantity).Sum();
            agg.Add(x => x.Amount).Sum();
            agg.Add(x => x.IncomeAmount).Sum();
        })
        .Events(e =>
        {
            e.Error("onScratchPadError");
            e.Change("onTradeListCreditLimitTest");
        })
        .ServerOperation(false)
        .AutoSync(true)
        .Destroy(destroy => destroy.Action("TradeModel_Destroy", "Trade", new { area = "DomesticTrading" }))
                .Update(update => update.Action("TradeModel_Update", "Trade", new { area = "DomesticTrading" }).Data("onScratchPadContraEntityChanged"))
                .Create(create => create.Action("TradeModel_Update", "Trade", new { area = "DomesticTrading" }).Data("onScratchPadContraEntityChanged"))
        .Model(model =>
        {
            model.Id(x => x.ModelId);
            model.Field(x => x.RuleAlert).Editable(false);
            model.Field(x => x.ModelId).Editable(false);
            model.Field(x => x.Enabled).Editable(false);
            model.Field(x => x.EntityId).Editable(false);
            model.Field(x => x.Availability).Editable(false);
            model.Field(x => x.ContraEntityId).Editable(true);
            model.Field(x => x.ContractNumber).Editable(false);
            model.Field(x => x.TradeType).Editable(false);
            model.Field(x => x.MktPrice).Editable(false);
            model.Field(x => x.IssueId).Editable(false);
            model.Field(x => x.SecurityNumber).Editable(false);
            model.Field(x => x.InventorySource).Editable(false);
            model.Field(x => x.Ticker).Editable(false);
            model.Field(x => x.Price).Editable(true);
            model.Field(x => x.Quantity).Editable(true);
            model.Field(x => x.Amount).Editable(true);
            model.Field(x => x.RebateRate).Editable(true);
            model.Field(x => x.IntraDayLendingRate).Editable(true);
            model.Field(x => x.Mark).Editable(true);
            model.Field(x => x.IncomeAmount).Editable(false);
            model.Field(x => x.ProfitId).Editable(true);
            model.Field(x => x.BatchCode).Editable(true);
            model.Field(x => x.TradeAmountCalcType).Editable(false);
            model.Field(x => x.TradePriceAmountCalcType).Editable(false);
            model.Field(x => x.Comment).Editable(true);
            model.Field(x => x.SubmissionType).Editable(false);
            model.Field(x => x.MemoInfo).Editable(false);
            model.Field( x => x.ExecutingType ).Editable( true );
        }))
               )</text>);
        })
    )
   
    @Html.Kendo().Window().Name("ScratchPadPendingWindow")

    @(Html.Kendo().ContextMenu()
    .Name("ScratchPadContextMenu")
    .Target("#ScratchPadGrid")
    .Events(events => events.Select("onScratchPadContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("AutoFit Columns").Enabled(true);
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
        items.Add().Text( "Check All" ).Enabled( true );
        items.Add().Separator(true);
        items.Add().Text("Select All").Enabled(true);
        items.Add().Text("Copy").Enabled(true).HtmlAttributes(new { ID = "ScratchPadCopyButton" });
        items.Add().Text("Export To Excel").Enabled(true);

    }))
