@using System.ComponentModel
@using SLTrader.Enums
@using SLTrader.Tools
@model IEnumerable<BondFire.Entities.Projections.SL_TradeBreakOutExtendedProjection>

<style scoped>
       #BulkUpdateTable {
        border-collapse:collapse;
        margin:0;
    }

       
    .k-checkbox-label {
               top: -2px;
    }

    .hiddenControl {
        display: none;
    }

</style>

<script type="text/javascript">
    var _contraEntityChanged = false;
    var _suspendDataBound = false;

    $(document).ready(function () {
        $('#UpdateTradeContraEntityCheckBox').change(function () {
            $("#UpdateTradeContraEntityDropdownList").data("kendoAutoComplete").enable($(this).is(':checked'));
            $("#UpdateTradeApplyChangesButton").data("kendoButton").enable(true);
        });

        $('#UpdateTradeRebateRateCheckBox').change(function () {
            $("#UpdateTradeRebateRateTextBox").data("kendoNumericTextBox").enable($(this).is(':checked'));
            $("#UpdateTradeApplyChangesButton").data("kendoButton").enable(true);
        });

        $('#UpdateTradeMarkCheckBox').change(function () {
            $("#UpdateTradeMarkTextBox").data("kendoNumericTextBox").enable($(this).is(':checked'));
            $("#UpdateTradeApplyChangesButton").data("kendoButton").enable(true);
        });

        $('#UpdateTradeTermDateCheckBox').change(function () {
            $("#UpdateTermDateCalander").data("kendoDatePicker").enable($(this).is(':checked'));
            $("#UpdateTradeApplyChangesButton").data("kendoButton").enable(true);
        });

        $('#UpdateTradeBreakOutFeeCheckBox').change(function () {
            $("#UpdateTradeBreakOutFeeOffsetTextBox").data("kendoNumericTextBox").enable($(this).is(':checked'));
            $("#UpdateTradeBreakOutFeeTypeDropdownList").data("kendoDropDownList").enable($(this).is(':checked'));

            $("#UpdateTradeApplyChangesButton").data("kendoButton").enable(true);
        });

          setTimeout(function () {
            if (@Model.Count() > 1) {
                resizeGridColumns("#TradeBulkUpdateGrid");
            }

            $('#LocalDetailWindow').data("kendoWindow").center();
        }, 5);
    });

    function onBulkTradesSelectAll()
    {
        try {
            var bulkUpdateGrid = $("#TradeBulkUpdateGrid").data("kendoGrid");
            bulkUpdateGrid.select(bulkUpdateGrid.tbody.find(">tr"));
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onBulkTradesApplyChanges() {

        $("#UpdateTradeStatusLabel").html('<i class="fa fa-spinner fa-spin"></i> Processing...');

        try {
            var contraEntityId = ($("#UpdateTradeContraEntityCheckBox").is(':checked')) ? $("#UpdateTradeContraEntityDropdownList").data("kendoAutoComplete").value() : "";
            var profitCenter = ($("#UpdateTradeProfitCenterCheckBox").is(':checked')) ? document.getElementById("UpdateTradeProfitCenterTextBox").value : "";

            var rebateRate = ($("#UpdateTradeRebateRateCheckBox").is(':checked')) ? $("#UpdateTradeRebateRateTextBox").data("kendoNumericTextBox").value() : null;
            var mark = ($("#UpdateTradeMarkCheckBox").is(':checked')) ? $("#UpdateTradeMarkTextBox").data("kendoNumericTextBox").value() : null;

            var termDatePicker = $("#UpdateTermDateCalander").data("kendoDatePicker");
            var termDateValue = $("#UpdateTradeTermDateCheckBox").is(':checked') ? kendo.toString(termDatePicker.value(), 'yyyy-MM-dd') : null;

            var fee = ($("#UpdateTradeBreakOutFeeCheckBox").is(':checked')) ? $("#UpdateTradeBreakOutFeeTypeDropdownList").data("kendoDropDownList").value() : null;
            var feeOffSet = ($("#UpdateTradeBreakOutFeeCheckBox").is(':checked')) ? $("#UpdateTradeBreakOutFeeOffsetTextBox").data("kendoNumericTextBox").value() : null;

            var grid = $('#TradeBulkUpdateGrid').data('kendoGrid');
            var rows = grid.select();
            var dataItems = [];

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });

            if (dataItems.length == 0) {
                $('#UpdateTradeStatusLabel').html('<i class="fa fa-times"></i> No items selected!');
            }
            else {
                $.ajax({
                    url: "@Url.Action("UpdateBulkTradesBreakOutEditor", "Trade")",
                    type: 'POST',
                    contentType: 'application/json;',
                    data: JSON.stringify({
                        contraEntityid: contraEntityId,
                        profitCenter: profitCenter,
                        rate: rebateRate,
                        mark: mark,
                        fee: fee,
                        feeOffSet : feeOffSet,
                        termDate : termDateValue,
                        list: dataItems
                    }),
                    success: function (valid) {

                        for (var i = 0; i < valid.length; i++) {
                            var dataItem = valid[i];

                            var CashSettleDate = kendo.parseDate(dataItem.CashSettleDate);
                            dataItem.CashSettleDate = CashSettleDate;

                            var SecuritySettleDate = kendo.parseDate(dataItem.SecuritySettleDate);
                            dataItem.SecuritySettleDate = SecuritySettleDate;

                            var TermDate = kendo.parseDate(dataItem.TermDate);
                            dataItem.TermDate = TermDate;

                            var ExpectedEndDate = kendo.parseDate(dataItem.ExpectedEndDate);
                            dataItem.ExpectedEndDate = ExpectedEndDate;

                            var TradeDate = kendo.parseDate(dataItem.TradeDate);
                            dataItem.TradeDate = TradeDate;

                            $("#TradeBulkUpdateGrid").data("kendoGrid").dataSource.pushUpdate(dataItem);
                        }

                        $("#TradeBulkUpdateGrid").data("kendoGrid").refresh();
                        $('#UpdateTradeStatusLabel').html('Updated ' + valid.length + ' trade(s).');
                        $("#UpdateTradeSaveTradesButton").data("kendoButton").enable(true);

                    },
                    error: function (valid) {
                        $('#UpdateTradeStatusLabel').html('<i class="fa fa-times"></i> Error Processing!');
                    }
                });
            }
        }
        catch (e) {
            $('#UpdateTradeStatusLabel').html('<i class="fa fa-times"></i> Error Processing!');
            console.log(e.message);
        }        
    }

    function onBulkTradesGridEdit(e) {
        e.preventDefault();

        var input = e.container.find("input");

        if (e.container.find("input").attr("name") == 'ContraEntity') {
            _contraEntityChanged = true;
        }
        else {
            _contraEntityChanged = false;
        }

        setTimeout(function () { input.select(); });

        $("#UpdateTradeSaveTradesButton").data("kendoButton").enable(true);
    }

    function onSaveBulkTrades() {
        $("#UpdateTradeStatusLabel").html('<i class="fa fa-spinner fa-spin"></i> Processing...');
        $("#UpdateTradeSaveTradesButton").data("kendoButton").enable(false);

        try {
            var grid = $('#TradeBulkUpdateGrid').data('kendoGrid');
            var rows = grid.select();
            var rowCount = rows.length;
            var dataItems = [];

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });

            if (dataItems.length == 0) {
                $('#UpdateTradeStatusLabel').html('<i class="fa fa-times"></i> No items selected!');
            }
            else {
                $.ajax({
                    url: "@Url.Action("SaveBulkTradesBreakOutEditor", "Trade")",
                    type: 'POST',
                    contentType: 'application/json;',
                    data: JSON.stringify({
                        list: dataItems
                    }),
                    success: function(valid) {

                        for (var i = 0; i < valid.length; i++) {
                            var dataItem = valid[i];
                            RemoveTradeRow("#TradeBulkUpdateGrid", dataItem.TradeNumber);
                        }

                        $('#UpdateTradeStatusLabel').html("Successfully saved " + (valid.length) + " trade(s).");

                        if ( ($("#TradeBulkUpdateGrid").data("kendoGrid").dataSource.total() - valid.length) == 0) {
                            $('#LocalDetailWindow').data("kendoWindow").close();
                        }
                    },
                    error: function(valid) {
                        $('#UpdateTradeStatusLabel').html('<i class="fa fa-times"></i> Error Processing!');
                    }
                });
            }
        }
        catch (e) {
            $('#UpdateTradeStatusLabel').html('<i class="fa fa-times"></i> Error Processing!');
            console.log(e.message);
        }

        $("#UpdateTradeSaveTradesButton").data("kendoButton").enable(true);        
    }

    function additionalBulkTradesData() {

        var entityGrid = $("#TradeBulkUpdateGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        var entityId = selectedItem["EntityId"];

        return {
            entityId: entityId
        }
    }

    function onUpdateTradeContraEntityDropdownResize(e)
    {
        this.list.width(200); //adjust width of the drop-down list
    }

    function onBulkTradesGridCheckData(e) {
        resizeGridColumns("#TradeBulkUpdateGrid");

        try {
            CheckGridData("#TradeBulkUpdateGrid");
        }
        catch (e)
        {
        
        }
    }

    function onUpdateTradeRequestEnd(e) {
       
    }

    function onSLTradeBulkUpdateData() {
        var entityGrid = $("#TradeBulkUpdateGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        var executingSystem = selectedItem["ExecutingSystem"];

        return {
            executingSystem: executingSystem
        }
    }

    function onBulkTradesError(e) {
        console.log(e);
    }
</script>



@(Html.Kendo().ToolBar()
                .Name("UpdateTradeButtonToolBar")
                .Resizable(true)
                .Items(items =>
                {
                items.Add().Template(Html.Kendo().Button().Name("UpdateTradeApplyChangesButton").HtmlAttributes(new { @class = "k-widget k-notification k-notification-success" }).Events(e => e.Click("onBulkTradesApplyChanges")).Content(@<text><i class="fa fa-repeat"></i>&nbsp;Apply Options</text>).ToHtmlString());
                items.Add().Template(Html.Kendo().Button().Enable(false).Name("UpdateTradeSaveTradesButton").HtmlAttributes(new { @class = "k-widget k-notification k-notification-warning" }).Events(e => e.Click("onSaveBulkTrades")).Content(@<text><i class="icon-check color-green" ></i>&nbsp;Save Trades</text>).ToHtmlString());
                items.Add().Template(Html.Kendo().Button().Enable(true).Name("onBulkTradesSelectAll").Events(e => e.Click("onBulkTradesSelectAll")).Content(@<text><i class="icon-check color-green" ></i>&nbsp;Select All</text>).ToHtmlString());
                }))

<table id="BulkUpdateTable">
    <tr>
        <td>
            @Html.Kendo().CheckBox().Name("UpdateTradeContraEntityCheckBox").Label(LabelHelper.Text("ContraEntity"))                 
        </td>
        <td>
            @(Html.Kendo().AutoComplete()
                                .Name("UpdateTradeContraEntityDropdownList")
                        .DataTextField("ContraEntity")                        
                        .Enable(false)
                        .AutoWidth(true)
                        .HtmlAttributes(new { @class = "updatetrades-item-width" })
                        .DataSource(source => source.Read(read => read.Action("Read_ContraEntityDropdown", "ContraEntity", new { area = "DomesticTrading" }).Data("additionalBulkTradesData")))                             
                        .Events(events => events.Open("onUpdateTradeContraEntityDropdownResize"))
                         .Template("<span class=\"k-state-default\">#:data.ContraEntity# #:data.AccountName# </span>")
                        .Filter("startswith"))
        </td>
        <td>
            @Html.Kendo().CheckBox().Name("UpdateTradeRebateRateCheckBox").Label(LabelHelper.Text("RebateRate"))     
        </td>       
        <td>
            @Html.Kendo().NumericTextBox().Name("UpdateTradeRebateRateTextBox").Spinners(false).Value(0).Enable(false).Decimals(3).Format("000.000").HtmlAttributes(new { @class = "updatetrades-item-width" })
        </td>
        <td>
            @Html.Kendo().CheckBox().Name("UpdateTradeMarkCheckBox").Label(LabelHelper.Text("Mark"))     
        </td>
        <td>
            @Html.Kendo().NumericTextBox().Name("UpdateTradeMarkTextBox").Spinners(false).Value(1.02).Format("#,##0.00").Enable(false).HtmlAttributes(new { @class = "updatetrades-item-width" })
        </td>
        <td>
            @Html.Kendo().CheckBox().Name("UpdateTradeProfitCenterCheckBox").Label(LabelHelper.Text("ProfitCenter"))            
        </td>  
        <td>
            @Html.TextBox("UpdateTradeProfitCenterTextBox", "", new { @class = "k-textbox updatetrades-item-width", @maxlength="1" })
        </td>
        <td>
            @Html.Kendo().CheckBox().Name("UpdateTradeTermDateCheckBox").Label(LabelHelper.Text("TermDate"))
        </td>
        <td>
            @(Html.Kendo().DatePicker()
    .Name("UpdateTermDateCalander")
    .Format("yyyy-MM-dd")
    .Enable(false)
    .Value(DateTime.Now)
            .HtmlAttributes(new { @style = "width:110px;" }))
        </td>
        
        @if (SessionService.UserPreference.UserTypeId == SL_UserType.INTERNATIONAL)
        {
        <td>
            @Html.Kendo().CheckBox().Name("UpdateTradeBreakOutFeeCheckBox").Label(LabelHelper.Text("Fee"))
        </td>
        <td>
            @(Html.Kendo().DropDownList()
                                .Name("UpdateTradeBreakOutFeeTypeDropdownList")
                                .HtmlAttributes(new { @class = "width90" })
                                .DataTextField("Fee")
                                .DataValueField("Fee")
                                .OptionLabel(LabelHelper.Text("OptionLabel"))
                                .Animation(true)
                                .AutoBind(false)
                                .AutoWidth(true)
                                .Enable(false)
                                .DataSource(dataSource => dataSource
                                .Read(read => read.Action("Read_FeeTypesDropdown", "FeeType", new { area = "DomesticTrading" }).Data("additionalBulkTradesData")))
                                .SelectedIndex(1))
        </td>
        <td>
            @Html.Kendo().NumericTextBox().Name("UpdateTradeBreakOutFeeOffsetTextBox").HtmlAttributes(new { @class = "width90" }).Spinners(true).Value(0.25).Format("#,##0.00").Enable(false)
        </td>
        }
        else
        {
           <td class="hiddenControl">
                @Html.Kendo().CheckBox().Name("UpdateTradeBreakOutFeeCheckBox").Label(LabelHelper.Text("Fee"))
            </td>
            <td class="hiddenControl">
                @(Html.Kendo().DropDownList()
                                .Name("UpdateTradeBreakOutFeeTypeDropdownList")
                                .HtmlAttributes(new { @class = "width90" })
                                .DataTextField("Fee")
                                .DataValueField("Fee")
                                .OptionLabel(LabelHelper.Text("OptionLabel"))
                                .Animation(true)
                                .AutoBind(false)
                                .AutoWidth(true)
                                .Enable(false)
                                .DataSource(dataSource => dataSource
                                .Read(read => read.Action("Read_FeeTypesDropdown", "FeeType", new { area = "DomesticTrading" }).Data("additionalBulkTradesData")))
                                .SelectedIndex(1))
            </td>
            <td class="hiddenControl">
                @Html.Kendo().NumericTextBox().Name("UpdateTradeBreakOutFeeOffsetTextBox").HtmlAttributes(new { @class = "width90" }).Spinners(true).Value(0.25).Format("#,##0.00").Enable(false)
            </td>
        }
    </tr>
    </table>
            <div id="BulkTradeContent" class="grid-div">
                @(Html.Kendo().Grid(Model)
          .Name("TradeBulkUpdateGrid")
          .HtmlAttributes(new { @class = "grid" })
          .Sortable()       
          .Filterable()
          .Scrollable()
          .Navigatable()
          .Editable(edit =>
          {
              edit.Mode(GridEditMode.InCell);
              edit.Enabled(true);              
          })
          .Events(events => events.Edit("onBulkTradesGridEdit").DataBound("onBulkTradesGridCheckData"))
          .Selectable(seclect => seclect.Mode(GridSelectionMode.Multiple))
          .NoRecords()
          .Columns(columns =>
          {
              columns.Bound(x => x.ExecutingSystem).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
              columns.Bound(x => x.EffectiveDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "").Hidden(true);
              columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
              columns.Bound(x => x.ClearingId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.ContraEntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "_UpdateTradesContraEntityAutoComplete");
              columns.Bound(x => x.TradeNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
              columns.Bound(p => p.TradeType).GetColumnFormat(ColumnTypeEnum.String, false, "", "_TradeTypeDropdown");
              columns.Bound(x => x.IssueId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
              columns.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.Price).GetColumnFormat(ColumnTypeEnum.Money, false, "", "");

              columns.Bound(x => x.BorrowQuantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(BorrowQuantity)#", "QuantityDecimalNumber");
              columns.Bound(x => x.BorrowAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(BorrowAmount)#", "DecimalNumber");

              columns.Bound(x => x.LoanQuantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(LoanQuantity)#", "QuantityDecimalNumber");
              columns.Bound(x => x.LoanAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(LoanAmount)#", "DecimalNumber");

              columns.Bound(x => x.CollateralFlag).GetColumnFormat(ColumnTypeEnum.String, false, "", "_CollateralFlagDropdown");
              columns.Bound(x => x.RebateRate).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(RebateRate)#", "RebateRateNumber");
              columns.Bound(x => x.RebateRateId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
              columns.Bound(x => x.Mark).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(Mark)#", "RebateRateNumber");
              columns.Bound(x => x.MarkParameterId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);

              columns.Bound(x => x.FeeType).GetColumnFormat(ColumnTypeEnum.String, false, "", "_UpdateTradeBreakOutFeeTypeSystemDropdown").Hidden((SessionService.UserPreference.UserTypeId != SL_UserType.INTERNATIONAL)); ;
              columns.Bound(x => x.FeeOffset).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden((SessionService.UserPreference.UserTypeId != SL_UserType.INTERNATIONAL));

              columns.Bound(x => x.CashSettleDate).Hidden(true).GetColumnFormat(ColumnTypeEnum.Date, false, "", "").Hidden(true);
              columns.Bound( x => x.SecuritySettleDate).GetColumnFormat( ColumnTypeEnum.Date, false, "", "Date" ).Hidden(true);
              columns.Bound( x => x.TermDate ).GetColumnFormat( ColumnTypeEnum.Date, false, "", "Date" );
              columns.Bound(x => x.TradeDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "Date").Hidden((SessionService.UserPreference.UserTypeId != SL_UserType.INTERNATIONAL));
              columns.Bound(x => x.ExpectedEndDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "Date").Hidden((SessionService.UserPreference.UserTypeId != SL_UserType.INTERNATIONAL));

              columns.Bound(x => x.CurrencyCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "_CurrencyDropdown").Hidden(false);
              columns.Bound(x => x.SecurityLoc).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(false);
              columns.Bound(x => x.CashLoc).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
              columns.Bound(x => x.IncomeAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(IncomeAmount)#", "").Hidden(true);
              columns.Bound(x => x.BatchCode).GetColumnFormat(ColumnTypeEnum.String, true, "", "");
              columns.Bound(x => x.TradeFlag).Hidden(true);
              columns.Bound(x => x.DeliveryCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.PriceCalcType).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
              columns.Bound(x => x.AmountCalcType).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
              columns.Bound(x => x.TradeStatus).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.DateTimeId).GetColumnFormat(ColumnTypeEnum.Time, false, "", "").Hidden(true);
              columns.Command(x => x.Destroy());
          })
                      .DataSource(dataSource => dataSource
                          .Ajax()                                             
                          .AutoSync(true)                          
                          .Sort(sort => sort.Add("TradeNumber").Descending())
                          .Update(update => update.Action("UpdateBulkTradeBreakOut", "Trade", new { area = "DomesticTrading" }))
                          .Model(model =>
                          {
                              model.Id(x => x.TradeNumber);
                              model.Field(x => x.ClearingId).Editable(false);
                              model.Field(x => x.EntityId).Editable(false);
                              model.Field(x => x.TradeType).Editable(true);
                              model.Field(x => x.BatchCode).Editable(true);
                              model.Field(x => x.IssueId).Editable(false);
                              model.Field(x => x.Ticker).Editable(false);
                              model.Field(x => x.SecurityNumber).Editable(false);
                              model.Field(x => x.IncomeAmount).Editable(false);
                              model.Field(x => x.TradeFlag).Editable(false);
                              model.Field(x => x.RebateRate).Editable(true).DefaultValue(0);
                              model.Field(x => x.TradeStatus).Editable(false);
                              model.Field(x => x.PriceCalcType).Editable(false);
                              model.Field(x => x.AmountCalcType).Editable(false);
                              model.Field(x => x.DateTimeId).Editable(false);
                          })
                          .Sort(sort => sort.Add(x => x.TradeType).Order(ListSortDirection.Descending))
                          .Aggregates(agg =>
                          {
                              agg.Add(x => x.BorrowQuantity).Sum();
                              agg.Add(x => x.BorrowAmount).Sum();
                              agg.Add(x => x.LoanQuantity).Sum();
                              agg.Add(x => x.LoanAmount).Sum();
                              agg.Add(x => x.IncomeAmount).Sum();
                          })
                          .Events(events => events
                              .Error("onBulkTradesError").RequestEnd("onUpdateTradeRequestEnd"))))
            </div>
            <label id="UpdateTradeStatusLabel"></label>
        