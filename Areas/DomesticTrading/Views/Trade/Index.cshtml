@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools

<style scoped>
    #TradeDetailCopy.zeroclipboard-is-hover {
        background-color: #1ba1e2;
    }

    #TradeToolBar .k-checkbox-label {
        padding-left: 20px;
    }

    #TradeTable td {
        margin: 0px;
        padding: 0px;
    }

    .hideControl {
        display: none;        
    }

    .h > k-input {
        display:none;
    }

    #TradeToolBar.k-widget .k-multiselect input {
        display: none;
    }
</style>

<script type="text/javascript">
    var _tradeSelectedRows = [];
    var _originalTradeGrid = null;
    var _tradeGridSelectAll = false;

    $.connection.hub.reconnected(function () {
        try {
            $('#TradeDetails').data("kendoGrid").dataSource.read();
        } catch (e) { }
    });


    $('#SharedLabelCheckBox').on('change', function () {
        try {
            RefreshGrid("#TradeDetails");
        }
        catch (e) { }
    });

    $(document).ready(function () {
       setTimeout(function () {
            _originalTradeGrid = $("#TradeDetails").data('kendoGrid').getOptions();

            LoadGridLayout("#TradeDetails");
        }, 5);

        var client = new ZeroClipboard(document.getElementById("TradeDetailCopy"));

        client.on("ready", function (readyEvent) {
            client.on("copy", function (event) {
                var data = KendoGridToText("#TradeDetails", "TradeDetails", false);
                client.setText(data);
            });
        });
    });

    function onTradeGridLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#TradeDetails");
        }, 5);
    }

    function onTradeRequestEnd(e)
    {
        traderHubProxy.on('updateTradeBreaKOut', function (update) {
            updateTradeRow(update);
        });
    }

    function onTradeRequestStart(e) {
        traderHubProxy.off('updateTradeBreaKOut');
    }

    function onListFind(list, value) {

        for (var i = 0; i < list.length; i++) {

            if (list[i].CompanyId == value) {
                return true;
            }
        }

        return false;
    }


    function updateTradeRow(update) {
        try
        {
            var entityList = $("#TradeEntityDropdownList").data("kendoMultiSelect").dataItems();

            var data = $("#TradeDetails").data("kendoGrid").dataSource;
            var updates = new Array();

            $.each(update, function (i, obj) {

                if (onListFind(entityList, obj.EntityId) == true) {

                        var tradeStatus = '@Convert.ToInt32(StatusDetail.Pending)';

                        try
                        {
                            tradeStatus = $("#TradeDetails").data("kendoGrid").dataSource.get(obj["TradeNumber"]).TradeStatus;
                        }
                        catch (e)
                        {
                            tradeStatus = '@Convert.ToInt32(StatusDetail.Pending)';
                        }

                        if ((tradeStatus ==  '@Convert.ToInt32(StatusDetail.Approved)') && (obj["TradeStatus"] != '@Convert.ToInt32(StatusDetail.Approved)'))
                        {
                            console.log("event mismatch");
                        }
                        else
                        {                          
                            var dateTimeId = kendo.parseDate(obj['DateTimeId']);
                            obj['DateTimeId'] = dateTimeId;

                            var SettlementDate = kendo.parseDate(obj['SecuritySettleDate']);
                            obj['SecuritySettleDate'] = SettlementDate;

                            var TermDate = kendo.parseDate(obj['TermDate']);
                            obj['TermDate'] = TermDate;

                            var ValueDate = kendo.parseDate(obj['CashSettleDate']);
                            obj['CashSettleDate'] = ValueDate;


                            var tradeDate = kendo.parseDate(obj['TradeDate']);
                            obj['TradeDate'] = tradeDate;


                            var expectedEndDate = kendo.parseDate(obj['ExpectedEndDate']);
                            obj['ExpectedEndDate'] = expectedEndDate;

                            updates.push(obj);                            
                        }
                    }
            });

            data.pushUpdate(updates);
            ReInitVirtualScroll("#TradeDetails");
        }
        catch(e)
        {
            console.log(e);
            traderHubProxy.off('updateTradeBreaKOut');
        }


    }

    function onTradeContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'Send':
                onTradeSend();
                break;

            case 'Bulk Update':
                onTradeBulkUpdate();
                break;

            case 'Mirror':
                onTradeMirror();
                break;

            case 'Cancel':
                onTradeCancel();
                break;

            case 'Unsort':
                onTradeUnsortGrid('#TradeDetails');
                break;

            case 'Select All':
                onTradeSelectAll(_tradeGridSelectAll);
                break;

            case 'Copy':
                $("#copyClipboardButton").trigger("click");
                break;

            case "Reset Grid":
                ResetUserLayout("#TradeDetails");
                $("#TradeDetails").data('kendoGrid').setOptions(_originalTradeGrid);
                break;

            case "Reset Filter":
                $("#TradeSecuritySearchTextBox").val("");
                ResetFilter("#TradeDetails");
                break;

            case 'Export To Excel':
                exportToTradeExcel();
                break;

            case 'AutoFit Columns':
                resizeGridColumns("#TradeDetails");
                break;
        }
    }

    function onTradeSelectAll(e) {
        try {
            var tradeDetailsGrid = $("#TradeDetails").data("kendoGrid");
            tradeDetailsGrid.select(tradeDetailsGrid.tbody.find(">tr"));

            _tradeGridSelectAll = true;
        }
        catch (e) {
            console.log(e.message);
            console.log(e.message);
        }
    }

    function onTradeUnsortGrid(e)
    {
        UnsortGrid(e);
    }

    function exportToTradeExcel() {
        KendoGridToCSVConvertor("#TradeDetails", 'TradeDetails', _tradeGridSelectAll);
    }

    function additionalTradeData() {
        var datepicker = $("#TradeCalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entity = $("#TradeEntityDropdownList").data("kendoMultiSelect").value();

        return {
            effectiveDate: value,
            entityId: entity,
        }
    }

    function onTradeDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreferenceMultiple',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    userPreference = valid;

                    var dropdownList = $('#TradeEntityDropdownList').data("kendoMultiSelect");

                    dropdownList.value(userPreference);

                    $('#TradeDetails').data("kendoGrid").dataSource.read();
                },
                error: function (valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) { }
    }

    function onTradeError() {
    }

    function onTradeCheckData(e) {

        try {
            CheckGridData('#TradeDetails');           
        }
        catch (e) {
            console.log(e.message);
        }        
    }

    function onTradeChange() {
        $('#TradeDetails').data("kendoGrid").dataSource.read();
    }


    function ReInitVirtualScroll(e) {
        var grid = $(e).data("kendoGrid");
        grid._rowHeight = undefined;
        grid.virtualScrollable.refresh();
    }

    function onTradeCancel() {
        var dataItems = [];
        var grid = $('#TradeDetails').data('kendoGrid');
        var rows = grid.select();

        rows.each(function (index, row) {
            var selectedItem = grid.dataItem(row);
            dataItems.push(selectedItem);
        });

        $.ajax({
            url: '@Url.Action("CancelTradeBreakOut", "Trade", new { area = "DomesticTrading" })',
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify({ items: dataItems }),
            success: function(valid) {
                DisplayControllerByStringError("Info", "Canceled " + valid.length + " trade(s).");
                _tradeSelectedRows = [];
            },
            error: function(valid) {
                DisplayError(valid);
                _tradeSelectedRows = [];
            }
        });
    }


    function onTradeBulkUpdate() {
        var dataItems = [];
        var grid = $('#TradeDetails').data('kendoGrid');
        var rows = grid.select();

        rows.each(function (index, row) {
            var selectedItem = grid.dataItem(row);
            dataItems.push(selectedItem);
        });

        HelperPartialWindow(
        JSON.stringify({
            items: dataItems
        }),
        'Bulk Trade Update',
        0,
        0,
        '/DomesticTrading/Trade/BulkUpdateTradesBreakOut');
    }

    function onTradeMirror() {
        var dataItems = [];
        var grid = $('#TradeDetails').data('kendoGrid');
        var rows = grid.select();

        rows.each(function (index, row) {
            var selectedItem = grid.dataItem(row);
            dataItems.push(selectedItem);
        });

        HelperPartialWindow(
        JSON.stringify({ items: dataItems }),
        'Mirror Trade Items',
        0,
        0,
        '/DomesticTrading/Trade/LoadBulkUpdateBreakOutPartial');
    }

    function onTradeSend() {
        var dataItems = [];
        var grid = $('#TradeDetails').data('kendoGrid');
        var rows = grid.select();

        rows.each(function (index, row) {
            var selectedItem = grid.dataItem(row);
            dataItems.push(selectedItem);
        });

        $.ajax({
            url: '@Url.Action("SendBreaKOutContract", "Trade", new { area = "DomesticTrading" })',
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify({ items: dataItems }),
            success: function(valid) {
                DisplayControllerByStringError("Info", "Sent " + valid.length + " trade(s).");
                _tradeSelectedRows = [];
            },
            error: function(valid) {
                DisplayControllerError(valid);
                _tradeSelectedRows = [];
            }
        });
    }


    function onTradeBreakOutRecord(tradeNumber)
    {

        try {
            $.ajax({
                url: '@Url.Action("PullTradeBreakOutRecord", "Trade", new { area = "DomesticTrading" })',
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({ id: tradeNumber }),
                success: function (valid) {

                },
                error: function (valid) {
                    console.log(valid);
                }
            });
        }
        catch (e)
        {
            console.log(e);
        }
    }

    function additionalTradeExecutingSystem() {
        var entityGrid = $("#TradeDetails").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        var executingSystem = selectedItem["ExecutingSystem"];


        return {
            system : executingSystem
        }
    }


   function  onTradePriceAmountCalcTypeData() {
        var entityGrid = $("#TradeDetails").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        var executingSystem = selectedItem["ExecutingSystem"];

        return {
            executingSystem : executingSystem
        }
    }
    function addTradeEntityData() {
        var entityGrid = $("#TradeDetails").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        var entityId = selectedItem["EntityId"];

        return {
            entityId: entityId
        }
    }

    function onTradeRowChange(e) {
        try {
            var tab = $("#MainTabStrip").data("kendoTabStrip").select();

            if (tab.text() == 'Trade Blotter') {

                var entityGrid = $("#TradeDetails").data("kendoGrid");
                var selectedItem = entityGrid.dataItem(entityGrid.select());

                var entityId = selectedItem["EntityId"];
                var effectiveDate = selectedItem["EffectiveDate"];
                var securityNumber = selectedItem["SecurityNumber"];

                if ((securityNumber == null) || (securityNumber == ''))
                {
                    securityNumber = selectedItem["Sedol"];
                }

                var issueId = selectedItem["IssueId"];

                SidePanelUpdate(effectiveDate, entityId, issueId, securityNumber);

                if ((selectedItem.TradeStatus == '@Convert.ToInt32( StatusDetail.Transmitted )') ||
                    (selectedItem.TradeStatus == '@Convert.ToInt32( StatusDetail.Rejected )') ||
                    (selectedItem.TradeStatus == '@Convert.ToInt32( StatusDetail.Cancelled )') ||
                    (selectedItem.TradeStatus == '@Convert.ToInt32( StatusDetail.Approved )')) {
                    EnableContextMenuItem("#TradeContextMenu", "Cancel", false);
                    EnableContextMenuItem("#TradeContextMenu", "Send", false);
                    EnableContextMenuItem("#TradeContextMenu", "Bulk Update", false);
                }
                else {
                    EnableContextMenuItem("#TradeContextMenu", "Cancel", true);
                    EnableContextMenuItem("#TradeContextMenu", "Send", true);
                    EnableContextMenuItem("#TradeContextMenu", "Bulk Update", true);
                }       
            }
            else
            {
                console.log("Trade Blotter not in focus");
            }

            ReInitVirtualScroll("#TradeDetails");
            _tradeGridSelectAll = false;
        }
        catch (e) {
            console.log(e.message);
            console.log(e.message);
        }        
    }

    function showScratchPad() {
        HelperPartialWindow(
         JSON.stringify(null),
        'Scratch pad',
        700,
        600,
        '/DomesticTrading/Trade/LoadScratchpad'
        );
    }

    function onTradeRowEdit(e) {
        var entityGrid = $("#TradeDetails").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        if (selectedItem.TradeStatus != '@Convert.ToInt32(StatusDetail.Pending)') {
            $('#TradeDetails').data("kendoGrid").closeCell();
        }
        else {
            var input = e.container.find("input");
            setTimeout(function () { input.select(); });
        }
    }

    function onTradeSearchChange(e) {
        e.preventDefault();

        try {
            var cusipTextBox = document.getElementById("TradeSecuritySearchTextBox").value;

            QuickColumnGrid("#TradeDetails", cusipTextBox);
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onTradeBlotterPendingCheckBoxChange() {
        try {
            if ($("#TradeBlotterPendingCheckBox").is(':checked')) {

                QuickColumnFilter($("#TradeDetails").data("kendoGrid").dataSource, 'TradeStatus', '@Convert.ToInt32(StatusDetail.Pending)');
                $("#TradeDetails").data("kendoGrid").dataSource.read();
            }
            else {

                QuickColumnFilter($("#TradeDetails").data("kendoGrid").dataSource, 'TradeStatus', '');
                $("#TradeDetails").data("kendoGrid").dataSource.read();
            }
        }
        catch (e) {
            console.log(e.message);
        }
    }


    function onSendPendingTrades() {
        var sendTradeType = $('#SendPendingTypeDropdownList').data("kendoDropDownList").value();
        var entity = $("#TradeEntityDropdownList").data("kendoDropDownList").value();

        try {
            $.ajax({
                url: '@Url.Action("SendPendingTradeByType", "Trade", new { area = "DomesticTrading" })',
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({
                    entityId : entity,
                    type: sendTradeType
                }),
                success: function (valid) {
                    DisplayControllerByStringError("Info", "Sent " + valid.length + " trade(s).");
                },
                error: function (valid) {
                    console.log(valid);
                }
            });
        }
        catch (e) {
            console.log(e);
        }
    }

    function OnColorPreviewTradeList(list) {
        var display = '';

        $.each(list, function (i, obj) {
            if (obj.UserId == '@SessionService.User.UserId') {
                if ((obj.Marker == null) || (obj.Marker == -1)) {
                    return "";
                }
                else {
                    display += "<i class='fa fa-square' title='" + obj.Description + "' style='color:" + obj.Marker + "'></i>";
                }
            }
        });

        return display;
    }
</script>

@(
 Html.Kendo().ToolBar()
    .Name("TradeToolBar")
    .Resizable(true)
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("EffectiveDate").ToHtmlString());

        items.Add().Template(Html.Kendo().DatePicker()
                                .Name("TradeCalander")
                                .Format("yyyy-MM-dd")
                                .Value(DateTime.Now)
                            .HtmlAttributes(new { @class = "width90" })
                                .Events(events => events.Change("onTradeChange")).ToHtmlString());

        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());

        items.Add().Template(Html.Kendo().MultiSelect()
                    .Name("TradeEntityDropdownList")
                                     .TagMode(TagMode.Multiple)
                       .AutoWidth(true)
                       .Enable(true)
                       .DownArrow(true)
                       .Size(ComponentSize.Small)
                       .ClearButton(false)
                       .HtmlAttributes(new { @style = "width:100%" })
                           .Placeholder("No records selected")
                           .AutoBind(true)
                        .ItemTemplate("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                         "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                         "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                         .Events(e =>
                         {
                             e.DataBound("onTradeDefaultLoad");
                             e.Change("onTradeChange");
                         })
                         .DataTextField("Custodian")
                         .DataValueField("CompanyId")
                         .DataSource(ds =>
                         {
                             ds.Read(read => read.Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" }));
                         }).ToHtmlString());

        items.Add().Template( Html.Kendo().CheckBox()
                .Name( "TradeBlotterPending" )
                .Checked( false )
                .Label( LabelHelper.Text( "TradeBlotterPending" ) )
                .HtmlAttributes( new { id = "TradeBlotterPendingCheckBox", onclick = "onTradeBlotterPendingCheckBoxChange()" } ).ToHtmlString() );


        items.Add().Template(LabelHelper.Label("SendPendingType", "hideControl").ToHtmlString());

        items.Add().Template(Html.Kendo().DropDownListFor(m => m)
                .Name("SendPendingTypeDropdownList")
                .HtmlAttributes(new { @class= "hideControl width100", data_value_primitive = true })
                .Enable(false)
                .BindTo(Enum.GetNames(typeof(SendPendingTradeTypeEnum)).AsEnumerable())
                .Value(SendPendingTradeTypeEnum.Money.ToString()).ToHtmlString());

        items.Add().Template(Html.Kendo().Button().Name("SendPendingTradeButton").Enable(false).HtmlAttributes(new { @class="hideControl" }).Content(LabelHelper.Text("SendPendingTypeLabel")).Events(ev => ev.Click("onSendPendingTrades")).ToHtmlString());

        items.Add().Template(
    "<table ID='TradeTable'><tr><td>" +
    LabelHelper.LabelFor("TickerSearch", "TradeSecuritySearchTextBox").ToHtmlString() + "</td><td>" +
    Html.Kendo().AutoComplete().Name("TradeSecuritySearchTextBox").HtmlAttributes(new { @class = "width90" }).Events(eve => eve.Filtering("onTradeSearchChange")).Suggest(true).ToHtmlString() + "</td></tr></table>"
    ).HtmlAttributes(new { @class = "float-right" });
    }))

<hr class="hr-white">

<div id="TradeContent"  class="grid-div">
@(Html.Kendo().Grid<SL_TradeBreakOutExtendedProjection>()
        .Name("TradeDetails")
        .HtmlAttributes(new { @class = "grid" })
        .Sortable()
        .Scrollable(x => x.Virtual(true))
        .Filterable()
        .Reorderable(reorder =>
        {
            reorder.Columns(true);
        })
        .Resizable(resize =>
        {
            resize.Columns(true);
        })
        .NoRecords()
        .Editable(edit =>
        {
            edit.Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLTRade));
            edit.Mode(GridEditMode.InCell);
        })
        .ColumnMenu(menu =>
        {
            menu.Columns(true);
            menu.Filterable(true);
            menu.Sortable(true);
            menu.ComponentType( "modern" );
        } )
        .Pageable(pagable =>
        {
            pagable.Numeric(false);
            pagable.PreviousNext(false);
            pagable.Messages(config =>
            {
                config.Display("Showing {2} item(s)");
            });
        })
        .Events(events =>
        {
            events.Change("onTradeRowChange");
            events.DataBound("onTradeCheckData");
            events.Edit("onTradeRowEdit");
            events.ColumnHide("onTradeGridLayoutChange");
            events.ColumnShow("onTradeGridLayoutChange");
            events.ColumnResize("onTradeGridLayoutChange");
            events.ColumnReorder("onTradeGridLayoutChange");
        })
        .Selectable(seclect => seclect.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Row))
        .Columns(columns =>
        {
            columns.Bound(x => x.TradeStatus).GetColumnFormat(ColumnTypeEnum.String, false, "# if (TradeStatus == " + Convert.ToInt32(StatusDetail.Approved).ToString() + ") { #" +
              "<div style='text-align:center;' class='k-widget k-notification k-notification-success'><i class='fa  fa-check'></i></div>" +
           "# } else if (TradeStatus == " + Convert.ToInt32(StatusDetail.Rejected).ToString() + "){ #" +
              "<div style='text-align:center;' class='k-widget k-notification k-notification-error'><i class='fa fa-times' ></i></div>" +
             "# } else if (TradeStatus == " + Convert.ToInt32(StatusDetail.Cancelled).ToString() + "){ #" +
              "<div style='text-align:center;' class='k-widget k-notification k-notification-error'><i class='fa fa-times' ></i></div>" +
            "# } else if (TradeStatus == " + Convert.ToInt32(StatusDetail.WaitingSettle).ToString() + "){ #" +
              "<div style='text-align:center;' class='k-widget k-notification k-notification-warning'><i class='fa fa-pause-circle' ></i></div>" +
           "# } else if (TradeStatus == " + Convert.ToInt32(StatusDetail.Transmitted).ToString() + "){ #" +
              "<div style='text-align:center;' class='k-widget k-notification k-notification-info'><i class='fa fa-circle-o-notch'></i></div>" +
           "# }#", "").HtmlAttributes(new { title = "Error - #= TradeMemoInfo # " });
            columns.Bound( x => x.ExecutingSystem ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
            columns.Bound(x => x.EffectiveDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "").Hidden(true);
            columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.ActivityList).GetColumnFormat(ColumnTypeEnum.String, false, "#=OnColorPreviewTradeList(ActivityList)#", "").Title("").Filterable(false);
            columns.Bound(x => x.ClearingId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.ContraEntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "_TradesContraEntityAutoComplete");
            columns.Bound(x => x.TradeNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.ContractNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(p => p.TradeType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.IssueId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound( x => x.Sedol ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
            columns.Bound( x => x.Isin ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
            columns.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.Quick).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(p => p.SecNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.MarketPrice).GetColumnFormat(ColumnTypeEnum.Money, false, "", "");
            columns.Bound(x => x.Price).GetColumnFormat(ColumnTypeEnum.Rate, false, "", "");

            columns.Bound(x => x.BorrowQuantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(BorrowQuantity)#", "QuantityDecimalNumber");
            columns.Bound(x => x.BorrowAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(BorrowAmount)#", "DecimalNumber");

            columns.Bound(x => x.LoanQuantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(LoanQuantity)#", "QuantityDecimalNumber");
            columns.Bound(x => x.LoanAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(LoanAmount)#", "DecimalNumber");


            columns.Bound(x => x.CollateralFlag).GetColumnFormat(ColumnTypeEnum.String, false, "", "_CollateralFlagDropdown");
            columns.Bound(x => x.RebateRate).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(RebateRate)#", "RebateRateNumber");
            columns.Bound(x => x.RebateRateId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.ProfitId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.Mark).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(Mark)#", "RebateRateNumber");
            columns.Bound(x => x.MarkParameterId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound( x => x.CashSettleDate).GetColumnFormat( ColumnTypeEnum.Date, false, "", "Date" ).Hidden( true );
            columns.Bound(x => x.SecuritySettleDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "Date").Hidden(true);
            columns.Bound( x => x.TermDate ).GetColumnFormat( ColumnTypeEnum.Date, false, "", "Date" ).Hidden( true );
            columns.Bound(x => x.TradeDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "Date");
            columns.Bound(x => x.CurrencyCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "_CurrencyDropdown");
            columns.Bound(x => x.SecurityLoc).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.CashLoc).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.CostOfFunds).GetColumnFormat(ColumnTypeEnum.Margin, false, "#=GetRateDirection(CostOfFunds)#", "");
            columns.Bound(x => x.DividendRate).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound( x => x.DepositoryStatus ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
            columns.Bound(x => x.IncomeAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(IncomeAmount)#", "");
            columns.Bound(x => x.ExcessNetExposure).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(ExcessNetExposure)#", "");
            columns.Bound(x => x.TradeFlag).GetColumnFormat(ColumnTypeEnum.String, false, "# if (TradeFlag == 'P') { #<i class='fa  fa-info-circle' style='color:blue;'></i># } else if (TradeFlag == 'Success') { #<i class='fa  fa-exclamation-circle' style='color:green;'></i># } else if (TradeFlag != '') { #<i class='fa fa-exclamation-triangle' style='color:red;'></i># } #", "").Title("").HtmlAttributes(new { title = "Status - #= TradeFlag # " });
            columns.Bound(x => x.TradeStatus).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.FeeType).GetColumnFormat(ColumnTypeEnum.String, false, "", "_TradeFeeTypeDropdown");
            columns.Bound(x => x.FeeOffset).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(FeeOffset)#", "RebateRateNumber");
            columns.Bound(x => x.DeliveryCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "_TradeDeliveryCodeDropdown");
            columns.Bound(x => x.AmountCalcType).GetColumnFormat(ColumnTypeEnum.String, false, "", "_TradeAmountCalcTypeDropdown");
            columns.Bound(x => x.Callable).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.Comment).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.BatchCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.ExpectedEndDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "Date");
            columns.Bound(x => x.PriceCalcType).GetColumnFormat(ColumnTypeEnum.String, false, "", "_TradePriceAmountCalcTypeDropdown");
            columns.Bound(x => x.DateTimeId).GetColumnFormat(ColumnTypeEnum.Time, false, "", "");
            columns.Bound(x => x.TradeMemoInfo).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.AltEntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound( x => x.UserName ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        })
        .DataSource(dataSource => dataSource
        .Ajax()
        .Sort(sort => sort.Add(x => x.TradeNumber).Descending())
        .ServerOperation(false)
        .PageSize(75)
        .Read(read => read.Action("ReadTradeSummary", "Trade", new { area = "DomesticTrading" }).Data("additionalTradeData"))
        .Update(update => update.Action("UpdateTradeBreakOut", "Trade", new { area = "DomesticTrading" }))
        .AutoSync(true)
            .Model(model =>
            {
                model.Id(x => x.TradeNumber);
                model.Field(x => x.EntityId).Editable(false);
                model.Field(x => x.ClearingId).Editable(false);
                model.Field(x => x.TradeType).Editable(false);
                model.Field(x => x.IssueId).Editable(false);
                model.Field(x => x.Quick).Editable(false);
                model.Field(x => x.Ticker).Editable(false);
                model.Field(x => x.SecurityNumber).Editable(false);
                model.Field(x => x.ExecutingSystem).Editable(false);
                model.Field(x => x.Isin).Editable(false);
                model.Field(x => x.Sedol).Editable(false);
                model.Field(x => x.IncomeAmount).Editable(false);
                model.Field(x => x.TradeFlag).Editable(false);
                model.Field(x => x.RebateRate).Editable(true).DefaultValue(0);
                model.Field( x => x.DepositoryStatus ).Editable( false );
                model.Field(x => x.TradeStatus).Editable(false);
                model.Field(x => x.DateTimeId).Editable(false);
                model.Field(x => x.DividendRate).Editable(false);
            })
            .Aggregates(agg =>
            {
                agg.Add(x => x.BorrowQuantity).Sum();
                agg.Add(x => x.BorrowAmount).Sum();
                agg.Add(x => x.LoanQuantity).Sum();
                agg.Add(x => x.LoanAmount).Sum();
                agg.Add(x => x.IncomeAmount).Sum();
                agg.Add(x => x.ExcessNetExposure).Sum();
            })
            .Events(events => events
                .RequestStart("onTradeRequestStart")
                .RequestEnd("onTradeRequestEnd")
                .Error("onTradeError"))))
    </div>
<button id="copyClipboardButton" style="display:none"></button>

@(Html.Kendo().ContextMenu()
    .Name("TradeContextMenu")
    .Target("#TradeDetails")
    .Events(events => events.Select("onTradeContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("Send").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLTRade));
        items.Add().Text("Bulk Update").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLTRade));
        items.Add().Text("Mirror").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLTRade));
        items.Add().Text("Cancel").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLTRade));
        items.Add().Separator(true);
        items.Add().Text("AutoFit Columns").Enabled(true);
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
        items.Add().Separator(true);
        items.Add().Text("Select All").Enabled(true);
        items.Add().Text("Copy").Enabled(true).HtmlAttributes(new { ID = "TradeDetailCopy" });
        items.Add().Text("Export To Excel").Enabled(true);
    }))
