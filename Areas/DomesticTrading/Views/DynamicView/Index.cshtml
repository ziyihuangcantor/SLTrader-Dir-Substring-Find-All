@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools

<script type="text/javascript">
    var _originalDynamicLayoutGrid = null;
    var _originalDynamicLayoutToolBar = null;

    $('#SharedLabelCheckBox').change(function () {
        RefreshGrid("#DynamicLayoutListGrid");
    });

    $(document).ready(function () {
        setTimeout(function () {
            _originalDynamicLayoutGrid = $("#DynamicLayoutListGrid").data('kendoGrid').getOptions();            
            _originalDynamicLayoutToolBar = $("#DynamicLayoutListGrid .k-grid-toolbar").html();

            LoadGridLayout("#DynamicLayoutListGrid");   

            $("#DynamicLayoutListGrid .k-grid-toolbar").html(_originalDynamicLayoutToolBar);
            $("#DynamicLayoutListGrid .k-grid-toolbar").addClass("k-grid-top");
        }, 5);
    });

    function onDynamicLayoutLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#DynamicLayoutListGrid");
        }, 5);
    }

    function onDynamicLayoutCheckData() {
        CheckGridData('#DynamicLayoutListGrid');
    }

    function onDynamicLayoutError(e) {
        DisplayControllerError(e);
    }

    function additionalDynamicLayoutData() {
        var entity = $("#DynamicLayoutDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity,
        };
    }

    function additionalCreateDynamicLayoutData() {
            var entity = $("#DynamicLayoutDropdownList").data("kendoDropDownList").value();

            return {
                entityId: entity,
                DynamicLayoutName: "New-DynamicLayout",
                query: "New-Query",
                message: "New-Message",
                activityType: '@SL_ActivityType.Activity',
                processType:'@SL_ProcessType.Trade'
            };
    }

    function onDynamicLayoutEdit(e) {
        var input = e.container.find("input");
        setTimeout(function () {
            input.select();
        }, 25);
    }

    function onDynamicLayoutDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function(valid) {
                    userPreference = valid;

                    var dropdownList = $('#DynamicLayoutDropdownList').data("kendoDropDownList");

                    dropdownList.select(function(dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $('#DynamicLayoutListGrid').data("kendoGrid").dataSource.read();
                },
                error: function(valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onDynamicLayoutChange() {
        $("#DynamicLayoutListGrid").data("kendoGrid").dataSource.read();
    }

    $(function () {
        $('#DynamicLayoutListGrid').on('click', '.enabledDynamicLayoutChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#DynamicLayoutListGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('Enabled', checked);
            grid.dataSource.sync();
        });
    });

    function onDynamicLayoutListContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#DynamicLayoutListGrid");
                break;

            case "Reset Filter":
                ResetFilter("#DynamicLayoutListGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#DynamicLayoutListGrid");

                $("#DynamicLayoutListGrid").data('kendoGrid').setOptions(_originalDynamicLayoutGrid);
                $("#DynamicLayoutListGrid .k-grid-toolbar").html(_originalDynamicLayoutToolBar);
                $("#DynamicLayoutListGrid .k-grid-toolbar").addClass("k-grid-top");
                $('#DynamicLayoutListGrid').data("kendoGrid").dataSource.read();
                break;

            case 'Unsort':
                UnsortGrid("#DynamicLayoutListGrid");
                break;
        }
    }
</script>

@(
 Html.Kendo().ToolBar()
    .Name("DynamicLayoutToolBar")
    .Resizable(true)
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
        items.Add().Template(Html.Kendo().DropDownList()
                            .Name("DynamicLayoutDropdownList")
                            .HtmlAttributes(new { @class = "width90" }) 
                            .DataTextField("Custodian")
                            .DataValueField("CompanyId")
                            .OptionLabel(LabelHelper.Text("OptionLabel"))
                            .AutoBind(true)
                            .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                            .Events(events => events.Change("onDynamicLayoutChange").DataBound("onDynamicLayoutDefaultLoad").Open("onContraEntityAutoCompleteResize"))
                            .DataSource(dataSource => dataSource
                            .Read(read => read
                            .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                            .SelectedIndex(0).ToHtmlString());
    }))

<hr class="hr-white">

<div id="DynamicLayoutContent"  class="grid-div">
    @(
 Html.Kendo().Grid<SL_DynamicGridLayout>()
        .Name( "DynamicLayoutListGrid" )
        .Sortable()
        .HtmlAttributes( new { @class = "grid" } )
        .Scrollable()
        .Filterable()
        .NoRecords()
        .Selectable( selectable => selectable.Mode( GridSelectionMode.Single ) )
        .Navigatable()
        .Resizable( cols => cols.Columns( bool.Parse( DataSystemValues.LoadSystemValue( "ResizeableGrid", "true" ) ) ) )
               .Events(events =>
               {
                   events.DataBound("onDynamicLayoutCheckData");
                   events.Edit("onDynamicLayoutEdit");
                   events.ColumnHide("onDynamicLayoutLayoutChange");
                   events.ColumnShow("onDynamicLayoutLayoutChange");
                   events.ColumnResize("onDynamicLayoutLayoutChange");
                   events.ColumnReorder("onDynamicLayoutLayoutChange");
               })
        .Columns( columns =>
        {
            columns.Bound(x => x.SLDynamicGridLayout).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.LayoutName).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.GridName).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.ColumnName).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.ColumnOrder).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.FilterName).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        } )
        .ColumnMenu( menu =>
        {
            menu.Columns( true );
            menu.Filterable( true );
            menu.Sortable( true );
            menu.ComponentType( "modern" );
        } )
         .DataSource( dataSource => dataSource
            .Ajax()
            .AutoSync( true )
            .Read( read => read.Action("LoadDynamicLayoutByEntity", "BoxCalculation", new { area = "DomesticTrading" } ).Data( "additionalDynamicLayoutData" ) )
     ))
</div>

@(Html.Kendo().ContextMenu()
.Name("DynamicLayoutContextMenu")
    .Target("#DynamicLayoutListGrid")
    .Events(events => events.Select("onDynamicLayoutListContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
    }))