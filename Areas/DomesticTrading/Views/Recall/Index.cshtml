@using BondFire.Entities.Projections
@using BondFire.Entities
@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools
<style scoped>
    #RecallButton.zeroclipboard-is-hover {
        background-color: #1ba1e2;
    }

    #RecallToolBar .k-checkbox-label {
        padding-left: 20px;
    }

    #RecallTable td {
        margin: 0px;
        padding: 0px;
    }

    #RecallToolBar.k-widget .k-multiselect input {
        display: none;
    }
</style>

<script type="text/javascript">


    function onSendPendingRecalls(e) {
        if (e) {
            var summaryType = $("#RecallSummaryDetailDropdownList").data("kendoDropDownList").value();

            if (summaryType == '@RecallDetailTypeEnum.Detail') {
                var dataItems = [];

                var grid = $('#RecallSummaryGrid').data('kendoGrid');
                var rows = grid.select();

                rows.each(function (index, row) {
                    var selectedItem = grid.dataItem(row);
                    dataItems.push(selectedItem);
                });

                $.ajax({
                    url: '@Url.Action("ProcessPendingRecalls", "ContractRelated", new { Area = "DomesticTrading" })',
                    type: 'POST',
                    contentType: 'application/json;',
                    data: JSON.stringify({ items: dataItems }),
                    success: function (valid) {
                        DisplayControllerByStringError("Info", "Sent " + valid.length + " recall(s).");
                    },
                    error: function (valid) {
                        DisplayError(valid);
                    }
                })
            }
            else {
                var dataItems = [];

                var grid = $('#RecallExposureGrid').data('kendoGrid');
                var rows = grid.select();

                rows.each(function (index, row) {
                    var selectedItem = grid.dataItem(row);
                    dataItems.push(selectedItem);
                });

                $.ajax({
                    url: '@Url.Action("ProcessPendingRecallsExposure", "ContractRelated", new { Area = "DomesticTrading" })',
                    type: 'POST',
                    contentType: 'application/json;',
                    data: JSON.stringify({ items: dataItems }),
                    success: function (valid) {
                        DisplayControllerByStringError("Info", "Sent " + valid.length + " recall(s).");
                    },
                    error: function (valid) {
                        DisplayError(valid);
                    }
                })
            }
        }
    }


    $('#SharedLabelCheckBox').change(function () {
        try {
            var summaryType = $("#RecallSummaryDetailDropdownList").data("kendoDropDownList").value();

            if (summaryType == '@RecallDetailTypeEnum.Detail') {
                RefreshGrid("#RecallSummaryGrid");
            }
            else {
                RefreshGrid("#RecallExposureGrid");
            }
        }
        catch (e) { }
    });

    $.connection.hub.reconnected(function () {
        try {
            var summaryType = $("#RecallSummaryDetailDropdownList").data("kendoDropDownList").value();

            if (summaryType == '@RecallDetailTypeEnum.Detail') {
                $('#RecallSummaryGrid').data("kendoGrid").dataSource.read();
            }
            else {
                $('#RecallExposureGrid').data("kendoGrid").dataSource.read();
            }
        } catch (e) { }
    });

    var _originalRecallGrid = null;
    var _originalRecallExposureGrid = null;


    var _originalRecallGridSelectAll = false;
    var _originalRecallExposureGridSelectAll = false;


    var _recallSelectedRows = [];
    var _recallExposureSelectedRows = [];

    $(document).ready(function () {
        setTimeout(function () {
            _originalRecallGrid = $('#RecallSummaryGrid').data('kendoGrid').getOptions();
            _originalRecallExposureGrid = $('#RecallExposureGrid').data('kendoGrid').getOptions();

            LoadGridLayout("#RecallSummaryGrid");
            LoadGridLayout("#RecallExposureGrid");
        }, 5);

        var clientRecallButton = new ZeroClipboard(document.getElementById("RecallButton"));

        clientRecallButton.on("ready", function (readyEvent) {
            clientRecallButton.on("copy", function (event) {
                var data = KendoGridToText("#RecallSummaryGrid", "RecallSummaryGrid", false);
                clientRecallButton.setText(data);
            });
        });

        $("#RecallExposureGrid").hide();
    });

    function onRecallGridLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#RecallSummaryGrid");
        }, 5);
    }

    function onRecallExposureLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#RecallExposureGrid");
        }, 5);
    }

    function onRecallSelectAll(e) {
        try {
            var recallGrid = $("#RecallSummaryGrid").data("kendoGrid");
            recallGrid.select(recallGrid.tbody.find(">tr"));

            _originalRecallGridSelectAll = true;
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onRecallExposureSelectAll(e) {
        try {
            var recallGrid = $("#RecallExposureGrid").data("kendoGrid");
            recallGrid.select(recallGrid.tbody.find(">tr"));

            _originalRecallExposureGridSelectAll = true;
        }
        catch (e) {
            console.log(e.message);
        }
    }


    function onRecallRequestStart(e) {
        traderHubProxy.off('updateRecall');
    }

    function onRecallRequestEnd(e) {
        traderHubProxy.on('updateRecall', function (update) {
            updateRecallRow(update);
        });
    }

    function onRecallExposureRequestStart(e) {
        traderHubProxy.off('updateRecallExposure');
    }

    function onRecallExposureRequestEnd(e) {
        traderHubProxy.on('updateRecallExposure', function (update) {
            updateRecallExposureRow(update);
        });
    }
    

    function onListFind(list, value) {

        for (var i = 0; i < list.length; i++) {

            if (list[i].CompanyId == value) {
                return true;
            }
        }

        return false;
    }


    function updateRecallRow(update) {
        try {        
    
            var entity = $("#RecallEntityDropdownList").data("kendoMultiSelect").value();

            $.each(update, function (i, obj) {
                if (onListFind(entity, obj.EntityId) == true) {

                    if ($("#RecallSummaryGrid").length) {
                        var data = $("#RecallSummaryGrid").data("kendoGrid").dataSource;

                        var dateTimeId = kendo.parseDate(obj['DateTimeId']);
                        obj['DateTimeId'] = dateTimeId;

                        var RecallDate = kendo.parseDate(obj['RecallDate']);
                        obj['RecallDate'] = RecallDate;

                        var BuyInDate = kendo.parseDate(obj['BuyInDate']);
                        obj['BuyInDate'] = BuyInDate;

                        data.pushUpdate(obj);
                    }
                }
            });
        }
        catch (e) {
            traderHubProxy.off('updateRecall');
        }
    }


    function updateRecallExposureRow(update) {

        try {
            var entity = $("#RecallEntityDropdownList").data("kendoMultiSelect").value();

            $.each(update, function (i, obj) {
                if (onListFind(entity, obj.EntityId) == true) {
                    if ($("#RecallExposureGrid").length) {

                        var data = $("#RecallExposureGrid").data("kendoGrid").dataSource;

                        var dateTimeId = kendo.parseDate(obj['DateTimeId']);
                        obj['DateTimeId'] = dateTimeId;

                        var RecallDate = kendo.parseDate(obj['RecallDate']);
                        obj['RecallDate'] = RecallDate;

                        var BuyInDate = kendo.parseDate(obj['BuyInDate']);
                        obj['BuyInDate'] = BuyInDate;

                        if (obj['TradeType'] == '@Convert.ToInt32(TradeType.StockBorrow)')
                        {
                            var LocalRecallDate = kendo.parseDate(obj['BorrowRecallDate']);
                            obj['BorrowRecallDate'] = LocalRecallDate;

                            var LocalBuyInDate = kendo.parseDate(obj['BorrowBuyInDate']);
                            obj['BorrowBuyInDate'] = LocalBuyInDate;
                        }
                        else
                        {
                            var LocalRecallDate = kendo.parseDate(obj['LoanRecallDate']);
                            obj['LoanRecallDate'] = LocalRecallDate;

                            var LocalBuyInDate = kendo.parseDate(obj['LoanBuyInDate']);
                            obj['LoanBuyInDate'] = LocalBuyInDate;
                        }

                        data.pushUpdate(obj);
                    }
                }
            });
        }
        catch (e) {
            console.log(e);
            traderHubProxy.off('updateRecallExposure');
        }        
    }

    function onRecallReturn(e) {
        if (e) {
            var dataItems = [];

            var grid = $('#RecallSummaryGrid').data('kendoGrid');
            var rows = grid.select();

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });

            HelperPartialWindow(
                JSON.stringify(dataItems),
                'Book Returns',
                1100,
                450,
                '/DomesticTrading/ContractRelated/Load_ReturnByRecall'
            );
        }
    }


    function onRecallExposureReturn(e) {
        if (e) {
            var dataItems = [];

            var grid = $('#RecallExposureGrid').data('kendoGrid');
            var rows = grid.select();

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });

            HelperPartialWindow(
                JSON.stringify(dataItems),
                'Book Returns',
                1100,
                450,
                '/DomesticTrading/ContractRelated/Load_ReturnByRecallExposure'
            );
        }
    }

    function onRecallUpdatePending(e) {
        if (e) {
            var dataItems = [];

            var grid = $('#RecallSummaryGrid').data('kendoGrid');
            var row = grid.select();

            HelperPartialWindow(
                JSON.stringify({
                    recall: row
                }),
                'Update Pending Recalls',
                1100,
                450,
                '/DomesticTrading/Recall/Load_PendingRecallUpdate'
            );
        }
    }

    function onRecallContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'Return':
                onRecallReturn(true);
                break;

            case 'Cancel':
                onRecallDelete(true);
                break;

            case 'Buy-In':
                onRecallBuyIn(true);
                break;
            case 'Update Pending':
                onPendingRecallUpdate(true);
                break;

            case 'AutoFit Columns':
                resizeGridColumns("#RecallSummaryGrid");
                break;

            case 'Unsort':
                onRecallUnsortGrid("#RecallSummaryGrid");
                break;

            case 'Select All':
                onRecallSelectAll(true);
                break;

            case 'Actions':
                onRecallAction(true);
                break;


            case "Reset Filter":
                $("#RecallSecuritySearchTextBox").val("");
                ResetFilter("#RecallSummaryGrid");
                break;


            case 'Reset Grid':
                ResetUserLayout("#RecallSummaryGrid");
                $('#RecallSummaryGrid').data('kendoGrid').setOptions(_originalRecallGrid);
                break;

            case 'Export To Excel':
                exportToRecallExcel();
                break;
        }
    }

    function onRecallExposureContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case "Return":
                onRecallExposureReturn(e);
                break;

            case 'Cancel':
                onRecallExposureDelete(true);
                break;

            case 'AutoFit Columns':
                resizeGridColumns("#RecallExposureGrid");
                break;

            case 'Update Pending':
                onPendingRecallUpdate(true);
                break;


            case 'Unsort':
                onRecallUnsortGrid("#RecallExposureGrid");
                break;

            case 'Select All':
                onRecallExposureSelectAll(true);
                break;

            case "Reset Filter":
                $("#RecallSecuritySearchTextBox").val("");
                ResetFilter("#RecallExposureGrid");
                break;


            case 'Reset Grid':
                ResetUserLayout("#RecallExposureGrid");
                $('#RecallExposureGrid').data('kendoGrid').setOptions(_originalRecallExposureGrid);
                break;

            case 'Export To Excel':
                exportToRecallExposureExcel();
                break;
        }
    }


    function onRecallUnsortGrid(e) {
        UnsortGrid(e);
    }

    function exportToRecallExcel() {
        KendoGridToCSVConvertor("#RecallSummaryGrid", 'RecallSummaryDetails', _originalRecallGridSelectAll);
    }

    function exportToRecallExposureExcel() {
        KendoGridToCSVConvertor("#RecallExposureGrid", 'RecallExposureGrid', _originalRecallExposureGridSelectAll);
    }

    function onRecallDelete(e) {
        if (e) {
            var dataItems = [];

            var grid = $('#RecallSummaryGrid').data('kendoGrid');
            var rows = grid.select();

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });

            $.ajax({
                url: '@Url.Action("Delete_Recall", "Recall", new { Area = "DomesticTrading" })',
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({ recalls: dataItems }),
                success: function (valid) {
                    DisplayControllerByStringError("Info", "Canceled " + valid.length + " recall(s).");
                },
                error: function (valid) {
                    DisplayError(valid);
                }
            })
        }
    }


    function onRecallExposureDelete(e) {
        if (e) {
            var dataItems = [];

            var grid = $('#RecallExposureGrid').data('kendoGrid');
            var rows = grid.select();

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });

            $.ajax({
                url: '@Url.Action("Delete_RecallExposure", "Recall", new { Area = "DomesticTrading" })',
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({ recalls: dataItems }),
                success: function (valid) {
                    DisplayControllerByStringError("Info", "Canceled " + valid.length + " recall(s).");
                },
                error: function (valid) {
                    DisplayError(valid);
                }
            })
        }
    }

    function onRecallBuyIn(e) {
        if (e) {
            var dataItems = [];

            var grid = $('#RecallSummaryGrid').data('kendoGrid');
            var rows = grid.select();

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });

            $.ajax({
                url: '@Url.Action("BuyIn_Recall","Recall")',
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({ recalls: dataItems }),
                success: function (valid) {
                    DisplayControllerByStringError("Info", "Marked " + valid.length + " recall(s) for BuyIn.");
                },
                error: function (valid) {
                    DisplayError(valid);
                }
            });
        }
    }

    function additionalRecallData() {
        var datepicker = $("#RecallCalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entity = $("#RecallEntityDropdownList").data("kendoMultiSelect");

        return {
            entityId: entity.value(),
            effectiveDate: value
        };
    }

    function onRecallAction(e) {
        if (e) {
            var grid = $("#RecallSummaryGrid").data("kendoGrid");
            var selectedItem = grid.dataItem(grid.select());

            HelperPartialWindow(
                JSON.stringify(selectedItem),
                'Recall Actions',
                490,
                490,
                '/DomesticTrading/Recall/Load_RecallAction'
            );
        }
    }


    function onPendingRecallUpdate(e) {
        if (e) {

            var summaryType = $("#RecallSummaryDetailDropdownList").data("kendoDropDownList").value();

            if (summaryType == '@RecallDetailTypeEnum.Detail') {
                var grid = $("#RecallSummaryGrid").data("kendoGrid");
                var selectedItem = grid.dataItem(grid.select());

                HelperPartialWindow(
                    JSON.stringify(selectedItem),
                    'Update Pending Recall',
                    490,
                    490,
                    '/DomesticTrading/Recall/Load_PendingRecallUpdate'
                );
            }
            else {
                var grid = $("#RecallExposureGrid").data("kendoGrid");
                var selectedItem = grid.dataItem(grid.select());

                HelperPartialWindow(
                    JSON.stringify(selectedItem),
                    'Update Pending Recall',
                    490,
                    490,
                    '/DomesticTrading/Recall/Load_PendingRecallExposureUpdate'
                );
            }
        }
    }

    function onRecallDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreferenceMultiple',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    userPreference = valid;

                    var dropdownList = $('#RecallEntityDropdownList').data("kendoMultiSelect");

                    dropdownList.value(userPreference);

                    var summaryType = $("#RecallSummaryDetailDropdownList").data("kendoDropDownList").value();

                    if (summaryType == '@RecallDetailTypeEnum.Detail') {
                        $('#RecallSummaryGrid').data("kendoGrid").dataSource.read();
                    } else {
                        $('#RecallExposureGrid').data("kendoGrid").dataSource.read();
                    }

                    $("#RecallActiveCheckBox").click();
                },
                error: function(valid) {
                    userPreference = null;
                }
            });
        } catch (e) {
            console.log(e.message);
        }        
    }

    function onRecallRowChange(e) {
        _recallSelectedRows = [];

        try {
            _originalRecallGridSelectAll = false;

            var tab = $("#MainTabStrip").data("kendoTabStrip").select();

            if (tab.text() == 'Recalls') {


                var entityGrid = $("#RecallSummaryGrid").data("kendoGrid");
                var selectedItem = entityGrid.dataItem(entityGrid.select());

                var entityId = selectedItem["EntityId"];
                var effectiveDate = selectedItem["EffectiveDate"];
                var securityNumber = selectedItem["SecurityNumber"];
                var issueId = selectedItem["IssueId"];

                SidePanelUpdate(effectiveDate, entityId, issueId, securityNumber);

                if ((selectedItem.Status == '@Convert.ToInt32(SL_RecallStatus.PEND)') ||
                    (selectedItem.Status == '@Convert.ToInt32(SL_RecallStatus.OPEN)') ||
                    (selectedItem.Status == '@Convert.ToInt32(SL_RecallStatus.PARTIAL)') ||
                    (selectedItem.Status == '@Convert.ToInt32(SL_RecallStatus.ACTIVE)') ||
                    (selectedItem.Status == '@Convert.ToInt32(SL_RecallStatus.ADD)')) {


                    if (selectedItem.TradeType == '@Convert.ToInt32(TradeType.StockBorrow)') {
                        EnableContextMenuItem("#RecallContextMenu", "Return", true);
                    } else {
                        EnableContextMenuItem("#RecallContextMenu", "Return", false);
                    }

                    if (selectedItem.Status == '@Convert.ToInt32(SL_RecallStatus.PEND)') {
                        EnableContextMenuItem("#RecallContextMenu", "Update Pending", true);
                    } else {
                        EnableContextMenuItem("#RecallContextMenu", "Update Pending", false);
                    }

                    EnableContextMenuItem("#RecallContextMenu", "Cancel", true);
                    EnableContextMenuItem("#RecallContextMenu", "Buy-In", true);
                } else {
                    EnableContextMenuItem("#RecallContextMenu", "Return", false);
                    EnableContextMenuItem("#RecallContextMenu", "Cancel", false);
                    EnableContextMenuItem("#RecallContextMenu", "Buy-In", false);
                    EnableContextMenuItem("#RecallContextMenu", "Update Pending", false);
                }
            }
        } catch (e) {
            console.log(e);
        }
    }

    function onRecallExposureRowChange(e) {
        _recallExposureSelectedRows = [];

        _originalRecallExposureGridSelectAll = false;

        var tab = $("#MainTabStrip").data("kendoTabStrip").select();

        if (tab.text() == 'Recalls') {


            try {
                var entityGrid = $("#RecallExposureGrid").data("kendoGrid");
                var selectedItem = entityGrid.dataItem(entityGrid.select());

                var entityId = selectedItem["EntityId"];
                var effectiveDate = selectedItem["EffectiveDate"];
                var securityNumber = selectedItem["SecurityNumber"];
                var issueId = selectedItem["IssueId"];

                SidePanelUpdate(effectiveDate, entityId, issueId, securityNumber);

                if (selectedItem.TradeType == '@Convert.ToInt32(TradeType.StockBorrow)') {
                    if ((selectedItem.BorrowStatus == '@Convert.ToInt32(SL_RecallStatus.PEND)') ||
                        (selectedItem.BorrowStatus == '@Convert.ToInt32(SL_RecallStatus.OPEN)') ||
                        (selectedItem.BorrowStatus == '@Convert.ToInt32(SL_RecallStatus.PARTIAL)') ||
                        (selectedItem.BorrowStatus == '@Convert.ToInt32(SL_RecallStatus.ACTIVE)') ||
                        (selectedItem.BorrowStatus == '@Convert.ToInt32(SL_RecallStatus.ADD)')) {

                        EnableContextMenuItem("#RecallExposureContextMenu", "Return", true);
                        EnableContextMenuItem("#RecallExposureContextMenu", "Update Pending", false);
                        EnableContextMenuItem("#RecallExposureContextMenu", "Cancel", true);
                        EnableContextMenuItem("#RecallExposureContextMenu", "Buy-In", true);
                    }

                    if (selectedItem.BorrowStatus == '@Convert.ToInt32(SL_RecallStatus.PEND)') {
                        EnableContextMenuItem("#RecallExposureContextMenu", "Update Pending", true);
                    }
                } else if (selectedItem.TradeType == '@Convert.ToInt32(TradeType.StockLoan)') {
                    if ((selectedItem.LoanStatus == '@Convert.ToInt32(SL_RecallStatus.PEND)') ||
                        (selectedItem.LoanStatus == '@Convert.ToInt32(SL_RecallStatus.OPEN)') ||
                        (selectedItem.LoanStatus == '@Convert.ToInt32(SL_RecallStatus.PARTIAL)') ||
                        (selectedItem.LoanStatus == '@Convert.ToInt32(SL_RecallStatus.ACTIVE)') ||
                        (selectedItem.LoanStatus == '@Convert.ToInt32(SL_RecallStatus.ADD)')) {

                        EnableContextMenuItem("#RecallExposureContextMenu", "Return", false);

                        EnableContextMenuItem("#RecallExposureContextMenu", "Cancel", true);
                        EnableContextMenuItem("#RecallExposureContextMenu", "Buy-In", true);
                    }


                    if (selectedItem.LoanStatus == '@Convert.ToInt32(SL_RecallStatus.PEND)') {
                        EnableContextMenuItem("#RecallExposureContextMenu", "Update Pending", true);
                    }
                }
                else {
                    EnableContextMenuItem("#RecallExposureContextMenu", "Return", false);
                    EnableContextMenuItem("#RecallExposureContextMenu", "Cancel", false);
                    EnableContextMenuItem("#RecallExposureContextMenu", "Buy-In", false);
                    EnableContextMenuItem("#RecallExposureContextMenu", "Update Pending", false);
                }
            }
            catch (e) {
                console.log(e.message);
            }

        }
    }

    function onRecallError(e) {
        console.log(e.message);
    }

    function onRecallCheckData() {
        CheckGridData('#RecallSummaryGrid');
    }

    function onRecallExposureCheckData() {
        CheckGridData('#RecallExposureGrid');
    }


    function onRecallChange() {

        var summaryType = $("#RecallSummaryDetailDropdownList").data("kendoDropDownList").value();

        if (summaryType == '@RecallDetailTypeEnum.Detail') {
            $('#RecallSummaryGrid').data("kendoGrid").dataSource.read();
        }
        else
        {
            $('#RecallExposureGrid').data("kendoGrid").dataSource.read();
        }
    }

    function onRecallSearchChange(e) {
        e.preventDefault();

        try {

            var summaryType = $("#RecallSummaryDetailDropdownList").data("kendoDropDownList").value();

            if (summaryType == '@RecallDetailTypeEnum.Detail') {

                var cusipTextBox = document.getElementById("RecallSecuritySearchTextBox").value;
                
                QuickColumnGrid("#RecallSummaryGrid", cusipTextBox);      
            }
            else {

                var cusipTextBox = document.getElementById("RecallSecuritySearchTextBox").value;

                QuickColumnGrid("#RecallExposureGrid", cusipTextBox);           
            }

        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onRecallSummaryDetailChange(e) {
        var summaryType = $("#RecallSummaryDetailDropdownList").data("kendoDropDownList").value();

        var pendingChecked = $("#RecallPendingCheckBox").is(':checked');
        var activeChecked = $("#RecallActiveCheckBox").is(':checked');

        console.log(pendingChecked + ' ' + activeChecked);

        $("#RecallPendingCheckBox").prop("checked", false);
        $("#RecallActiveCheckBox").prop("checked", false);

        if (summaryType == '@RecallDetailTypeEnum.Exposure') {
            $("#RecallSecuritySearchTextBox").val("");
            $("#RecallSummaryGrid").data("kendoGrid").dataSource.filter({});
            $("#RecallSummaryGrid").hide();
            $("#RecallExposureGrid").show();
            RefreshGrid("#RecallExposureGrid");
            $("#RecallExposureGrid").data("kendoGrid").dataSource.read();

            if (pendingChecked == true) {
                $("#RecallPendingCheckBox").click();
            }

            if (activeChecked == true) {
                $("#RecallActiveCheckBox").click();
            }
        }
        else {
            $("#RecallSecuritySearchTextBox").val("");
            $("#RecallExposureGrid").data("kendoGrid").dataSource.filter({});
            $("#RecallExposureGrid").hide();
            $("#RecallSummaryGrid").show();
            RefreshGrid("#RecallSummaryGrid");
            $("#RecallSummaryGrid").data("kendoGrid").dataSource.read();

            if (pendingChecked == true) {
                $("#RecallPendingCheckBox").click();
            }

            if (activeChecked == true) {
                $("#RecallActiveCheckBox").click();
            }
        }
    }

    function onRecallPendingCheckBoxChange() {

        var summaryType = $("#RecallSummaryDetailDropdownList").data("kendoDropDownList").value();

        if (summaryType == '@RecallDetailTypeEnum.Detail') {
            try {
                if ($("#RecallPendingCheckBox").is(':checked')) {

                    QuickColumnFilter($("#RecallSummaryGrid").data("kendoGrid").dataSource, 'IsPendingRecall', 'true');
                    $("#RecallSummaryGrid").data("kendoGrid").dataSource.read();
                }
                else {

                    QuickColumnFilter($("#RecallSummaryGrid").data("kendoGrid").dataSource, 'IsPendingRecall', '');
                    $("#RecallSummaryGrid").data("kendoGrid").dataSource.read();
                }
            }
            catch (e) {
                console.log(e.message);
            }
        }
        else {
            try {
                if ($("#RecallPendingCheckBox").is(':checked')) {

                    QuickColumnFilter($("#RecallExposureGrid").data("kendoGrid").dataSource, 'IsPendingRecall', 'true');
                    $("#RecallExposureGrid").data("kendoGrid").dataSource.read();
                }
                else {

                    QuickColumnFilter($("#RecallExposureGrid").data("kendoGrid").dataSource, 'IsPendingRecall', '');
                    $("#RecallExposureGrid").data("kendoGrid").dataSource.read();
                }
            }
            catch (e) {
                console.log(e.message);
            }
        }
    }

    function onRecallActiveCheckBoxChange() {

        var summaryType = $("#RecallSummaryDetailDropdownList").data("kendoDropDownList").value();

        if (summaryType == '@RecallDetailTypeEnum.Detail') {
            try {
                if ($("#RecallActiveCheckBox").is(':checked')) {
                    QuickColumnFilterWithOperator($("#RecallSummaryGrid").data("kendoGrid").dataSource, 'Status', 'neq', '@Convert.ToInt32(SL_RecallStatus.CLOSED)');

                    $("#RecallSummaryGrid").data("kendoGrid").dataSource.read();
                }
                else {

                    QuickColumnFilter($("#RecallSummaryGrid").data("kendoGrid").dataSource, 'Status', '');
                    $("#RecallSummaryGrid").data("kendoGrid").dataSource.read();
                }
            }
            catch (e) {
                console.log(e.message);
            }
        }
        else {
            try {
                if ($("#RecallActiveCheckBox").is(':checked')) {
                    QuickColumnFilterWithOperator($("#RecallExposureGrid").data("kendoGrid").dataSource, 'BorrowStatus', 'neq', '@Convert.ToInt32(SL_RecallStatus.CLOSED)');
                    QuickColumnFilterWithOperator($("#RecallExposureGrid").data("kendoGrid").dataSource, 'LoanStatus', 'neq', '@Convert.ToInt32(SL_RecallStatus.CLOSED)');

                    $("#RecallExposureGrid").data("kendoGrid").dataSource.read();
                }
                else {
                    QuickColumnFilter($("#RecallExposureGrid").data("kendoGrid").dataSource, 'BorrowStatus', '');
                    QuickColumnFilter($("#RecallExposureGrid").data("kendoGrid").dataSource, 'LoanStatus', '');

                    $("#RecallExposureGrid").data("kendoGrid").dataSource.read();
                }
            }
            catch (e) {
                console.log(e.message);
            }
        }
    }
</script>

@(
 Html.Kendo().ToolBar()
        .Name("RecallToolBar")
    .Resizable(true)
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("EffectiveDate").ToHtmlString());

        items.Add().Template(Html.Kendo().DatePicker()
                                .Name("RecallCalander")
                                .Format("yyyy-MM-dd")
                                .Value(DateTime.Now)
                            .HtmlAttributes(new { @class = "width90" })
                                .Events(events => events.Change("onRecallChange")).ToHtmlString());

        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());

        items.Add().Template(Html.Kendo().MultiSelect()
                   .Name("RecallEntityDropdownList")
                                    .TagMode(TagMode.Multiple)
                   .AutoWidth(true)
                   .Enable(true)
                   .DownArrow(true)
                   .Size(ComponentSize.Small)
                   .ClearButton(false)
                   .HtmlAttributes(new { @style = "width:100%" })
                       .Placeholder("No records selected")
                       .AutoBind(true)
                   .ItemTemplate("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                    "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                    "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                    .Events(e =>
                    {
                        e.DataBound("onRecallDefaultLoad");
                        e.Change("onRecallChange");
                    })
                    .DataTextField("Custodian")
                    .DataValueField("CompanyId")
                    .DataSource(ds =>
                    {
                        ds.Read(read => read.Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" }));
                    }).ToHtmlString());

        items.Add().Template( LabelHelper.Label( "SummaryDetail" ).ToHtmlString() );

        items.Add().Template( Html.Kendo().DropDownListFor( m => m )
            .Name( "RecallSummaryDetailDropdownList" )
            .HtmlAttributes( new { @class="width100", data_value_primitive = true } )
            .Events( events => events.Change( "onRecallSummaryDetailChange" ) )
            .BindTo( Enum.GetNames( typeof( RecallDetailTypeEnum ) ).AsEnumerable() )
            .Value( RecallDetailTypeEnum.Detail.ToString() ).ToHtmlString() );


        items.Add().Template(Html.Kendo().CheckBox()
                .Name("RecallPending")
                .Checked(false)
                .Label(LabelHelper.Text("RecallPending"))
                .HtmlAttributes(new { id = "RecallPendingCheckBox", onclick = "onRecallPendingCheckBoxChange()" }).ToHtmlString());



        items.Add().Template( Html.Kendo().CheckBox()
                .Name( "RecallActive" )
                .Checked( false )
                .Label( LabelHelper.Text( "RecallActive" ) )
                .HtmlAttributes( new { id = "RecallActiveCheckBox", onclick = "onRecallActiveCheckBoxChange()" } ).ToHtmlString() );


        items.Add().Template(Html.Kendo().Button().Name("SendPendingRecallsButton").Events(e => e.Click("onSendPendingRecalls")).Content("<i class='fa fa-send-o'></i> Send Pending Recalls").Enable(true).ToHtmlString());


        items.Add().Template(
    "<table ID='RecallTable'><tr><td>" +
    LabelHelper.LabelFor("TickerSearch", "RecallSecuritySearchTextBox").ToHtmlString() + "</td><td>" +
    Html.Kendo().AutoComplete().Name("RecallSecuritySearchTextBox").HtmlAttributes(new { @class = "width90" }).Events(eve => eve.Filtering("onRecallSearchChange")).Suggest(true).ToHtmlString() + "</td></tr></table>"
    ).HtmlAttributes(new { @class = "float-right" });
    }))

<hr class="hr-white">

<div id="RecallContent"  class="grid-div">
    @( Html.Kendo().Grid<SL_RecallExtendedProjection>()
           .Name( "RecallSummaryGrid" )
            .Sortable()
            .Scrollable( scrollable => scrollable.Virtual( true ) )
            .HtmlAttributes( new { @class = "grid" } )
            .Events( events =>
            {
                events.Change( "onRecallRowChange" );
                events.DataBound("onRecallCheckData");
                events.ColumnHide( "onRecallGridLayoutChange" );
                events.ColumnShow( "onRecallGridLayoutChange" );
                events.ColumnResize( "onRecallGridLayoutChange" );
                events.ColumnReorder( "onRecallGridLayoutChange" );
            } )
            .Filterable()
                     .Pageable(pagable =>
                     {
                         pagable.Numeric(false);
                         pagable.PreviousNext(false);
                         pagable.Messages(config =>
                         {
                             config.Display("Showing {2} contract(s)");
                         });
                     })
            .ColumnMenu( columnMenu =>
            {
                columnMenu.Columns( true );
                columnMenu.Sortable( true );
                columnMenu.Filterable( true );
                columnMenu.ComponentType( "modern" );
            } )
            .Reorderable( reorder =>
            {
                reorder.Columns( true );
            } )
            .Selectable( selectable => selectable.Mode( GridSelectionMode.Multiple ) )
            .Navigatable()
            .NoRecords()
            .Columns( columns =>
            {
                columns.Bound( p => p.SLRecall ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
                columns.Bound( p => p.RecallNumber ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
                columns.Bound( p => p.EffectiveDate ).GetColumnFormat( ColumnTypeEnum.Date, false, "", "" ).Hidden( true );
                columns.Bound( p => p.EntityId ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
                columns.Bound(p => p.ClearingId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound( p => p.ContraEntity ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
                columns.Bound( p => p.IssueId ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
                columns.Bound( p => p.SecurityNumber ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
                columns.Bound(p => p.Isin).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound(p => p.Sedol).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound(p => p.Quick).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound(p => p.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound(p => p.SecNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound(p => p.IsPendingRecall).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox'   #= (IsPendingRecall) ? checked ='checked' : '' #/>", "");
                columns.Bound( p => p.ContractNumber ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
                columns.Bound(p => p.TradeType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound( p => p.Price ).GetColumnFormat( ColumnTypeEnum.Money, false, "", "" );
                columns.Bound( p => p.ContractPosition ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(ContractPosition)#", "" );
                columns.Bound( p => p.QuantityRecalled ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(QuantityRecalled)#", "" );
                columns.Bound( p => p.RecallAmount ).GetColumnFormat( ColumnTypeEnum.Money, true, "#=GetMoneyDirection(RecallAmount)#", "" );
                columns.Bound( p => p.QuantityRemaining ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(QuantityRemaining)#", "" );
                columns.Bound( p => p.QuantityReturnedSettled ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(QuantityReturnedSettled)#", "" );
                columns.Bound(p => p.QuantityReturnedPending).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(QuantityReturnedPending)#", "");
                columns.Bound( p=>  p.DepositorySettled).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(DepositorySettled)#", "");
                columns.Bound( p => p.CnsFailToDeliverPositionSettled ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(CnsFailToDeliverPositionSettled)#", "" );
                columns.Bound( p => p.DvpFailToDeliverPositionSettled ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(DvpFailToDeliverPositionSettled)#", "" );
                columns.Bound( p => p.BrokerFailToDeliverPositionSettled ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(BrokerFailToDeliverPositionSettled)#", "" );
                columns.Bound( p => p.RebateRate ).GetColumnFormat( ColumnTypeEnum.Rate, false, "#=GetMoneyDirection(RebateRate)#", "" );
                columns.Bound( p => p.RecallFlag ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
                columns.Bound( p => p.RecallDate ).GetColumnFormat( ColumnTypeEnum.Date, false, "", "" );
                columns.Bound( p => p.BuyInDate ).GetColumnFormat( ColumnTypeEnum.Date, false, "", "" );
                columns.Bound( p => p.RecallReason ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
                columns.Bound( p => p.ActionCount ).GetColumnFormat( ColumnTypeEnum.Position, false, "# if (ActionCount > 0) { #<i class='fa fa-bars' style='color:green;'></i># }# ", "" ).Title( "" ).HtmlAttributes( new { title = "Actions - #= ActionCount # " } ).Filterable( false );
                columns.Bound( p => p.Comment ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
                columns.Bound( p => p.Status ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
            } )
              .Resizable( cols => cols.Columns( bool.Parse( DataSystemValues.LoadSystemValue( "ResizeableGrid", "true" ) ) ) )
              .DataSource( dataSource => dataSource
                  .Ajax()
                  .PageSize(30)
                  .ServerOperation( false )
                  .Model( model => model.Id( p => p.SLRecall ) )
                .Aggregates( aggregates =>
                {
                    aggregates.Add( p => p.ContractPosition ).Sum();
                    aggregates.Add( p => p.QuantityRecalled ).Sum();
                    aggregates.Add( p => p.QuantityRemaining ).Sum();
                    aggregates.Add( p => p.QuantityReturnedSettled ).Sum();
                    aggregates.Add(p => p.QuantityReturnedPending).Sum();
                    aggregates.Add(p => p.DepositorySettled).Sum();
                    aggregates.Add( p => p.CnsFailToDeliverPositionSettled ).Sum();
                    aggregates.Add( p => p.DvpFailToDeliverPositionSettled ).Sum();
                    aggregates.Add( p => p.BrokerFailToDeliverPositionSettled ).Sum();
                    aggregates.Add( p => p.RecallAmount ).Sum();
                } )
                .Read( read => read
                    .Action( "Read_Recall", "Recall", new { Area = "DomesticTrading" } )
                            .Data( "additionalRecallData" )
                    )
                    .Events( events =>
                    {
                        events.Error( "onRecallError" );
                        events.RequestStart( "onRecallRequestStart" );
                        events.RequestEnd( "onRecallRequestEnd" );

                    } )
                ))


    @( Html.Kendo().Grid<SL_RecallExposureProjection>()
            .Name( "RecallExposureGrid" )
            .Sortable()
            .Scrollable( scrollable => scrollable.Virtual( true ) )
            .HtmlAttributes( new { @class = "grid" } )
            .Events( events =>
            {
                events.DataBound( "onRecallExposureCheckData" );
                events.Change("onRecallExposureRowChange");
                events.ColumnHide( "onRecallExposureLayoutChange" );
                events.ColumnShow( "onRecallExposureLayoutChange" );
                events.ColumnResize( "onRecallExposureLayoutChange" );
                events.ColumnReorder( "onRecallExposureLayoutChange" );
            } )
            .Filterable()
            .ColumnMenu( columnMenu =>
            {
                columnMenu.Columns( true );
                columnMenu.Sortable( true );
                columnMenu.Filterable( true );
                columnMenu.ComponentType( "modern" );
            } )
                     .Pageable(pagable =>
                     {
                         pagable.Numeric(false);
                         pagable.PreviousNext(false);
                         pagable.Messages(config =>
                         {
                             config.Display("Showing {2} recall(s)");
                         });
                     })
            .Reorderable( reorder =>
            {
                reorder.Columns( true );
            } )
            .NoRecords()
            .Selectable( selectable => selectable.Mode( GridSelectionMode.Multiple ) )
            .Navigatable()
            .Columns( columns =>
            {
                columns.Bound( p => p.SLRecall ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
                columns.Bound( p => p.RecallNumber ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden(true);
                columns.Bound( p => p.EffectiveDate ).GetColumnFormat( ColumnTypeEnum.Date, false, "", "" ).Hidden( true );
                columns.Bound( p => p.EntityId ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
                columns.Bound(p => p.ClearingId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound( p => p.ContraEntity ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
                columns.Bound( p => p.IssueId ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
                columns.Bound( p => p.SecurityNumber ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
                columns.Bound(p => p.Isin).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound(p => p.Sedol).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound(p => p.Quick).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound( p => p.Ticker ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
                columns.Bound(p => p.IsPendingRecall).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox'   #= (IsPendingRecall) ? checked ='checked' : '' #/>", "");
                columns.Bound( p => p.ContractNumber ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
                columns.Bound(p => p.TradeType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound( p => p.Price ).GetColumnFormat( ColumnTypeEnum.Money, false, "", "" );
                columns.Bound(p => p.DepositorySettled).GetColumnFormat(ColumnTypeEnum.Position, false, "", "");
                columns.Bound( p => p.RecallDate ).GetColumnFormat( ColumnTypeEnum.Date, false, "", "" );
                columns.Bound( p => p.BuyInDate ).GetColumnFormat( ColumnTypeEnum.Date, false, "", "" );


                columns.Bound( p => p.BorrowContraEntity ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
                columns.Bound( p => p.BorrowContractPosition ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionNullableDirection(BorrowContractPosition)#", "" ).Hidden( true );
                columns.Bound( p => p.BorrowQuantityRecalled ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionNullableDirection(BorrowQuantityRecalled)#", "" );
                columns.Bound( p => p.BorrowRecallAmount ).GetColumnFormat( ColumnTypeEnum.Money, true, "#=GetMoneyNullableDirection(BorrowRecallAmount)#", "" );
                columns.Bound( p => p.BorrowRebateRate ).GetColumnFormat( ColumnTypeEnum.Rate, false, "#=GetMoneyNullableDirection(BorrowRebateRate)#", "" );
                columns.Bound( p => p.BorrowRecallDate ).GetColumnFormat( ColumnTypeEnum.Date, false, "", "" ).Hidden( true );
                columns.Bound( p => p.BorrowBuyInDate ).GetColumnFormat( ColumnTypeEnum.Date, false, "", "" ).Hidden( true );
                columns.Bound( p => p.BorrowRecallReason ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
                columns.Bound( p => p.BorrowStatus ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );


                columns.Bound( p => p.LoanContraEntity ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
                columns.Bound( p => p.LoanContractPosition ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionNullableDirection(LoanContractPosition)#", "" ).Hidden( true );
                columns.Bound( p => p.LoanQuantityRecalled ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionNullableDirection(LoanQuantityRecalled)#", "" );
                columns.Bound( p => p.LoanRecallAmount ).GetColumnFormat( ColumnTypeEnum.Money, true, "#=GetMoneyNullableDirection(LoanRecallAmount)#", "" );
                columns.Bound( p => p.LoanRebateRate ).GetColumnFormat( ColumnTypeEnum.Rate, false, "#=GetMoneyNullableDirection(LoanRebateRate)#", "" );
                columns.Bound( p => p.LoanRecallDate ).GetColumnFormat( ColumnTypeEnum.Date, false, "", "" ).Hidden( true );
                columns.Bound( p => p.LoanBuyInDate ).GetColumnFormat( ColumnTypeEnum.Date, false, "", "" ).Hidden(true);
                columns.Bound( p => p.LoanRecallReason ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
                columns.Bound( p => p.LoanStatus ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );

                columns.Bound( p => p.PossibleExposure ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
                columns.Bound( p => p.PossibleExposureOffset ).GetColumnFormat( ColumnTypeEnum.String, false, "#=GetPositionNullableDirection(PossibleExposureOffset)#", "" );
                columns.Bound( p => p.PossibleExposureComment ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
            } )
              .Resizable( cols => cols.Columns( bool.Parse( DataSystemValues.LoadSystemValue( "ResizeableGrid", "true" ) ) ) )
              .DataSource( dataSource => dataSource
                  .Ajax()
                  .ServerOperation( false )
                  .PageSize(30)
                  .Read( read => read
                    .Action( "Read_RecallExposure", "Recall", new { Area = "DomesticTrading" } )
                            .Data( "additionalRecallData" )
                    ).Sort(sort =>
                    {
                        sort.Add( x => x.IssueId ).Ascending();
                        sort.Add( x => x.BuyInDate ).Ascending();
                        sort.Add( x => x.TradeType ).Descending();
                    })
                     .Model(model => model.Id(p => p.SLRecall))
                        .Aggregates(agg =>
                        {
                            agg.Add( x => x.BorrowContractPosition ).Sum();
                            agg.Add( x => x.BorrowQuantityRecalled ).Sum();
                            agg.Add( x => x.BorrowRecallAmount ).Sum();

                            agg.Add( x => x.LoanContractPosition ).Sum();
                            agg.Add( x => x.LoanQuantityRecalled ).Sum();
                            agg.Add( x => x.LoanRecallAmount ).Sum();
                        })
                    .Events( events =>
                    {
                        events.Error( "onRecallError" );
                        events.RequestStart( "onRecallExposureRequestStart" );
                        events.RequestEnd( "onRecallExposureRequestEnd" );

                    } )
                ))
    </div>
@Html.Kendo().Tooltip().Callout(true).Animation(true).AutoHide(true).For("#RecallSummaryGrid").Filter("td[title]")

@(
Html.Kendo().ContextMenu()
.Name("RecallContextMenu")
    .Target("#RecallSummaryGrid")
        .Events(events => events.Select("onRecallContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("Return").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLContract));
        items.Add().Text("Cancel").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLRecall));
        items.Add().Text("Buy-In").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLRecall));
        items.Add().Text("Update Pending").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLRecall));
        items.Add().Text("Actions").Enabled(true);
        items.Add().Separator(true);

        items.Add().Text("AutoFit Columns");
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
        items.Add().Separator(true);
        items.Add().Text("Select All").Enabled(true);
        items.Add().Text("Copy").Enabled(true).HtmlAttributes(new { ID = "RecallButton" });
        items.Add().Text("Export To Excel").Enabled(true);
    })
)


@(
 Html.Kendo().ContextMenu()
.Name( "RecallExposureContextMenu" )
    .Target( "#RecallExposureGrid" )
        .Events( events => events.Select( "onRecallExposureContextMenuSelect" ) )
    .Items( items =>
    {
        items.Add().Text("Return").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLContract));
        items.Add().Text("Cancel").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLRecall));
        items.Add().Text("Buy-In").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLRecall));
        items.Add().Text("Update Pending").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLRecall));
        items.Add().Text("Actions").Enabled(true);
        items.Add().Separator(true);
        items.Add().Text("AutoFit Columns");
        items.Add().Text( "Unsort" ).Enabled( true );
        items.Add().Text( "Reset Filter" ).Enabled( true );
        items.Add().Text( "Reset Grid" ).Enabled( true );
        items.Add().Separator( true );
        items.Add().Text("Select All").Enabled(true);
        items.Add().Text( "Copy" ).Enabled( true ).HtmlAttributes( new { ID = "RecallExposureButton" } );
        items.Add().Text( "Export To Excel" ).Enabled( true );
    } )
)
