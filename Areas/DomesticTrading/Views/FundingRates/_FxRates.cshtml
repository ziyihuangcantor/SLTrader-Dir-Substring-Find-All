@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools


<script type="text/javascript">
    var _originalFxRateGrid = null;
    var _originalFxRateGridToolBar = null;

    $('#SharedLabelCheckBox').change(function () {
        RefreshGrid("#FxRateGrid");
    });

    $(document).ready(function () {
        setTimeout(function () {
            _originalFxRateGrid = $("#FxRateGrid").data('kendoGrid').getOptions();
            _originalFxRateGridToolBar = $("#FxRateGrid .k-grid-toolbar").html();

            LoadGridLayout("#FxRateGrid");

            $("#FxRateGrid .k-grid-toolbar").html(_originalFxRateGridToolBar);
            $("#FxRateGrid .k-grid-toolbar").addClass("k-grid-top");
        }, 5);
    });

    function onFxRateListLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#FxRateGrid");
        }, 5);
    }

    function onFxRateCheckData() {
        CheckGridData('#FxRateGrid');
    }

    function createPCMatrixData() {
        var entity = $("#PCMatrixDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity,
            operatorId: '@Convert.ToInt32(SL_Operator.gte)'
        };
    }

    function additionalPCMatrixData() {
        var entity = $("#PCMatrixDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity
        };
    }

    function onFxRateEdit(e) {
        var input = e.container.find("input");
        setTimeout(function () {
            input.select();
        }, 25);
    }

    function onFxRateDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function(valid) {
                    userPreference = valid;

                    var dropdownList = $('#PCMatrixDropdownList').data("kendoDropDownList");

                    dropdownList.select(function(dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $('#FxRateGrid').data("kendoGrid").dataSource.read();
                },
                error: function(valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onFxRateError(e) {
        DisplayControllerError(e);
    }

    function onFxRateChange() {
        $("#FxRateGrid").data("kendoGrid").dataSource.read();
    }

     function onFxRateListContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#FxRateGrid");
                break;

            case "Reset Filter":
                ResetFilter("#FxRateGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#FxRateGrid");

                $("#FxRateGrid").data('kendoGrid').setOptions(_originalFxRateGrid);
                $("#FxRateGrid .k-grid-toolbar").html(_originalFxRateGridToolBar);
                $("#FxRateGrid .k-grid-toolbar").addClass("k-grid-top");
                $('#FxRateGrid').data("kendoGrid").dataSource.read();
                break;
            case 'Unsort':
                UnsortGrid("#FxRateGrid");
                break;
        }
    }

     function onAdditionalFxRateData(e) {
         var datepicker = $("#FxRateCalander").data("kendoDatePicker");
         var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

         return {
             effectiveDate: value,
         }
     }
</script>

@(
 Html.Kendo().ToolBar()
    .Name("FxRateToolBar")
    .Resizable(true)
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("EffectiveDate").ToHtmlString());

        items.Add().Template(Html.Kendo().DatePicker()
                                .Name("FxRateCalander")
                                .Format("yyyy-MM-dd")
                                .Value(DateTime.Now)
                                .HtmlAttributes(new { @class = "width90" })
                                .Events(events => events.Change("onFxRateChange")).ToHtmlString());
    }))

<hr class="hr-white">

<div id="FxRateContent" class="grid-div">
    @(
 Html.Kendo().Grid<FxRate>()
        .Name("FxRateGrid")
        .Sortable()
        .HtmlAttributes(new { @class = "grid" })
        .Scrollable()
        .Filterable()
        .NoRecords()
        .Editable(e => e.Mode(GridEditMode.InLine).Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLRule)))
        .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
        .Navigatable()
        .Resizable(resize => resize.Columns(true))
        .Events(events =>
        {
            events.DataBound("onFxRateCheckData");
            events.Edit("onFxRateEdit");
            events.ColumnHide("onFxRateListLayoutChange");
            events.ColumnShow("onFxRateListLayoutChange");
            events.ColumnResize("onFxRateListLayoutChange");
            events.ColumnReorder("onFxRateListLayoutChange");
        })
        .ToolBar(toolbar => toolbar.Create())
        .Columns(columns =>
        {
            columns.Bound(x => x.FxRateId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.EffectiveDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "").Hidden(true);
            columns.Bound(x => x.ConversionCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.Currencyfrom).GetColumnFormat(ColumnTypeEnum.String, false, "", "_CurrencyDropdown");
            columns.Bound(x => x.CurrencyTo).GetColumnFormat(ColumnTypeEnum.String, false, "", "_CurrencyDropdown");
            columns.Bound(x => x.FXRate).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(FXRate)#", "");

            columns.Command(x =>
            {
                x.Edit();
                x.Destroy();
            });
        })
        .ColumnMenu( menu =>
        {
            menu.Columns( true );
            menu.Filterable( true );
            menu.Sortable( true );
            menu.ComponentType( "modern" );
        } )
         .DataSource(dataSource => dataSource
            .Ajax()
            .Events(events => events.Error("onFxRateError"))
            .Read(read => read.Action("Read_FxRate", "FeeType", new { area = "DomesticTrading" }).Data("onAdditionalFxRateData"))
            .Update(update => update.Action("Update_FxRate", "FeeType", new { area = "DomesticTrading" }))
            .Destroy(destroy => destroy.Action("Delete_FxRate", "FeeType", new { area = "DomesticTrading" }))
            .Create(create => create.Action("Create_FxRate", "FeeType", new { area = "DomesticTrading" }))
            .Model(model =>
            {
                model.Id(x => x.FxRateId);
                model.Field(x => x.EffectiveDate).Editable(false);
                model.Field(x => x.ConversionCode).Editable(true).DefaultValue("");
                model.Field(x => x.Currencyfrom).Editable(true);
                model.Field(x => x.CurrencyTo).Editable(true);
                model.Field(x => x.FXRate).DefaultValue(0.0);
            }))
    )
</div>


@(Html.Kendo().ContextMenu()
.Name("PListContextMenu")
    .Target("#FxRateGrid")
    .Events(events => events.Select("onFxRateListContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
    }))