@using System.ComponentModel
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Enums
@using SLTrader.Tools
@using SLTrader.Models
@using BondFire.Entities.Projections

@model string

<style scoped>
    #DepoManagementLayoutTable {
        height: 400px;
        width: 500px;
        max-width: 500px;
        margin:0px;
        padding:0px;
    }


    #DepoManagementItemGrid {
        height: 200px;
        width: 200px;
    }

    #DepoManagementGrid {
        width:100%;
        height:100%;
    }
    
        #DepoManagementLayoutTable {
        border-collapse:collapse;
        width:100%;
    }

        #DepoManagementLayoutTable th,
        #DepoManagementLayoutTable td {
            min-height: 50px;
            padding: 0px 0px 0px 0px;
        }

</style>

<script>
    function additionaDepoManagementData() {

        return {
            entityId : '@Model',
        }
    }

    function onDepoManagementError(e)
    {
        DisplayControllerError(e);
    }

    function onDepoManagementEdit(e) {
        var entityGrid = $("#DepoManagementGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        var input = e.container.find("input");
        setTimeout(function () { input.select(); });
    }


    $(function() {
        $('#DepoManagementGrid').on('click', '.IsBuyInMarketChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#DepoManagementGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('IsBuyInMarket', checked);
            dataSource.sync();
        });
    });

    function onDepoManagementRequestEnd(e) {
        resizeGridColumns("#DepoManagementGrid");
    }
</script>

<table id="DepoManagementLayoutTable">
    <tr>
        <td colspan="3">
            @(Html.Kendo().Grid<SL_DepoManagement>()
        .Name("DepoManagementGrid")
        .Selectable(select => select.Enabled(true).Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
        .Events(events => events.Edit("onDepoManagementEdit"))
        .Scrollable()
        .Editable(edit => edit.Enabled(true).Mode(GridEditMode.InLine).CreateAt(GridInsertRowPosition.Bottom))
        .NoRecords()
        .Resizable(resize =>
        {
            resize.Columns(true);
        })
                .ToolBar( toolbar => toolbar.Create())
                .Columns(cols =>
                {
                    cols.Command(x =>
                    {
                        x.Edit();
                    }).Width(70);
                    cols.Bound(x => x.SLDepoManagement).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                    cols.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                    cols.Bound(x => x.Country).GetColumnFormat(ColumnTypeEnum.String, false, "", "_DepoManagementCountryDropdown").Width(90);
                    cols.Bound(x => x.SettlementOffset).GetColumnFormat(ColumnTypeEnum.Position, false, "", "_DecimalNumber").Width(60);
                    cols.Bound(x => x.IsBuyInMarket).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox'  class='IsBuyInMarketChkbx' #= (IsBuyInMarket) ? checked ='checked' : '' #/>", "");
                    cols.Bound(x => x.BoxLocation).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Width(60);
                    cols.Bound(x => x.Name).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Width(60);
                    cols.Bound(x => x.FirmId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Width(60);
                })
                    .DataSource(ds => ds.Ajax()
                        .ServerOperation(false)
                        .Events(events =>
                        {
                            events.Error("onDepoManagementError");                           
                        })
                        .Model(model =>
                        {
                            model.Id(x => x.SLDepoManagement);
                            model.Field(x => x.EntityId).DefaultValue(Model).Editable(false);
                            model.Field(x => x.Country).DefaultValue(Country.UnitedStates).Editable(true);
                            model.Field(x => x.IsBuyInMarket).DefaultValue(false).Editable(true);
                            model.Field(x => x.BoxLocation).DefaultValue("").Editable(true);
                            model.Field(x => x.Name).DefaultValue("").Editable(true);
                            model.Field(x => x.FirmId).DefaultValue("").Editable(true);
                        })
                        .Read(read => read.Action("Load_DepoManagement", "DepoManagement", new { area = "DomesticTrading" }).Data("additionaDepoManagementData"))
                        .Create(create => create.Action("Create_DepoManagement", "DepoManagement", new { area = "DomesticTrading" }))
                        .Update(update => update.Action("Update_DepoManagement", "DepoManagement", new { area = "DomesticTrading" }))))
        </td>
    </tr>
</table>
