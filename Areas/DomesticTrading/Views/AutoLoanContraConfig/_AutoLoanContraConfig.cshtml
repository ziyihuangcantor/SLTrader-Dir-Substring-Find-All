@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools
@model string

<script type="text/javascript">

    
    $(document).ready(function () {
        setTimeout(function () {            
            resizeGridColumns("#AutoLoanContraConfigGrid");
            
            $('#LocalDetailWindow').data("kendoWindow").center();
        }, 5);
    });


    function onAdditionalAutoLoanContraConfig() {
       return {
            entityId: '@Model',
        }
    }
    function onAutoLoanConfigContraEntitySelect() {
        return {
            entityId : '@Model.ToString()'
        }
    }

    function clickAutoApprovalWithExcessCheck(e) {
        var $cb = $(e);
        var checked = $cb.is(':checked');

        var grid = $("#AutoLoanContraConfigGrid").data("kendoGrid");
        var selectedItem = grid.dataItem(grid.select());

        selectedItem["AutoApprovalWithExcess"] = checked;
        grid.sync();
    }
    
    $(function () {
        $('#AutoLoanContraConfigGrid').on('click', '.enableAutoApprovalWithExcess', function () {
            var checked = $(this).is(':checked');

            var grid = $('#AutoLoanContraConfigGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('AutoApprovalWithExcess', checked);
            grid.dataSource.sync();
        });
    });

    function onAutoLoanContraConfigGridCheckData(e) {
        try {
            CheckGridData('#AutoLoanContraConfigGrid');
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onAutoLoanContraConfigEdit(e) {
        var input = e.container.find("input");
        setTimeout(function () {
            input.select();
        }, 25);
    }
</script>

<div id="AutoLoanContraConfigContent" class="grid-div">
    @(Html.Kendo().Grid<SL_AutoLoanContraConfig>()
    .Name( "AutoLoanContraConfigGrid" )
    .Scrollable()
    .Navigatable()
    .AutoBind(true)
    .Editable( edit =>
        {
            edit.Enabled( ( SessionSecurityService.IsEditable( ManagerTask.EditSLAutoLoan ) ) );
            edit.Mode( GridEditMode.InCell );
            edit.DisplayDeleteConfirmation(false);            
        } )
    .ColumnMenu( menu =>
    {
        menu.Columns( true );
        menu.Filterable( true );
        menu.Sortable( true );
        menu.ComponentType( "modern" );
    } )
    .Selectable( seclect => seclect.Mode( GridSelectionMode.Multiple ) )
    .Events( events =>
    {
        events.DataBound( "onAutoLoanContraConfigGridCheckData" );
        events.Edit( "onAutoLoanContraConfigEdit" );
    } ) 
    .Resizable(config => config.Columns(true)) 
    .NoRecords()
    .ToolBar( toolbar =>
        {
            toolbar.Create();
        } )        
    .Columns( cols =>
    {
        cols.Bound( x => x.SLAutoLoanContraConfig ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
        cols.Bound( x => x.EntityId ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
        cols.Bound( x => x.ContraEntity ).GetColumnFormat( ColumnTypeEnum.String, false, "", "_AutoLoanContraConfigContraEntityAutoComplete" ).Width(100);
        cols.Bound( x => x.AutoApprovalWithExcess ).GetColumnFormat( ColumnTypeEnum.String, false, "<input type='checkbox'  class='enableAutoApprovalWithExcess' #= (AutoApprovalWithExcess) ? checked ='checked' : '' #/>", "" );
        cols.Bound( x => x.AutoRejectPriceBelow ).GetColumnFormat( ColumnTypeEnum.Margin, false, "#=GetMoneyDirection(AutoRejectPriceBelow)#", "RebateRateNumber" );
        cols.Bound( x => x.AutoApprovalMinQty ).GetColumnFormat( ColumnTypeEnum.Margin, false, "#=GetPositionDirection(AutoApprovalMinQty)#", "DecimalNumber" );
        cols.Bound( x => x.AutoApprovalMinAmount ).GetColumnFormat( ColumnTypeEnum.Margin, false, "#=GetMoneyDirection(AutoApprovalMinAmount)#", "DecimalNumber" );
        cols.Bound( x => x.DefaultRebateRate ).GetColumnFormat( ColumnTypeEnum.Rate, false, "#=GetRateDirection(DefaultRebateRate)#", "DecimalNumber" );
        cols.Bound( x => x.DefaultRebateRateId ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        cols.Command( command =>
            {
                command.Destroy();
            } ).Width(60);
    } )
    .DataSource( ds => ds.Ajax()        
        .AutoSync(true)
        .ServerOperation(false)
        .Read( read => read.Action( "Read_AutoLoanContraConfig", "AutoLoanContraConfig", new { area = "DomesticTrading" } ).Data( "onAdditionalAutoLoanContraConfig" ) )
        .Update( update => update.Action( "UpdateAutoLoanContraConfig", "AutoLoanContraConfig", new { area = "DomesticTrading" } ) )
        .Create( create => create.Action( "CreateAutoLoanContraConfig", "AutoLoanContraConfig", new { area = "DomesticTrading" } ) )
        .Destroy( destroy => destroy.Action( "DestroyAutoLoanContraConfig", "AutoLoanContraConfig", new { area = "DomesticTrading" } ) )        
        .Model( model =>
        {
            model.Id( x => x.SLAutoLoanContraConfig );
            model.Field( x => x.SLAutoLoanContraConfig ).Editable( false );
            model.Field( x => x.EntityId ).Editable( false ).DefaultValue( Model );
            model.Field( x => x.ContraEntity ).Editable( true );
            model.Field( x => x.AutoApprovalWithExcess ).Editable( true );
            model.Field( x => x.AutoRejectPriceBelow ).Editable( true );
            model.Field( x => x.DefaultRebateRate ).Editable( true );
            model.Field( x => x.DefaultRebateRateId ).Editable( true );
        } ) ))
</div>