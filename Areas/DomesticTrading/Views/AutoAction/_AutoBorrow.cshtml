@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools
<style scoped>
    #AutoBorrowContent {
        height: 88%;
        width: auto;
    }
   
    #AutoBorrowGrid {
        height:95%;
    }

    #AutoBorrowHeaderToolBar {
        padding-top: 5px;
        border: 0px;
        border-radius: 5px;
    }

    #AutoBorrowHeaderToolBar label {
        padding-left:10px;
    }

    #autoBorrowContextMenu {
        position: fixed;
    }

    #AutoBorrowToolBar {
        border-radius: 0px;
    }

    #AutoBorrowToolBar td {
    margin: 0px 0px 0px 5px;
    padding: 0px 0px 0px 5px;
    border-collapse:collapse;
}
    
    checkBoxStyle {
         margin: 0px 0px 0px 10px;
     padding: 0px 0px 0px 10px;
    border-collapse:collapse;
    }
</style>

<script type="text/javascript">
    var _autoBorrowSelectAll = false;

    function onAutoBorrowRequestEnd(e) {
        traderHubProxy.on('updateBorrowOrder', function (update) {
            updateBorrowOrderRow(update)
        });
    }

    function onAutoBorrowRequestStart(e) {
        traderHubProxy.off('updateBorrowOrder');
    }

    function updateBorrowOrderRow(update) {
        try {
            var entity = $("#AutoBorrowDropdownList").data("kendoDropDownList").value();

            $.each(update, function (i, obj) {
                if (obj.EntityId == entity) {

                    if ($("#AutoBorrowGrid").length) {
                        var data = $("#AutoBorrowGrid").data("kendoGrid").dataSource;

                        var dateTimeId = kendo.parseDate(obj['DateTimeId']);
                        obj['DateTimeId'] = dateTimeId;

                        data.pushUpdate(obj);
                    }
                }
            });
        }
        catch (e) {
            console.log('updateBorrowOrderRow err::' + e.message);
        }
    }

    function autoBorrowSelectAll(e) {
        try {
            var autoBorrowGrid = $("#AutoBorrowGrid").data("kendoGrid");
            autoBorrowGrid.select(autoBorrowGrid.tbody.find(">tr"));

            _autoBorrowSelectAll = true;
        }
        catch (e) {
            LogError(e.message);
        }
    }

    function onAutoBorrowDefaultOptions() {
        try {
            HelperPartialWindow(
                null,
                'Auto Borrow Defaults',
                490,
                490,
                '/DomesticTrading/AutoAction/LoadAutoBorrowDefaultOptionsPartial'
            );
        }
        catch (e) {
            alert(e.message);
            LogError(e.message);
        }
    }


    function processLcorData() {

        showNotify("Updating Records");

        try {
            var contraEntityId = ($("#AutoBorrowContraEntityCheckBox").is(':checked')) ? $("#AutoBorrowContraEntityDropdownList").data("kendoAutoComplete").value() : "";
            var profitId = ($("#AutoBorrowProfitCenterCheckBox").is(':checked')) ? document.getElementById("AutoBorrowProfitCenterTextBox").value : "";

            var rebateRate = ($("#AutoBorrowRebateRateCheckBox").is(':checked')) ? $("#AutoBorrowRebateRateTextBox").data("kendoNumericTextBox").value() : null;
            var rebateRateId = ($("#AutoBorrowRebateRateCheckBox").is(':checked')) ? document.getElementById("AutoBorrowRebateRateIdTextBox").value : "";
            var mark = ($("#AutoBorrowMarkCheckBox").is(':checked')) ? $("#AutoBorrowMarkTextBox").data("kendoNumericTextBox").value() : null;
            var batchCode = ($("#AutoBorrowBatchCodeCheckBox").is(':checked')) ? document.getElementById("AutoBorrowBatchCodeTextBox").value : "";
            var timeOut = ($("#AutoBorrowTimeOutCheckBox").is(':checked')) ? document.getElementById("AutoBorrowTimeOutTextBox").value : "";


            var dataItems = [];
            
            dataItems = getDataItems('#AutoBorrowGrid',
                    _autoBorrowSelectAll,
                    '@DataSystemValues.LoadSystemValue("AutoBorrowMaxItems","1000")');

            $.ajax({
                url: '@Url.Action("ProcessLcorOptions", "AutoAction", new { area = "DomesticTrading" })',
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({
                    list: dataItems,
                    contraEntityId: contraEntityId,
                    rebateRate: rebateRate,
                    mark: mark,
                    profitId: profitId,
                    batchCode: batchCode,
                    timeOut: timeOut,
                    rebateRateId: rebateRateId
                }),
                success: function (valid) {
                },
                error: function (valid) {
                }
            })
        }
        catch (e) {
            alert(e.message);
            LogError(e.message);
        }

        _autoBorrowSelectAll = false;

        hideNotify();
    }

    $('#SharedLabelCheckBox').change(function () {
        try {
            $("#AutoBorrowGrid").data("kendoGrid").refresh();

        }
        catch (e) {
            LogError(e.message);
        }
    })

    $(document).ready(function () {

        var enabled = '@(SessionSecurityService.IsEditable(ManagerTask.EditSLContract))' == "True";

        var cm = $('#autoBorrowContextMenu').kendoMenuEx({
            dataSource: [
                {
                    text: 'Send To LCOR',
                    enabled: enabled,
                    click: function (e) {
                        onAutoBorrowSend(enabled);
                    }
                },
                {
                    text: 'Cancel',
                    enabled: enabled,
                    click: function (e) {
                        onAutoBorrowCancel(enabled);
                    }
                },
                 {
                     text: 'Clone',
                     enabled: enabled,
                     click: function (e) {
                         onAutoBorrowMirror(enabled);
                     }
                 },
                {
                    text: 'Refresh Data',
                    enabled: enabled,
                    click: function (e) {
                        onAutoBorrowChange();
                    }
                },
                 {
                     text: 'Unsort',
                     enabled: enabled,
                     click: function (e) {
                         onAutoBorrowUnsortGrid("#AutoBorrowGrid");
                     }
                 },
                  {
                      text: 'Select All',
                      enabled: enabled,
                      click: function (e) {
                          autoBorrowSelectAll(e);
                      }
                  },
                {
                    text: 'Export',
                    click: function (e) {
                        exportToAuotBorrowExcel();
                    }
                }
            ],
            anchor: '#AutoBorrowContent',
            delay: 10000
        });

        $('#AutoBorrowContraEntityCheckBox').change(function () {
            $("#AutoBorrowContraEntityDropdownList").data("kendoAutoComplete").enable($(this).is(':checked'));
        });

        $('#AutoBorrowRebateRateCheckBox').change(function () {
            $("#AutoBorrowRebateRateTextBox").data("kendoNumericTextBox").enable($(this).is(':checked'));
            $("#AutoBorrowRebateRateIdTextBox").data("kendoNumericTextBox").enable($(this).is(':checked'));
        });

        $('#AutoBorrowMarkCheckBox').change(function () {
            $("#AutoBorrowMarkTextBox").data("kendoNumericTextBox").enable($(this).is(':checked'));
        });

        $('#AutoBorrowProfitCenterCheckBox').change(function () {
            $("#AutoBorrowProfitCenterTextBox").data("kendoNumericTextBox").enable($(this).is(':checked'));
        });

        $('#AutoBorrowBatchCodeCheckBox').change(function () {
            $("#AutoBorrowBatchCodeTextBox").data("kendoNumericTextBox").enable($(this).is(':checked'));
        });
    });

    function onAutoBorrowUnsortGrid(e) {
        UnsortGrid(e);
    }

    function onAutoBorrowSend(e) {
        var dataItems = [];
        var grid = $('#AutoBorrowGrid').data('kendoGrid');
        var rows = grid.select();
        var dataItems = [];

        dataItems = getDataItems('#AutoBorrowGrid',
                _autoBorrowSelectAll,
                '@DataSystemValues.LoadSystemValue("AutoBorrowMaxItems","1000")');

        $.ajax({
            url: '@Url.Action("Send", "AutoAction", new { area = "DomesticTrading" })',
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify({ list: dataItems }),
            success: function (valid) {

            },
            error: function (valid) {

            }
        })
    }

    function onAutoBorrowCancel(e) {
        var dataItems = [];
        var grid = $('#AutoBorrowGrid').data('kendoGrid');
        var rows = grid.select();


        dataItems = getDataItems('#AutoBorrowGrid',
                _autoBorrowSelectAll,
                '@DataSystemValues.LoadSystemValue("AutoBorrowMaxItems","1000")');


        $.ajax({
            url: '@Url.Action("Cancel", "AutoAction", new { area = "DomesticTrading" })',
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify({ list: dataItems }),
            success: function (valid) {

            },
            error: function (valid) {

            }
        })
    }

    function onAutoBorrowMirror(e) {
        var dataItems = [];
        var grid = $('#AutoBorrowGrid').data('kendoGrid');
        var rows = grid.select();


        dataItems = getDataItems('#AutoBorrowGrid',
                _autoBorrowSelectAll,
                '@DataSystemValues.LoadSystemValue("AutoBorrowMaxItems","1000")');


        dataItems = 

        $.ajax({
            url: '@Url.Action("Mirror","AutoAction", new { area = "DomesticTrading" })',
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify({ list: dataItems }),
            success: function (valid) {

            },
            error: function (valid) {

            }
        })
    }

    function exportToAuotBorrowExcel() {
        try {
            KendoGridToCSVConvertor("#AutoBorrowGrid", 'AutoBorrow');
        }
        catch (e) {
            LogError(e.message);
        }
    }

    function onAutoBorrowChange() {
        $("#AutoBorrowGrid").data("kendoGrid").dataSource.read();
    }

    function onAutoBorrowRowChange(e) {
        e.preventDefault();

        try {
            var entityGrid = $("#AutoBorrowGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            var entityId = selectedItem["EntityId"];
            var effectiveDate = selectedItem["EffectiveDate"];
            var securityNumber = selectedItem["SecurityNumber"];
            var issueId = selectedItem["IssueId"];

            UpdateIssue(entityId, securityNumber);
            UpdateBox(effectiveDate, entityId, issueId);
            UpdateTrading(entityId, issueId);
            UpdateSharedView(entityId, securityNumber);

            _autoBorrowSelectAll = false;
        }
        catch (e) {
            LogError(e.message);
        }
    }

    function onAutoBorrowDefaultLoad() {
        try {
            var UserPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    UserPreference = valid;

                    var dropdownList = $('#AutoBorrowDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == UserPreference.DefaultFirm;
                    });

                    $('#AutoBorrowGrid').data("kendoGrid").dataSource.read();
                },
                error: function (valid) {
                    UserPreference = null;
                }
            })
        }
        catch (e) {
            LogError(e.message);
        }
    }

    function onAutoBorrowError(e) {
        console.log(e.message);
    }

    function clickAutoBorrowCheck(e) {
        var $cb = $(e);
        var checked = $cb.is(':checked');

        var grid = $("#AutoBorrowGrid").data("kendoGrid");
        var selectedItem = grid.dataItem(grid.select());

        selectedItem["IncomeTracked"] = checked;
    }

    function onAutoBorrowCheckData() {
        try {
            CheckGridData('#AutoBorrowGrid');
        }
        catch (e) {
            LogError(e.message);
        }

        try {
            var grid = $("#AutoBorrowGrid").data("kendoGrid");
            var data = grid.dataSource.data();

            $.each(data, function (i, row) {
                if (row.BorrowStatus == '@Convert.ToInt32(StatusMain.Cancelled)') {
                    $('tr[data-uid="' + row.uid + '"] ').addClass("rejectedRecord");
                }

                if (row.BorrowStatus == '@Convert.ToInt32(StatusMain.Allocated)') {
                    $('tr[data-uid="' + row.uid + '"] ').addClass("approvedRecord");
                }

                if (row.BorrowStatus == '@Convert.ToInt32(StatusMain.InProgress)') {
                    $('tr[data-uid="' + row.uid + '"] ').addClass("transmittedRecord");
                }
            });
        }
        catch (e) {
            LogError(e.message);
        }
    }

    function additionalAutoBorrowData() {
        var datepicker = $("#AutoBorrowCalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entityId = $("#AutoBorrowDropdownList").data("kendoDropDownList").value();

        return {
            effectiveDate: value,
            entityId: entityId,
        }
    }

    function additionalAutoBorrowEntityData() {
        var entityId = $("#AutoBorrowDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entityId,
        }
    }

    function onAutoBorrowRowEdit(e) {
        var entityGrid = $("#AutoBorrowGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        if (selectedItem.BorrowStatus == 15) {
            var input = e.container.find("input");
            setTimeout(function () { input.select(); });
        }
        else {
            $('#AutoBorrowGrid').data("kendoGrid").closeCell();
        }
    }
</script>
<div class="toolbar">
    @(
 Html.Kendo().ToolBar()
    .Name("AutoBorrowHeaderToolBar")
    .Resizable(true)
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("EffectiveDate").ToHtmlString());

        items.Add().Template(Html.Kendo().DatePicker()
            .Name("AutoBorrowCalander")
            .Format("yyyy-MM-dd")
            .Value(DateTime.Now)
            .HtmlAttributes(new { @class = "Toolbar-Cell" })
            .Events(events => events.Change("onAutoBorrowChange")).ToHtmlString());

        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());

        items.Add().Template(Html.Kendo().DropDownList()
                .Name("AutoBorrowDropdownList")
                .HtmlAttributes(new { @class = "Toolbar-Cell" })
                .DataTextField("Custodian")
                .DataValueField("CompanyId")
                .OptionLabel(LabelHelper.Text("OptionLabel"))
                .AutoBind(true)
                .Events(events => events.Change("onAutoBorrowChange").DataBound("onAutoBorrowDefaultLoad"))
                .DataSource(dataSource => dataSource
                .Read(read => read
                .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                .SelectedIndex(0).ToHtmlString());

        items.Add().Template(Html.Kendo()
                                .Button()
                                .Enable(true)
                                .Name("AutoBorrowApplyChangesButton")
                                .HtmlAttributes(new { style = "width:90px" })
                                .Events(e => e.Click("processLcorData"))
                                .Content(@<text>
                                    <i class="fa fa-repeat"></i>&nbsp;Apply Options
                                </text>).ToHtmlString());
        items.Add().Template(Html.Kendo().Button()
                            .Name("DefaultOptionButton")
                    .Events(e => e.Click("onAutoBorrowDefaultOptions"))
                    .Content(LabelHelper.Text("DefaultOptions")).ToHtmlString());
    }))

    <table class="toolbar" id="AutoBorrowToolBar">
        <tr>
            <td style="padding-left:15px;">
                @Html.CheckBox("AutoBorrowContraEntityCheckBox")
            </td>
            <td>
                @LabelHelper.Label("ContraEntity")
            </td>
            <td>
                @(Html.Kendo().AutoComplete()
                        .Name("AutoBorrowContraEntityDropdownList")
                        .DataTextField("ContraEntityId")
                        .Enable(false)
                        .DataSource(source =>
                        {
                            source.Read(read =>
                            {
                                read.Action("Read_ContraEntityDropdown", "ContraEntity", new { area = "DomesticTrading" }).Data("additionalAutoBorrowEntityData");
                            });
                        })
                        .HtmlAttributes(new { ID = "AutoBorrowContraEntityDropdownList", @style = "width:60px;" })
                        .Filter("startswith"))
            </td>

            <td style="padding-left:15px;">
                @Html.CheckBox("AutoBorrowRebateRateCheckBox")
            </td>
            <td>
                @LabelHelper.Label("RebateRate")
            </td>
            <td>
                @Html.Kendo().NumericTextBox().Name("AutoBorrowRebateRateTextBox").Spinners(false).Value(0).Enable(false).HtmlAttributes(new { @style = "width:50px;" })
            </td>
            <td>
                @Html.TextBox("AutoBorrowRebateRateIdTextBox", "", new { @class = "k-textbox", @style = "width:30px;" })
            </td>
            <td style="padding-left:15px;">
                @Html.CheckBox("AutoBorrowMarkCheckBox")
            </td>
            <td>
                @LabelHelper.Label("Mark")
            </td>
            <td>
                @Html.Kendo().NumericTextBox().Name("AutoBorrowMarkTextBox").Spinners(false).Value(1.02).Format("#,##0.00").Enable(false).HtmlAttributes(new { @style = "width:50px;" })
            </td>
            <td style="padding-left:15px;">
                @Html.CheckBox("AutoBorrowProfitCenterCheckBox")
            </td>
            <td>
                @LabelHelper.Label("ProfitCenter")
            </td>
            <td>
                @Html.TextBox("AutoBorrowProfitCenterTextBox", "", new { @class = "k-textbox", @style = "width:50px;" })
            </td>
            <td style="padding-left:15px;">
                @Html.CheckBox("AutoBorrowBatchCodeCheckBox")
            </td>
            <td>
                @LabelHelper.Label("BatchCode")
            </td>
            <td>
                @Html.TextBox("AutoBorrowBatchCodeTextBox", "", new { @class = "k-textbox", @style = "width:50px;" })
            </td>
            <td style="padding-left:15px;">
                @Html.CheckBox("AutoBorrowTimeOutCheckBox")
            </td>
            <td>
                @LabelHelper.Label("TimeOut")
            </td>
            <td>
                @Html.TextBox("AutoBorrowTimeOutTextBox", DataSystemValues.LoadSystemValue("AutoBorrowTimeOut", ""), new { @class = "k-textbox", @style = "width:50px;" })
            </td>
        </tr>
    </table>

</div>

<hr class="hr-white">

<div id="AutoBorrowContent" class="grid-div">
    @(
 Html.Kendo().Grid<SL_BorrowOrderProjection>()
    .Name("AutoBorrowGrid")
    .Sortable(sort =>
               {
                   sort.AllowUnsort(true);
                   sort.Enabled(true);
                   sort.SortMode(GridSortMode.MultipleColumn);
               })
    .Scrollable(scroll => scroll.Virtual(true))
    .Filterable()
    .Navigatable()
    .Pageable(page =>
    {
        page.PageSizes(false);
        page.Enabled(true);
        page.Numeric(false);
        page.PreviousNext(false);
        page.Info(false);
    }) 
    .Editable(edit => edit.Mode(GridEditMode.InCell).Enabled(true))
    .Selectable(seclect => seclect.Mode(GridSelectionMode.Multiple))
    .Events(events => events.Change("onAutoBorrowRowChange").DataBound("onAutoBorrowCheckData").Edit("onAutoBorrowRowEdit"))
    .Columns(cols =>
    {
        cols.Bound(x => x.SLBorrowOrder).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        cols.Bound(x => x.BorrowOrderRequest).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        cols.Bound(x => x.ContraEntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "_AutoBorrowContraEntityAutoComplete");
        cols.Bound(x => x.IssueId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        cols.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.MaxPrice).GetColumnFormat(ColumnTypeEnum.Rate, false, "", "DecimalNumber");
        cols.Bound(x => x.Quantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(Quantity)#", "QuantityDecimalNumber");
        cols.Bound(x => x.MinQuantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(MinQuantity)#", "QuantityDecimalNumber");
        cols.Bound(x => x.MinRebateRate).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(MinRebateRate)#", "RebateRateDecimalNumber");
        cols.Bound(x => x.MinRebateRateId).GetColumnFormat(ColumnTypeEnum.String, false, "", "String");
        cols.Bound(x => x.Mark).GetColumnFormat(ColumnTypeEnum.Margin, false, "#=GetRateDirection(Mark)#", "RebateRateDecimalNumber");
        cols.Bound(x => x.MarkParameterId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        cols.Bound(x => x.ProfitId).GetColumnFormat(ColumnTypeEnum.String, false, "", "String");
        cols.Bound(x => x.CollateralFlag).GetColumnFormat(ColumnTypeEnum.String, false, "", "_CollateralFlagDropdown");
        cols.Bound(x => x.DividendRate).GetColumnFormat(ColumnTypeEnum.Margin, false, "", "DecimalNumber");
        cols.Bound(x => x.IncomeTracked).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox' onClick='clickAutoBorrowCheck(this)' #= (IncomeTracked) ? checked ='checked' : '' #/>", "").Filterable(false);
        cols.Bound(x => x.Comment).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        cols.Bound(x => x.TimeOut).GetColumnFormat(ColumnTypeEnum.Position, false, "", "").Filterable(false);
        cols.Bound(x => x.AddToLoanetId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Filterable(false);
        cols.Bound(x => x.BatchCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "String");
        cols.Bound(x => x.BorrowOrderRequest).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        cols.Bound(x => x.BorrowOrderResponse).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Filterable(true);
        cols.Bound(x => x.BorrowOrderSystem).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        cols.Bound(x => x.BorrowStatus).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.SubmissionType).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        cols.Bound(x => x.DateTimeId).GetColumnFormat(ColumnTypeEnum.Time, false, "", "");
    })
    .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
    .DataSource(ds =>
    {
        ds.Ajax()
          .ServerOperation(false)
          .AutoSync(true)        
          .Read(read =>
            {
                read.Action("Read_AutoBorrow", "AutoAction", new { area = "DomesticTrading" }).Data("additionalAutoBorrowData");
            })
          .Update(update =>
          {
              update.Action("UpdateAutoBorrow", "AutoAction", new { area = "DomesticTrading" });
          })
           .Events(events =>
           {
               events.RequestStart("onAutoBorrowRequestStart");
               events.RequestEnd("onAutoBorrowRequestEnd");
           })  
          .PageSize(50)
          .Aggregates(agg =>
              {
                  agg.Add(x => x.MinQuantity).Sum();
                  agg.Add(x => x.Quantity).Sum();
              })
            .Model(model =>
            {
                model.Id(x => x.SLBorrowOrder);
                model.Field(x => x.SLBorrowOrder).Editable(false);
                model.Field(x => x.EntityId).Editable(false);
                model.Field(x => x.IssueId).Editable(false);
                model.Field(x => x.SecurityNumber).Editable(false);
                model.Field(x => x.Ticker).Editable(false);
                model.Field(x => x.BorrowOrderRequest).Editable(false);
                model.Field(x => x.BorrowOrderResponse).Editable(false);
                model.Field(x => x.BorrowOrderSystem).Editable(false);
                model.Field(x => x.BorrowStatus).Editable(false);
                model.Field(x => x.IncomeTracked).Editable(false);
            });
    }))
</div>
<div id="autoBorrowContextMenu" class="context-menu"></div>

