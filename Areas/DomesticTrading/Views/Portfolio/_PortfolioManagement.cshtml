@using System.ComponentModel
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Enums
@using SLTrader.Tools
@using SLTrader.Models
@using BondFire.Entities.Projections

@model string

<style scoped>
    #PortfolioLayoutTable {
        height: 400px;
        width: 500px;
        max-width: 500px;
        margin:0px;
        padding:0px;
    }

    #AccountModelGrid {
        height: 200px;
        width: 200px;
    }

    #PortfolioItemGrid {
        height: 200px;
        width: 200px;
    }

    #PortfolioGrid {
        width:100%;
        height:250px;
    }
    
        #PortfolioLayoutTable {
        border-collapse:collapse;
        width:100%;
    }


    #PortfolioGrid tr {
        padding-bottom: 10px;
    }

        #PortfolioLayoutTable th,
        #PortfolioLayoutTable td {
            min-height: 50px;
            padding: 0px 0px 0px 0px;
        }

</style>

<script>
    function additionalPortfolioDropdownData() {
        var entity = $("#PortfolioAdditioanlDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity
        }
    }

    function additionalAvailableAccountsData() {

        var entityGrid = $("#PortfolioGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        var portfolioId = selectedItem["SLPortfolio"];
        var entity = $("#PortfolioAdditioanlDropdownList").data("kendoDropDownList").value();
        return {
            portfolioId: portfolioId,
            entityId: entity,
        }
    }

    function additionalPortfolioData() {
        var entityGrid = $("#PortfolioGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        var portfolioId = selectedItem["SLPortfolio"];

     
        return {
            portfolioId: portfolioId,
        }
    }

    function onPortfolioChange() {        
        $("#AccountModelGrid").data("kendoGrid").dataSource.read();
        $("#PortfolioItemGrid").data("kendoGrid").dataSource.read();
    }

    function onAccountAdd() {
        var dataItems = [];
        var entityGrid = $("#PortfolioGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        var portfolioId = selectedItem["SLPortfolio"];

        var grid = $('#AccountModelGrid').data('kendoGrid');
        var rows = grid.select();

        rows.each(function (index, row) {
            var selectedItem = grid.dataItem(row);
            dataItems.push(selectedItem);
        });

        $.ajax({
            url: '@Url.Action("AddPortfolioItems","Portfolio", new { area = "DomesticTrading" })',
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify({
                portfolioId: portfolioId,
                accounts: dataItems,
            }),
            success: function(valid) {
                $("#AccountModelGrid").data("kendoGrid").dataSource.read();
                $("#PortfolioItemGrid").data("kendoGrid").dataSource.read();
            },
            error: function(valid) {
                DisplayControllerError(valid);
            }
        });
    }

    function onAccountDelete() {
        var dataItems = [];
        var grid = $("#PortfolioItemGrid").data("kendoGrid")
        var rows = grid.select();

        rows.each(function (index, row) {
            var selectedItem = grid.dataItem(row);
            dataItems.push(selectedItem);
        });

        $.ajax({
            url: '@Url.Action("DeletePortfolioItems","Portfolio", new { area = "DomesticTrading" })',
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify({
                items: dataItems,
            }),
            success: function(valid) {
                $("#AccountModelGrid").data("kendoGrid").dataSource.read();
                $("#PortfolioItemGrid").data("kendoGrid").dataSource.read();
            },
            error: function(valid) {
                DisplayControllerError(valid);
            }
        });
    }

    function onPortfolioError(e)
    {
        DisplayControllerError(e);
    }

    function onPortfolioEdit(e) {
        var entityGrid = $("#PortfolioGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        var input = e.container.find("input");
        setTimeout(function () { input.select(); });
    }


    $(function() {
        $('#PortfolioGrid').on('click', '.excludeAccountChkbx', function() {
            var checked = $(this).is(':checked');
            var grid = $('#PortfolioGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('ExcludeAccounts', checked);
            dataSource.sync();
        });

        $('#PortfolioGrid').on('click', '.tradedVsSettledChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#PortfolioGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('TradedVsSettled', checked);
            dataSource.sync();
        });

        $('#PortfolioGrid').on('click', '.isActiveChkbx', function() {
            var checked = $(this).is(':checked');
            var grid = $('#PortfolioGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('IsActive', checked);
            dataSource.sync();
        });
    });

    function onPortfolioDropdownChange() {
        $("#PortfolioGrid").data("kendoGrid").dataSource.read();
    }

    function onPortfolioDropdownDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    userPreference = valid;

                    var dropdownList = $('#PortfolioAdditioanlDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $('#PortfolioGrid').data("kendoGrid").dataSource.read();
                },
                error: function (valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }
</script>

<table id="PortfolioLayoutTable">
    <tr>
        <td colspan="3">
            @(Html.Kendo().ToolBar()
            .Name("PortfolioToolBar")
            .Resizable(true)
            .Items(items =>
            {
            items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
            items.Add().Template(Html.Kendo().DropDownList()
                            .Name("PortfolioAdditioanlDropdownList")
                            .HtmlAttributes(new { @class = "width90" })
                            .DataTextField("Custodian")
                            .DataValueField("CompanyId")
                            .OptionLabel(LabelHelper.Text("OptionLabel"))
                            .AutoBind(true)                            
                            .AutoWidth(true)
                            .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                        "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                        "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                            .Events(events => events.Change("onPortfolioDropdownChange").DataBound("onPortfolioDropdownDefaultLoad"))
                            .DataSource(dataSource => dataSource
                            .Read(read => read
                            .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                            .SelectedIndex(0).ToHtmlString());
            }))
        </td>
    </tr>
    <tr>
        <td colspan="3">
            @(Html.Kendo().Grid<SL_Portfolio>()
                .Name("PortfolioGrid")
                .Selectable(select => select.Enabled(true).Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
                .Events(events => events.Change("onPortfolioChange").Edit("onPortfolioEdit"))
                .Scrollable()
                .Editable(edit => edit.Enabled(true).Mode(GridEditMode.InLine))
                .NoRecords()
                .AutoBind(false)
                .ToolBar(toolbar => toolbar.Create())
                .Columns(cols =>
                {
                    cols.Bound(x => x.SLPortfolio).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                    cols.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                    cols.Bound(x => x.Name).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                    cols.Bound(x => x.PcFilter).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                    cols.Bound(x => x.ExcludeAccounts).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox'  class='excludeAccountChkbx' #= (ExcludeAccounts) ? checked ='checked' : '' #/>", "");
                    cols.Bound(x => x.TradedVsSettled).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox'  class='tradedVsSettledChkbx' #= (TradedVsSettled) ? checked ='checked' : '' #/>", "");
                    cols.Bound(x => x.IsActive).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox'  class='isActiveChkbx' #= (IsActive) ? checked ='checked' : '' #/>", "");
                    cols.Command(x =>
                    {
                        x.Edit();
                    });
                })
                    .DataSource(ds => ds.Ajax()
                        .ServerOperation(false)
                        .AutoSync(true)
                        .Events(events => events.Error("onPortfolioError"))
                        .Model(model =>
                        {
                            model.Id(x => x.SLPortfolio);
                            model.Field(x => x.EntityId).DefaultValue(Model).Editable(false);
                            model.Field(x => x.PcFilter).DefaultValue("X").Editable(true);
                            model.Field(x => x.ExcludeAccounts).DefaultValue(false).Editable(true);
                            model.Field(x => x.IsActive).DefaultValue(true).Editable(true);
                        })
                        .Read(read => read.Action("LoadPortfolio", "Portfolio", new { area = "DomesticTrading" }).Data("additionalPortfolioDropdownData"))
                        .Create(create => create.Action("AddPortfolio", "Portfolio", new { area = "DomesticTrading" }))
                        .Update(update => update.Action("UpdatePortfolio", "Portfolio", new { area = "DomesticTrading" }))))
        </td>
    </tr>

    <tr>
        <td class="valign-top">
                @LabelHelper.Label("AvailableAccounts")
                 @(Html.Kendo().Grid<AccountModel>()
                    .Name("AccountModelGrid")
                    .AutoBind(false)
                    .Scrollable(scroll => scroll.Enabled(true))
                    .Filterable(filter => filter.Enabled(true))
                    .Selectable(select => select.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Row).Enabled(true))
                    .Columns(cols =>
                    {
                        cols.Bound(x => x.AccountId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                        cols.Bound(x => x.AccountNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");

                    })
                    .DataSource(ds => ds.Ajax()
                        .ServerOperation(false)
                        .Events(events => events.Error("onPortfolioError"))
                        .Read(read => read.Action("LoadAccounts", "Portfolio", new { area = "DomesticTrading" }).Data("additionalAvailableAccountsData"))))
        </td>
         <td class="valign-middle text-center width100" >
            <span>
            @Html.Kendo().Button().Name("AccountAddButton").Content(LabelHelper.Text("AccountAdd")).Events(e => e.Click("onAccountAdd"))
            <br />
            <br />
             @Html.Kendo().Button().Name("AccountDelButton").Content(LabelHelper.Text("AccountDelete")).Events(e => e.Click("onAccountDelete"))
            </span>
        </td>
         <td class="valign-top" >
            @LabelHelper.Label("PortfolioAccounts")
            @(Html.Kendo().Grid<SL_PortfolioItem>()
            .Name("PortfolioItemGrid")
            .AutoBind(false)
            .Selectable(select => select.Mode(GridSelectionMode.Multiple))
            .Scrollable(scroll => scroll.Enabled(true))
            .Columns(cols =>
                {
                    cols.Bound(x => x.SLPortfolioItem).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                    cols.Bound(x => x.AccountNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                    cols.Bound(x => x.PortfolioId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);                   
                })
            .DataSource(ds => ds.Ajax()
                .ServerOperation(false)
                .Events(events => events.Error("onPortfolioError"))
                .Read(read => read.Action("LoadPortfolioItems", "Portfolio", new { area = "DomesticTrading" }).Data("additionalPortfolioData")))
            )
        </td> 
    </tr>
</table>
