@using SLTrader.Enums
@using SLTrader.Tools
@using SLTrader.Models
@using BondFire.Entities
@using BondFire.Entities.Projections
@model IEnumerable<AutoBorrowOrderSuggestionModel>
<style scoped>

    .k-checkbox-label {
        top: -2px;
    }

    #AutoBorrowHelperContent {
        max-width: 1200px;
    }
</style>

<script type="text/javascript">

    function clickAutoBorrowHelperCheck(e) {
        var $cb = $(e);
        var checked = $cb.is(':checked');

        var grid = $("#AutoBorrowHelperGrid").data("kendoGrid");
        var selectedItem = grid.dataItem(grid.select());

        selectedItem["Enabled"] = checked;
    }

    function onAutoBorrowHelperSmartRouteDataBound(e) {
        this.trigger("change");
    }

    function onAutoBorrowHelperSmartRouteSelect(e) {

        var grid = $("#AutoBorrowHelperGrid").data("kendoGrid");
        var selectedItem = grid.dataItem(grid.select());

        selectedItem["ContraEntityId"] = "";
    }

    function onAutoBorrowHelperContraEntitySelect(e) {

        var grid = $("#AutoBorrowHelperGrid").data("kendoGrid");
        var selectedItem = grid.dataItem(grid.select());

        selectedItem["SmartRoute"] = -1;
        selectedItem["SmartRouteName"] = "";
    }

    $(document).ready(function () {
        $('#AutoBorrowHelperContraEntityCheckBox').change(function () {
            $("#AutoBorrowHelperContraEntityDropdownList").data("kendoAutoComplete").enable($(this).is(':checked'));

            if ($('#AutoBorrowHelperSmartRouteCheckBox').is(':checked')) {
                $('input[name=AutoBorrowHelperSmartRouteCheckBox]').attr('checked', !$(this).is(':checked'))
                $("#AutoBorrowHelperSmartRouteDropdownList").data("kendoDropDownList").enable(!$(this).is(':checked'));
            }
        });

        $('#AutoBorrowHelperRebateRateCheckBox').change(function () {
            $("#AutoBorrowHelperRebateRateTextBox").data("kendoNumericTextBox").enable($(this).is(':checked'));
        });

        $('#AutoBorrowHelperMarkCheckBox').change(function () {
            $("#AutoBorrowHelperMarkTextBox").data("kendoNumericTextBox").enable($(this).is(':checked'));
        });

        $('#AutoBorrowHelperExecutingSystemCheckBox').change(function () {
            $("#AutoBorrowHelperExecutingSystemDropdownList").data("kendoAutoComplete").enable($(this).is(':checked'));
        });

        $('#AutoBorrowHelperSmartRouteCheckBox').change(function () {
            $("#AutoBorrowHelperSmartRouteDropdownList").data("kendoDropDownList").enable($(this).is(':checked'));

            if ($('#AutoBorrowHelperContraEntityCheckBox').is(':checked')) {
                $('input[name=AutoBorrowHelperContraEntityCheckBox]').attr('checked', !$(this).is(':checked'))
                $("#AutoBorrowHelperContraEntityDropdownList").data("kendoAutoComplete").enable(!$(this).is(':checked'));
            }
        });

        $('#LocalDetailWindow').data("kendoWindow").center();
    });

    function processAutoBorrowHelperData() {

        try {

            var smartRoute = ($("#AutoBorrowHelperSmartRouteCheckBox").is(':checked')) ? $("#AutoBorrowHelperSmartRouteDropdownList").data("kendoDropDownList").value() : "";
            var contraEntityId = ($("#AutoBorrowHelperContraEntityCheckBox").is(':checked')) ? $("#AutoBorrowHelperContraEntityDropdownList").data("kendoAutoComplete").value() : "";

            var rebateRate = ($("#AutoBorrowHelperRebateRateCheckBox").is(':checked')) ? $("#AutoBorrowHelperRebateRateTextBox").data("kendoNumericTextBox").value() : null;
            var mark = ($("#AutoBorrowHelperMarkCheckBox").is(':checked')) ? $("#AutoBorrowHelperMarkTextBox").data("kendoNumericTextBox").value() : null;
            var executingSystem = $("#AutoBorrowHelperExecutingSystemDropdownList").data("kendoAutoComplete").value();
            var listName = ($("#AutoBorrowHelperListNameCheckBox").is(':checked')) ? document.getElementById("AutoBorrowHelperListNameTextBox").value : "";

            var grid = $('#AutoBorrowHelperGrid').data('kendoGrid');
            var rows = grid.dataSource.data();

            $('#StatusLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing...');


            $("#AutoBorrowApplyHelperChangesButton").data("kendoButton").enable(false);
            $("#AutoBorrowHelperSaveTradesButton").data("kendoButton").enable(false);
            $("#AutoBorrowHelperConfirmTradesButton").data("kendoButton").enable(false);
            $("#AutoBorrowHelperSelectAllButton").data("kendoButton").enable(false);
            $("#AutoBorrowHelperSelectAllButton").data("kendoButton").enable(false);

            $.ajax({
                url: '@Url.Action("ProcessHelperLcorOptions", "SmartRoute", new { area = "DomesticTrading" })',
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({
                    list: rows,
                    listName: listName,
                    smartRoute: smartRoute,
                    contraEntityId: contraEntityId,
                    rebateRate: rebateRate,
                    mark: mark,
                    executingSystem: executingSystem
                }),
                success: function (valid) {
                    grid.dataSource.data(valid);
                    grid.refresh();

                    $("#StatusLabel").text("Sucessfully applied changes to " + (valid.length) + " items.");

                    $("#AutoBorrowApplyHelperChangesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperSaveTradesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperConfirmTradesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperSelectAllButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperSelectAllButton").data("kendoButton").enable(true);

                },
                error: function (valid) {
                    $('#StatusLabel').html('<i class="fa fa-times"></i> Error Processing!');

                    $("#AutoBorrowApplyHelperChangesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperSaveTradesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperConfirmTradesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperSelectAllButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperSelectAllButton").data("kendoButton").enable(true);

                }
            });
        }
        catch (e) {
            $('#StatusLabel').html('<i class="fa fa-times"></i> Error Processing!');
            console.log(e.message);
        }
    }


    function onAutoBorrowHelperSend() {
        var grid = $('#AutoBorrowHelperGrid').data('kendoGrid');
        var rows = grid.dataSource.data();
        var rowCount = 0;
        var processedRowCount = 0;

        $.each(rows, function (i, row) {
            if (row.Enabled) {
                rowCount++;
            }
        });

        $('#StatusLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing...');
        $("#AutoBorrowApplyHelperChangesButton").data("kendoButton").enable(false);
        $("#AutoBorrowHelperSaveTradesButton").data("kendoButton").enable(false);
        $("#AutoBorrowHelperConfirmTradesButton").data("kendoButton").enable(false);
        $("#AutoBorrowHelperSelectAllButton").data("kendoButton").enable(false);
        $("#AutoBorrowHelperSelectAllButton").data("kendoButton").enable(false);

        try {
            $.ajax({
                url: '@Url.Action("ProcessHelperSaveBorrowOrder", "SmartRoute", new { area = "DomesticTrading" })',
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({ list: rows }),
                success: function(valid) {
                    var _grid = $("#AutoBorrowHelperGrid").data("kendoGrid");
                    var _data = _grid.dataSource.data();

                    $.each(_data, function (i, row) {
                        if (row.Enabled) {
                            processedRowCount++;
                        }
                    });

                    grid.dataSource.data(valid);
                    grid.refresh();

                    if (rowCount > 0) {
                        if (processedRowCount == rowCount) {
                            $('#LocalDetailWindow').data("kendoWindow").close();
                        }
                    }

                    $("#StatusLabel").text("Sucessfully added " + (rows.length - valid.length) + " autoborrow items.");

                    $("#AutoBorrowApplyHelperChangesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperSaveTradesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperConfirmTradesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperSelectAllButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperSelectAllButton").data("kendoButton").enable(true);

                },
                error: function(valid) {
                    $('#StatusLabel').html('<i class="fa fa-times"></i> Error Processing!');

                    $("#AutoBorrowApplyHelperChangesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperSaveTradesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperConfirmTradesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperSelectAllButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperSelectAllButton").data("kendoButton").enable(true);

                }
            });
        }
        catch (e) {
            $('#StatusLabel').html('<i class="fa fa-times"></i> Error Processing!');
            console.log(e.message);
        }
    }

    function onAutoBorrowHelperConfirmTrades() {
        var grid = $('#AutoBorrowHelperGrid').data('kendoGrid');
        var rows = grid.dataSource.data();
        var rowCount = 0;
        var processedRowCount = 0;

        $('#StatusLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing...');

        $("#AutoBorrowApplyHelperChangesButton").data("kendoButton").enable(false);
        $("#AutoBorrowHelperSaveTradesButton").data("kendoButton").enable(false);
        $("#AutoBorrowHelperConfirmTradesButton").data("kendoButton").enable(false);
        $("#AutoBorrowHelperSelectAllButton").data("kendoButton").enable(false);
        $("#AutoBorrowHelperSelectAllButton").data("kendoButton").enable(false);

        $.each(rows, function (i, row) {
            if (row.Enabled) {
                rowCount++;
            }
        });

        try {
            $.ajax({
                url: '@Url.Action("ProcessHelperConfirmBorrowOrder", "SmartRoute", new { area = "DomesticTrading" })',
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({ list: rows }),
                success: function(valid) {
                    var _grid = $("#AutoBorrowHelperGrid").data("kendoGrid");
                    var _data = _grid.dataSource.data();

                    $.each(_data, function (i, row) {
                        if (row.Enabled) {
                            processedRowCount++;
                        }
                    });

                    grid.dataSource.data(valid);
                    grid.refresh();

                    if (rowCount > 0) {
                        if (processedRowCount == rowCount) {
                            $('#LocalDetailWindow').data("kendoWindow").close();
                        }
                    }

                    $("#StatusLabel").text("Sucessfully added " + (rows.length - valid.length) + " autoborrow items.");

                    $("#AutoBorrowApplyHelperChangesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperSaveTradesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperConfirmTradesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperSelectAllButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperSelectAllButton").data("kendoButton").enable(true);
                
                },
                error: function(valid) {
                    $('#StatusLabel').html('<i class="fa fa-times"></i> Error Processing!');

                    $("#AutoBorrowApplyHelperChangesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperSaveTradesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperConfirmTradesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperSelectAllButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperSelectAllButton").data("kendoButton").enable(true);

                }
            });
        }
        catch (e) {
            $('#StatusLabel').html('<i class="fa fa-times"></i> Error Processing!');
            console.log(e.message);
        }
    }

    function onAutoBorrowHelperSelectAll() {
        var grid = $('#AutoBorrowHelperGrid').data('kendoGrid');
        var rows = grid.dataSource.data();

        $('#StatusLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing...');

        try {
            $.ajax({
                url: '@Url.Action("ProcessHelperSelectAll", "SmartRoute", new { area = "DomesticTrading" })',
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({ list: rows }),
                success: function(valid) {

                    grid.dataSource.data(valid);
                    grid.refresh();

                    $("#StatusLabel").text("Sucessfully selected " + (valid.length) + " items.");
                },
                error: function(valid) {
                    $('#StatusLabel').html('<i class="fa fa-times"></i> Error Processing!');
                }
            });
        }
        catch (e) {
            $('#StatusLabel').html('<i class="fa fa-times"></i> Error Processing!');
            console.log(e.message);
        }
    }

    function onAutoBorrowHelperRemoveFakeCusips() {
        var grid = $('#AutoBorrowHelperGrid').data('kendoGrid');
        var rows = grid.dataSource.data();
        var _autoBorrowRemoveRows = [];


        $('#StatusLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing...');

        $("#AutoBorrowApplyHelperChangesButton").data("kendoButton").enable(false);
        $("#AutoBorrowHelperSaveTradesButton").data("kendoButton").enable(false);
        $("#AutoBorrowHelperConfirmTradesButton").data("kendoButton").enable(false);
        $("#AutoBorrowHelperSelectAllButton").data("kendoButton").enable(false);
        $("#AutoBorrowHelperSelectAllButton").data("kendoButton").enable(false);

        var totalItems = rows.length;

        try {
            $.ajax({
                url: '@Url.Action("ProcessRemoveFakeSecurities", "SmartRoute", new { area = "DomesticTrading" })',
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({ list: rows }),
                success: function (valid) {

                    grid.dataSource.data(valid);
                    grid.refresh();

                    var removed = totalItems - valid.length;
                    $("#StatusLabel").text("Sucessfully removed " + removed + " items.");

                    $("#AutoBorrowApplyHelperChangesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperSaveTradesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperConfirmTradesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperSelectAllButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperSelectAllButton").data("kendoButton").enable(true);

                },
                error: function (valid) {
                    $('#StatusLabel').html('<i class="fa fa-times"></i> Error Processing!');

                    $("#AutoBorrowApplyHelperChangesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperSaveTradesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperConfirmTradesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperSelectAllButton").data("kendoButton").enable(true);
                    $("#AutoBorrowHelperSelectAllButton").data("kendoButton").enable(true);
                }
            });
        }
        catch (e) {
            $('#StatusLabel').html('<i class="fa fa-times"></i> Error Processing!');
            console.log(e.message);
        }


    }

    function onSmartRouteListData() {
        var entityId = "";

        try {
            if ('@Model.ToList().Count()' > 0) {
                entityId = "@Model.ToList().Distinct().First().EntityId";
            }
        }
        catch (e) {
            entityId = "";
        }

        return {
            entityId: entityId,
        }
    }

    function additionalAutoBorrowHelperData() {
        var entityId = "";

        try {
            if ('@Model.ToList().Count()' > 0) {
                entityId = "@Model.ToList().Distinct().First().EntityId";
            }
        }
        catch (e) {
            entityId = "";
        }

        return {
            entityId: entityId,
        }
    }

    function onAutoBorrowHelperEdit(e) {
        var input = e.container.find("input");
        setTimeout(function () { input.select(); });
    }


    $(function () {
        $('#AutoBorrowHelperGrid').on('click', '.enabledAutoBorrowHelperChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#AutoBorrowHelperGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('Enabled', checked);
            grid.dataSource.sync();
        });
    });
</script>

@if (Model.ToList().Count == 0)
{
     <div class="div-processing-message">
       <h2>No Data Selected / Processed</h2>
   </div>
}
else
{
    @(Html.Kendo().ToolBar()
                .Name("AutoBorrowScratchPadButtonToolBar")
                .Resizable(true)
                .Items(items =>
                {                    
                    items.Add().Template(Html.Kendo().Button().Enable(true).Name("AutoBorrowApplyHelperChangesButton").Events(e => e.Click("processAutoBorrowHelperData")).Content(@<text><i class="fa fa-repeat"></i>&nbsp;Apply Options</text>).ToHtmlString());
                    items.Add().Template(Html.Kendo().Button().Enable(true).Name("AutoBorrowHelperSaveTradesButton").Events(e => e.Click("onAutoBorrowHelperSend")).Content(@<text> <i class="icon-check color-green"></i>&nbsp;Save AutoBorrow</text>).ToHtmlString());
                    items.Add().Template(Html.Kendo().Button().Enable(true).Name("AutoBorrowHelperConfirmTradesButton").Events(e => e.Click("onAutoBorrowHelperConfirmTrades")).Content(@<text> <i class="icon-check color-green"></i>&nbsp;Confirm AutoBorrow</text>).ToHtmlString());
                    items.Add().Template(Html.Kendo().Button().Enable(true).Name("AutoBorrowHelperSelectAllButton").Events(e => e.Click("onAutoBorrowHelperSelectAll")).Content(@<text><i class="icon-check color-green"></i>&nbsp;Select All</text>).ToHtmlString());
                    items.Add().Template(Html.Kendo().Button().Enable(true).Name("AutoBorrowHelperRemoveFakeCusipButton").Events(e => e.Click("onAutoBorrowHelperRemoveFakeCusips")).Content(@<text><i class="fa fa-minus-circle color-red"></i>&nbsp;Remove Int'l</text>).ToHtmlString());
                }))
    <div class="toolbar">  
    <table class="toolbar">
        <tr>
            <td>
                @Html.Kendo().CheckBox().Name("AutoBorrowHelperListNameCheckBox").Label(LabelHelper.Text("ListName"))
            </td>                          
            <td>
                @Html.TextBox( "AutoBorrowHelperListNameTextBox", "", new { @class = "k-textbox width90" } )
            </td>

            <td>
                @Html.Kendo().CheckBox().Name("AutoBorrowHelperSmartRouteCheckBox").Label(LabelHelper.Text("SmartRouteLabel"))          
            </td>
            <td>
                @(Html.Kendo().DropDownList()
                .Name( "AutoBorrowHelperSmartRouteDropdownList" )
                .HtmlAttributes(new { @class= "width120" })
                .DataTextField( "Name" )
                .DataValueField( "Name" )
                .Enable( false )
                .AutoBind( false )
                .OptionLabel( LabelHelper.Text( "OptionLabel" ) )
                .HtmlAttributes( new { @class = "width120" } )
                .DataSource( dataSource => dataSource.Read( read => read.Action( "Read_SmartRouteListsDropdown", "SmartRoute", new { area = "DomesticTrading" } ).Data( "additionalAutoBorrowHelperData" ) ) ))
            </td>

            <td>
                @Html.Kendo().CheckBox().Name("AutoBorrowHelperContraEntityCheckBox").Label(LabelHelper.Text("ContraEntity"))      
            </td>
            <td>
                @(Html.Kendo().AutoComplete()
                        .Name("AutoBorrowHelperContraEntityDropdownList")
                        .DataTextField("ContraEntity")
                        .HtmlAttributes(new { ID = "AutoBorrowHelperContraEntityDropdownList", @class = "width90" })
                        .Enable(false)
                        .DataSource(source => source.Read(read => read.Action("Read_ContraEntityDropdown", "ContraEntity", new { area = "DomesticTrading" }).Data("additionalAutoBorrowHelperData")))
                        .Events(events => events.Open("onContraEntityAutoCompleteResize"))
                        .Template("<span class=\"k-state-default\">#:data.ContraEntity# #:data.AccountName# </span>")
                        .Filter("startswith"))
            </td>
            </tr>
            <tr>
            <td>
                @Html.Kendo().CheckBox().Name("AutoBorrowHelperRebateRateCheckBox").Label(LabelHelper.Text("RebateRate"))            
            </td>
            <td>
                @Html.Kendo().NumericTextBox().Name( "AutoBorrowHelperRebateRateTextBox" ).Spinners( false ).Value( 0 ).Enable( false ).HtmlAttributes( new { @class = "width90" } ).Min( -99 )
            </td>
            <td>
                @Html.Kendo().CheckBox().Name("AutoBorrowHelperMarkCheckBox").Label(LabelHelper.Text("Mark"))                             
            </td>
            <td>
                @Html.Kendo().NumericTextBox().Name( "AutoBorrowHelperMarkTextBox" ).Spinners( false ).Value( 1.02 ).Format( "#,##0.00" ).Enable( false ).HtmlAttributes( new { @class = "width60" } )
            </td>
            <td>
                @Html.Kendo().CheckBox().Name("AutoBorrowHelperExecutingSystemCheckBox").Label(LabelHelper.Text("ExecutingSystem"))
            </td> 
            <td>
                @(Html.Kendo().AutoComplete()
                        .Name( "AutoBorrowHelperExecutingSystemDropdownList" )
                        .HtmlAttributes( new { ID = "AutoBorrowHelperExecutingSystemDropdownList", @class = "width90" } )
                                .Suggest( true )
                                .Enable(false)
                                .BindTo( Enum.GetNames( typeof( SL_ExecutionSystemType ) ).ToList() )
                                .Value( SL_ExecutionSystemType.LOANET.ToString() ))
            </td>
        </tr>
    </table>
</div>

<hr class="hr-white">

<div id="AutoBorrowHelperContent" class="grid-div">
    @(
 Html.Kendo().Grid( Model )
    .Name( "AutoBorrowHelperGrid" )
    .HtmlAttributes( new { @style = "grid" } )
    .Sortable( sort =>
               {
                   sort.AllowUnsort( true );
                   sort.Enabled( true );
                   sort.SortMode( GridSortMode.MultipleColumn );
               } )
    .Scrollable()
    .Filterable()
    .Navigatable()
    .NoRecords()
    .Events( events => events.Edit( "onAutoBorrowHelperEdit" ) )
    .Editable( edit => edit.Mode( GridEditMode.InCell ).Enabled( true ).DisplayDeleteConfirmation(false) )
    .Selectable( seclect => seclect.Mode( GridSelectionMode.Multiple ) )
    .Columns( cols =>
    {
        cols.Bound( x => x.Enabled ).GetColumnFormat( ColumnTypeEnum.String, false, "<input type='checkbox' class='enabledAutoBorrowHelperChkbx' #= (Enabled) ? checked ='checked' : '' #/>", "" );
        cols.Bound( x => x.EntityId ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
        cols.Bound( x => x.AutoBorrowOrderSystem ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        cols.Bound( x => x.ListName ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        cols.Bound( x => x.SmartRoute ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
        cols.Bound( x => x.SmartRouteName ).GetColumnFormat( ColumnTypeEnum.String, false, "", "_AutoBorrowHelperSmartRouteDropdown" );
        cols.Bound( x => x.ContraEntityId ).GetColumnFormat( ColumnTypeEnum.String, false, "", "_AutoBorrowHelperContraEntityAutoComplete" );
        cols.Bound( x => x.IssueId ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
        cols.Bound( x => x.SecurityNumber ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        cols.Bound( x => x.Ticker ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        cols.Bound( x => x.MaxPrice ).GetColumnFormat( ColumnTypeEnum.Rate, false, "", "DecimalNumber" );
        cols.Bound( x => x.Quantity ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(Quantity)#", "QuantityDecimalNumber" );
        cols.Bound( x => x.RebateRate ).GetColumnFormat( ColumnTypeEnum.Rate, false, "#=GetRateDirection(RebateRate)#", "RebateRateNumber" );
        cols.Bound( x => x.Mark ).GetColumnFormat( ColumnTypeEnum.Margin, false, "#=GetRateDirection(Mark)#", "DecimalNumber" );
        cols.Bound( x => x.SubmissionType ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        cols.Bound( x => x.MemoInfo ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        cols.Command( c => c.Destroy() ).Width( 80 );
    } )
    .Resizable( resize => resize.Columns( true ) )
    .DataSource( ds => ds.Ajax()
        .ServerOperation( false )
        .AutoSync( true )
        .Create( create => create.Action( "UpdateAutoBorrowHelper", "SmartRoute", new { area = "DomesticTrading" } ) )
        .Update( update => update.Action( "UpdateAutoBorrowHelper", "SmartRoute", new { area = "DomesticTrading" } ) )
        .Destroy( destroy => destroy.Action( "UpdateAutoBorrowHelper", "SmartRoute", new { area = "DomesticTrading" } ) )
        .Aggregates( agg => agg.Add( x => x.Quantity ).Sum() )
        .Model( model =>
        {
            model.Id( x => x.ModelId );
            model.Field( x => x.ModelId ).Editable( false );
            model.Field( x => x.Enabled ).Editable( true );
            model.Field( x => x.EntityId ).Editable( false );
            model.Field( x => x.IssueId ).Editable( false );
            model.Field( x => x.SecurityNumber ).Editable( false );
            model.Field( x => x.Ticker ).Editable( false );
            model.Field( x => x.MemoInfo ).Editable( false );
            model.Field( x => x.SubmissionType ).Editable( false );
        } ) ))
</div>
<table>
    <tr>
        <td>
            <label id="StatusLabel"></label>
        </td>
    </tr>
</table>
}

