@using SLTrader.Enums
@using SLTrader.Tools
@using SLTrader.Models
@using BondFire.Entities
@using BondFire.Entities.Projections
@model IEnumerable<AutoBorrowOrderSuggestionModel>

<style scoped>
    #AutoBorrowScratchpadListTextBox {
        width: 99%;
        height: 150px;
    }

    .k-checkbox-label {
        top: -2px;
    }
   
   #AutoBorrowContent {
        max-width:1200px;
    }
</style>

<script type="text/javascript">
    function clickAutoBorrowScratchPadCheck(e) {
        var $cb = $(e);
        var checked = $cb.is(':checked');

        var grid = $("#AutoBorrowScratchPadGrid").data("kendoGrid");
        var selectedItem = grid.dataItem(grid.select());

        selectedItem["Enabled"] = checked;
    }

    function onAutoBorrowScratchPadSmartRouteDataBound(e) {
        this.trigger("change");
    }

    function onAutoBorrowScratchPadSmartRouteSelect(e) {

        var grid = $("#AutoBorrowScratchPadGrid").data("kendoGrid");
        var selectedItem = grid.dataItem(grid.select());

        selectedItem["ContraEntityId"] = "";
    }

    function onAutoBorrowScratchPadContraEntitySelect(e) {

        var grid = $("#AutoBorrowScratchPadGrid").data("kendoGrid");
        var selectedItem = grid.dataItem(grid.select());

        selectedItem["SmartRoute"] = -1;
        selectedItem["SmartRouteName"] = "";
    }

    function onAutoBorrowScratchPadCheckData() {
        try {
            CheckGridData('#AutoBorrowScratchPadGrid');
        }
        catch (e) {
            console.log(e.message);
        }

        try {
            var grid = $("#AutoBorrowScratchPadGrid").data("kendoGrid");
            var data = grid.dataSource.data();

            $.each(data, function (i, row) {
                if ((row.MemoInfo != '') && (row.MemoInfo != null))
                    $('tr[data-uid="' + row.uid + '"] ').addClass("rejectedRecord");
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    $(document).ready(function () {
        $('#AutoBorrowScratchPadContraEntityCheckBox').change(function () {
            $("#AutoBorrowScratchPadContraEntityDropdownList").data("kendoAutoComplete").enable($(this).is(':checked'));

            if ($('#AutoBorrowScratchPadSmartRouteCheckBox').is(':checked')) {
                $('input[name=AutoBorrowScratchPadSmartRouteCheckBox]').attr('checked', !$(this).is(':checked'))
                $("#AutoBorrowScratchPadSmartRouteDropdownList").data("kendoDropDownList").enable(!$(this).is(':checked'));
            }
        });



        $('#AutoBorrowScratchpadEntityEntityCheckBox').change(function () {
            $("#AutoBorrowScratchpadEntityDropdownList").data("kendoDropDownList").enable($(this).is(':checked'));
        });

        $('#AutoBorrowScratchPadRebateRateCheckBox').change(function () {
            $("#AutoBorrowScratchPadRebateRateTextBox").data("kendoNumericTextBox").enable($(this).is(':checked'));
        });

        $('#AutoBorrowScratchPadMarkCheckBox').change(function () {
            $("#AutoBorrowScratchPadMarkTextBox").data("kendoNumericTextBox").enable($(this).is(':checked'));
        });

        $('#AutoBorrowExecutingSystemCheckBox').change(function () {
            $("#AutoBorrowExecutingSystemDropdownList").data("kendoAutoComplete").enable($(this).is(':checked'));
        });

        $('#AutoBorrowScratchPadSmartRouteCheckBox').change(function () {
            $("#AutoBorrowScratchPadSmartRouteDropdownList").data("kendoDropDownList").enable($(this).is(':checked'));

            if ($('#AutoBorrowScratchPadContraEntityCheckBox').is(':checked')) {
                $('input[name=AutoBorrowScratchPadContraEntityCheckBox]').attr('checked', !$(this).is(':checked'))
                $("#AutoBorrowScratchPadContraEntityDropdownList").data("kendoAutoComplete").enable(!$(this).is(':checked'));
            }
        });

        $('#LocalDetailWindow').data("kendoWindow").center();
    });

    function processAutoBorrowScratchPadData() {

        try {

            var smartRoute = ($("#AutoBorrowScratchPadSmartRouteCheckBox").is(':checked')) ? $("#AutoBorrowScratchPadSmartRouteDropdownList").data("kendoDropDownList").value() : "";
            var contraEntityId = ($("#AutoBorrowScratchPadContraEntityCheckBox").is(':checked')) ? $("#AutoBorrowScratchPadContraEntityDropdownList").data("kendoAutoComplete").value() : "";

            var rebateRate = ($("#AutoBorrowScratchPadRebateRateCheckBox").is(':checked')) ? $("#AutoBorrowScratchPadRebateRateTextBox").data("kendoNumericTextBox").value() : null;
            var mark = ($("#AutoBorrowScratchPadMarkCheckBox").is(':checked')) ? $("#AutoBorrowScratchPadMarkTextBox").data("kendoNumericTextBox").value() : null;
            var executingSystem = $("#AutoBorrowExecutingSystemDropdownList").data("kendoAutoComplete").value();

            var listName = ($("#AutoBorrowScratchPadListNameCheckBox").is(':checked')) ? document.getElementById("AutoBorrowScratchPadListNameTextBox").value : "";

            var grid = $('#AutoBorrowScratchPadGrid').data('kendoGrid');
            var rows = grid.dataSource.data();

            $('#StatusLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing...');

            $.ajax({
                url: '@Url.Action("ProcessScratchPadLcorOptions", "SmartRoute", new { area = "DomesticTrading" })',
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({
                    list: rows,
                    listName: listName,
                    smartRoute: smartRoute,
                    contraEntityId: contraEntityId,
                    rebateRate: rebateRate,
                    mark: mark,
                    executingSystem: executingSystem
                }),
                success: function(valid) {
                    grid.dataSource.data(valid);
                    grid.refresh();

                    $("#StatusLabel").text("Sucessfully applied changes to " + (valid.length) + " items.");
                },
                error: function(valid) {
                    $('#StatusLabel').html('<i class="fa fa-times"></i> Error Processing!');
                }
            });
        }
        catch (e) {
            $('#StatusLabel').html('<i class="fa fa-times"></i> Error Processing!');
        }
    }


    function onAutoBorrowScratchPadSend() {
        var grid = $('#AutoBorrowScratchPadGrid').data('kendoGrid');
        var rows = grid.dataSource.data();
        var rowCount = 0;
        var processedRowCount = 0;

        $('#StatusLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing...');
        $("#AutoBorrowScratchPadSaveTradesButton").data("kendoButton").enable(false);

        $.each(rows, function (i, row) {
            if (row.Enabled) {
                rowCount++;
            }
        });


        try {
            $.ajax({
                url: '@Url.Action("ProcessHelperSaveBorrowOrder", "SmartRoute", new { area = "DomesticTrading" })',
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({ list: rows }),
                success: function (valid) {

                    var _grid = $("#AutoBorrowScratchPadGrid").data("kendoGrid");
                    var _data = _grid.dataSource.data();

                    $.each(_data, function (i, row) {
                        if (row.Enabled) {
                             processedRowCount++;
                        }
                    });

                    grid.dataSource.data(valid);
                    grid.refresh();

                    $('#AutoBorrowSummaryGrid').data("kendoGrid").dataSource.read();
                    $("#StatusLabel").text("Sucessfully added " + (rows.length - valid.length) + " autoborrow items.");
                    $("#AutoBorrowScratchPadSaveTradesButton").data("kendoButton").enable(true);

                    if (rowCount > 0) {
                        if (processedRowCount == rowCount) {
                            $('#LocalDetailWindow').data("kendoWindow").close();
                        }
                    }
                },
                error: function (valid) {
                    $('#StatusLabel').html('<i class="fa fa-times"></i> Error Processing!');
                    $("#AutoBorrowScratchPadSaveTradesButton").data("kendoButton").enable(true);
                }
            })
        }
        catch (e) {
            $('#StatusLabel').html('<i class="fa fa-times"></i> Error Processing!');
            console.log(e.message);
        }
    }

        function onAutoBorrowScratchConfirmTrades() {
            var grid = $('#AutoBorrowScratchPadGrid').data('kendoGrid');
        var rows = grid.dataSource.data();
        var rowCount = 0;
        var processedRowCount = 0;

        $('#StatusLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing...');
        $("#AutoBorrowScratchPadSaveTradesButton").data("kendoButton").enable(false);

        $.each(rows, function (i, row) {
            if (row.Enabled) {
                rowCount++;
            }
        });

        try {
            $.ajax({
                url: '@Url.Action("ProcessHelperConfirmBorrowOrder", "SmartRoute", new { area = "DomesticTrading" })',
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({ list: rows }),
                success: function(valid) {
                    var _grid = $("#AutoBorrowScratchPadGrid").data("kendoGrid");
                    var _data = _grid.dataSource.data();

                    $.each(_data, function (i, row) {
                        if (row.Enabled) {
                            processedRowCount++;
                        }
                    });

                    grid.dataSource.data(valid);
                    grid.refresh();

                    if (rowCount > 0) {
                        if (processedRowCount == rowCount) {
                            $('#LocalDetailWindow').data("kendoWindow").close();
                        }
                    }

                    $("#StatusLabel").text("Sucessfully added " + (rows.length - valid.length) + " autoborrow items.");
                },
                error: function(valid) {
                    $('#StatusLabel').html('<i class="fa fa-times"></i> Error Processing!');                    
                }
            });
        }
        catch (e) {
            $('#StatusLabel').html('<i class="fa fa-times"></i> Error Processing!');
            console.log(e.message);
        }
    }

    function onAutoBorrowScratchPadSelectAll() {
        var grid = $('#AutoBorrowScratchPadGrid').data('kendoGrid');
        var rows = grid.dataSource.data();

        $('#StatusLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing...');

        try {
            $.ajax({
                url: '@Url.Action("ProcessHelperSelectAll", "SmartRoute", new { area = "DomesticTrading" })',
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({ list: rows }),
                success: function(valid) {

                    grid.dataSource.data(valid);
                    grid.refresh();

                    $("#StatusLabel").text("Sucessfully selected " + (valid.length) + " items.");
                },
                error: function(valid) {
                    $('#StatusLabel').html('<i class="fa fa-times"></i> Error Processing!');
                }
            });
        }
        catch (e) {
            $('#StatusLabel').html('<i class="fa fa-times"></i> Error Processing!');
            console.log(e.message);
        }
    }

    function onAutoBorrowScratchpadListParse() {

        try {
            var grid = $('#AutoBorrowScratchPadGrid').data('kendoGrid');
            var entityId = $("#AutoBorrowScratchpadEntityDropdownList").data("kendoDropDownList").value();

            var smartRoute = ($("#AutoBorrowScratchPadSmartRouteCheckBox").is(':checked')) ? $("#AutoBorrowScratchPadSmartRouteDropdownList").data("kendoDropDownList").value() : "";
            var contraEntityId = ($("#AutoBorrowScratchPadContraEntityCheckBox").is(':checked')) ? $("#AutoBorrowScratchPadContraEntityDropdownList").data("kendoAutoComplete").value() : "";

            var rebateRate = ($("#AutoBorrowScratchPadRebateRateCheckBox").is(':checked')) ? $("#AutoBorrowScratchPadRebateRateTextBox").data("kendoNumericTextBox").value() : null;
            var mark = ($("#AutoBorrowScratchPadMarkCheckBox").is(':checked')) ? $("#AutoBorrowScratchPadMarkTextBox").data("kendoNumericTextBox").value() : null;
            var executingSystem = $("#AutoBorrowExecutingSystemDropdownList").data("kendoAutoComplete").value();

            var listName = ($("#AutoBorrowScratchPadListNameCheckBox").is(':checked')) ? document.getElementById("AutoBorrowScratchPadListNameTextBox").value : "";

            var items = document.getElementById('AutoBorrowScratchpadListTextBox').value;

            $('#StatusLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing...');

            $.ajax({
                url: '@Url.Action("LoadList", "SmartRoute", new { area = "DomesticTrading" })',
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({
                    entityId: entityId,
                    list: items,
                    listName: listName,
                    smartRoute: smartRoute,
                    contraEntityId: contraEntityId,
                    rebateRate: rebateRate,
                    mark: mark,
                    executingSystem : executingSystem
                }),
                success: function (valid) {
                    grid.dataSource.data(valid);
                    grid.refresh();

                    $("#StatusLabel").text("Sucessfully parsed " + (valid.length) + " items.");

                    $("#AutoBorrowApplyScratchPadChangesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowScratchPadSaveTradesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowScratchPadConfirmTradesButton").data("kendoButton").enable(true);
                    $("#AutoBorrowScratchPadSelectAllButton").data("kendoButton").enable(true);
                },
                error: function (valid) {
                    $('#StatusLabel').html('<i class="fa fa-times"></i> Error Processing!');
                }
            })
        }
        catch (e) {
            $('#StatusLabel').html('<i class="fa fa-times"></i> Error Processing!');
            console.log(e.message);
        }
    }

    function onAutoBorrowScratchPadDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    userPreference = valid;

                    var dropdownList = $('#AutoBorrowScratchpadEntityDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });
                },
                error: function (valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function additionalAutoBorrowScratchPadData() {
        var entityId = $("#AutoBorrowScratchpadEntityDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entityId,
        }
    }

    function onAutoBorrowScratchPadEdit(e) {
        var input = e.container.find("input");
        setTimeout(function () { input.select(); });
    }

    function onAutoBorrowScratchPadEntityChange(e) {
        $("#AutoBorrowScratchPadSmartRouteDropdownList").data("kendoDropDownList").dataSource.read();
    }
</script>

<div id="AutoBorrowContent" class="grid-div">

    @(Html.Kendo().ToolBar()
                .Name("AutoBorrowScratchPadButtonToolBar")
                .Resizable(true)
                .Items(items =>
                {
                    items.Add().Template(Html.Kendo().Button().Name("AutoBorrowParseDataButton").Events(e => e.Click("onAutoBorrowScratchpadListParse")).Content(@<text><i class="fa fa-pencil"></i>&nbsp;Parse List</text>).ToHtmlString());
                    items.Add().Template(Html.Kendo().Button().Enable(false).Name("AutoBorrowApplyScratchPadChangesButton").Events(e => e.Click("processAutoBorrowScratchPadData")).Content(@<text><i class="fa fa-repeat"></i>&nbsp;Apply Options</text>).ToHtmlString());                    
                    items.Add().Template(Html.Kendo().Button().Enable(false).Name("AutoBorrowScratchPadSaveTradesButton").Events(e => e.Click("onAutoBorrowScratchPadSend")).Content(@<text> <i class="icon-check color-green" ></i>&nbsp;Save AutoBorrow</text>).ToHtmlString());
                    items.Add().Template(Html.Kendo().Button().Enable(false).Name("AutoBorrowScratchPadConfirmTradesButton").Events(e => e.Click("onAutoBorrowScratchConfirmTrades")).Content(@<text> <i class="icon-check color-green"></i>&nbsp;Confirm AutoBorrow</text>).ToHtmlString());
                    items.Add().Template(Html.Kendo().Button().Enable(false).Name("AutoBorrowScratchPadSelectAllButton").Events(e => e.Click("onAutoBorrowScratchPadSelectAll")).Content(@<text><i class="icon-check color-green" ></i>&nbsp;Select All</text>).ToHtmlString());                    
                })) 
    <table id="ScratchPadButtonOptionToolBar" class="toolbar">
        <tr>
            <td>
                @Html.Kendo().CheckBox().Name("AutoBorrowScratchpadEntityEntityCheckBox").Label(LabelHelper.Text("Entity"))           
            </td>
            <td>
                @(Html.Kendo().DropDownList()
                        .Name("AutoBorrowScratchpadEntityDropdownList")
                        .DataTextField("Custodian")
                        .DataValueField("CompanyId")
                        .OptionLabel(LabelHelper.Text("OptionLabel"))
                        .Animation(true)
                        .AutoBind(true)
                        .Enable(false)
                                .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                               "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                               "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                        .HtmlAttributes(new { @class="width90" })
                                .Events(events => events.DataBound("onAutoBorrowScratchPadDefaultLoad").Open("onContraEntityAutoCompleteResize").Change("onAutoBorrowScratchPadEntityChange"))
                        .DataSource(dataSource => dataSource
                        .Read(read => read.Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                        .SelectedIndex(1))
            </td>
            <td>
                @Html.Kendo().CheckBox().Name("AutoBorrowScratchPadListNameCheckBox").Label(LabelHelper.Text("ListName"))
            </td>
            <td>
                @Html.TextBox("AutoBorrowScratchPadListNameTextBox", "", new { @class = "k-textbox width90" })
            </td>
            <td>
                @Html.Kendo().CheckBox().Name("AutoBorrowScratchPadSmartRouteCheckBox").Label(LabelHelper.Text("SmartRouteLabel"))
            </td>
            <td>
                @(Html.Kendo().DropDownList()
                .Name("AutoBorrowScratchPadSmartRouteDropdownList")
                .DataTextField("Name")
                .DataValueField("Name")
                .Enable(false)
                .AutoBind(false)
                .OptionLabel(LabelHelper.Text("OptionLabel"))
                .HtmlAttributes(new { @class="width120" })
                .DataSource(dataSource => dataSource.Read(read => read.Action("Read_SmartRouteListsDropdown", "SmartRoute", new { area = "DomesticTrading" }).Data("additionalAutoBorrowScratchPadData"))))
            </td>
        </tr>
        <tr>
            <td>
                @Html.Kendo().CheckBox().Name("AutoBorrowScratchPadContraEntityCheckBox").Label(LabelHelper.Text("ContraEntity"))                        
            </td>
            <td>
                @(Html.Kendo().AutoComplete()
                        .Name("AutoBorrowScratchPadContraEntityDropdownList")
                        .DataTextField("ContraEntity")
                        .Enable(false)
                        .HtmlAttributes(new { @class="width90", ID = "AutoBorrowScratchPadContraEntityDropdownList" })
                        .DataSource(source => source.Read(read => read.Action("Read_ContraEntityDropdown", "ContraEntity", new { area = "DomesticTrading" }).Data("additionalAutoBorrowScratchPadData")))
                        .Events(events => events.Open("onContraEntityAutoCompleteResize"))
                        .Template("<span class=\"k-state-default\">#:data.ContraEntity# #:data.AccountName# </span>")
                        .Filter("startswith"))
            </td>

            <td>
                @Html.Kendo().CheckBox().Name("AutoBorrowScratchPadRebateRateCheckBox").Label(LabelHelper.Text("RebateRate"))
            </td>
            <td>
                @Html.Kendo().NumericTextBox().Name( "AutoBorrowScratchPadRebateRateTextBox" ).Spinners( false ).Value( 0 ).Enable( false ).Min( -99 ).HtmlAttributes(new { @class = "width90" })
            </td>
            <td>
                @Html.Kendo().CheckBox().Name("AutoBorrowScratchPadMarkCheckBox").Label(LabelHelper.Text("Mark"))
            </td>
            <td>
                @Html.Kendo().NumericTextBox().Name("AutoBorrowScratchPadMarkTextBox").Spinners(false).Value(1.02).Format("#,##0.00").Enable(false).HtmlAttributes(new { @class = "width90" })
            </td>
            </tr>
        <tr>
            <td>
                @Html.Kendo().CheckBox().Name("AutoBorrowExecutingSystemCheckBox").Label(LabelHelper.Text("ExecutingSystem"))
            </td>
            <td>
                @(Html.Kendo().AutoComplete()
                                   .Name( "AutoBorrowExecutingSystemDropdownList" )
                                .HtmlAttributes( new { ID = "AutoBorrowExecutingSystemDropdownList", @class = "width90" } )
                                .Suggest( true )
                                .Enable( false )
                                .BindTo( Enum.GetNames( typeof( SL_ExecutionSystemType ) ).ToList() )
                                .Value( SL_ExecutionSystemType.LOANET.ToString() ))
            </td>
        </tr>
    </table>

    @Html.TextArea("AutoBorrowScratchpadListTextBox")

    @(
 Html.Kendo().Grid(Model)
    .Name("AutoBorrowScratchPadGrid")
    .HtmlAttributes(new { @class = "grid" })
    .Sortable(sort =>
               {
                   sort.AllowUnsort(true);
                   sort.Enabled(true);
                   sort.SortMode(GridSortMode.MultipleColumn);
               })
    .Scrollable()
    .Filterable()
    .Navigatable()
    .NoRecords()
    .Events(events => events.Edit("onAutoBorrowScratchPadEdit").DataBound("onAutoBorrowScratchPadCheckData"))
    .Editable(edit => edit.Mode(GridEditMode.InCell).Enabled(true))
    .Selectable(seclect => seclect.Mode(GridSelectionMode.Multiple))
    .Columns(cols =>
    {
        cols.Bound(x => x.Enabled).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox' onClick='clickAutoBorrowScratchPadCheck(this)' #= (Enabled) ? checked ='checked' : '' #/>", "");
        cols.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        cols.Bound( x => x.AutoBorrowOrderSystem ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        cols.Bound(x => x.ListName).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.SmartRoute).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        cols.Bound(x => x.SmartRouteName).GetColumnFormat(ColumnTypeEnum.String, false, "", "_AutoBorrowScratchPadSmartRouteDropdown");
        cols.Bound(x => x.ContraEntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "_AutoBorrowScratchPadContraEntityAutoComplete");
        cols.Bound(x => x.IssueId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        cols.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.MaxPrice).GetColumnFormat(ColumnTypeEnum.Rate, false, "", "DecimalNumber");
        cols.Bound(x => x.Quantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(Quantity)#", "QuantityDecimalNumber");
        cols.Bound(x => x.RebateRate).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(RebateRate)#", "RebateRateNumber");
        cols.Bound(x => x.Mark).GetColumnFormat(ColumnTypeEnum.Margin, false, "#=GetRateDirection(Mark)#", "DecimalNumber");
        cols.Bound(x => x.SubmissionType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.MemoInfo).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Command(c => c.Destroy()).Width(80);   
    })
    .Resizable(resize => resize.Columns(true))
    .DataSource(ds => ds.Ajax()
        .ServerOperation(false)
        .AutoSync(true)
        .Create(create => create.Action("UpdateAutoBorrowScratchPad", "SmartRoute", new { area = "DomesticTrading" }))
        .Update(update => update.Action("UpdateAutoBorrowScratchPad", "SmartRoute", new { area = "DomesticTrading" }))
        .Destroy(destroy => destroy.Action("UpdateAutoBorrowScratchPad", "SmartRoute", new { area = "DomesticTrading" }))
        .Aggregates(agg => agg.Add(x => x.Quantity).Sum())
        .Model(model =>
        {
            model.Id(x => x.ModelId);
            model.Field(x => x.ModelId).Editable(false);
            model.Field(x => x.Enabled).Editable(false);
            model.Field(x => x.EntityId).Editable(false);
            model.Field(x => x.IssueId).Editable(false);
            model.Field(x => x.SecurityNumber).Editable(false);
            model.Field(x => x.Ticker).Editable(false);
            model.Field(x => x.MemoInfo).Editable(false);
            model.Field(x => x.SubmissionType).Editable(false);
        })))
</div>

<table>
    <tr>
        <td>
            <label id="StatusLabel"></label>
        </td>
    </tr>
</table>


