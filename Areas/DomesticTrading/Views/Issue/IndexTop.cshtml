@using SLTrader.Tools
@using BondFire.Entities
@using SLTrader.Helpers.SessionHelper

@model SecurityPanelModel
<style scoped> 
    #IssueWrapper {
        height: 100%;
    }

    #IssueTable {
        height:100%;   
        padding: 0px 3px 0px 0px;        
        border-collapse:collapse;        
    }

    #IssueTable td {                        
        padding: 0px 3px 0px 0px;        
        max-width:90px;
        width:90pX;
        white-space:nowrap;
        overflow:hidden;                
    }

    #IssueTopIntradayLendingGrid {             
        height:100%; 
    }
</style>

<script type="text/javascript">

    function changeRegType(issueId, regType) {
        var entityId = $("#SecMasterDropdownList").data("kendoDropDownList").value();
        console.log(entityId);
        try {
            $.ajax({
                url: '/DomesticTrading/List/AddRegulatoryList',
                type: 'POST',
                contentType: 'application/json;',
                async: true,
                cache: false,
                data: JSON.stringify({
                    entityId: entityId,
                    issueId: issueId,
                    regType: regType
                }),
                success: function (valid) {
                },
                error: function (valid) {
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function deleteRegType(issueId, regType) {
        var entityId = $("#SecMasterDropdownList").data("kendoDropDownList").value();
        console.log(entityId);
        try {
            $.ajax({
                url: '/DomesticTrading/List/DeleteRegulatoryList',
                type: 'POST',
                contentType: 'application/json;',
                async: true,
                cache: false,
                data: JSON.stringify({
                    entityId: entityId,
                    issueId: issueId,
                    regType: regType
                }),
                success: function (valid) {
                },
                error: function (valid) {
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }


    $('#CheckBoxEasy').change(function () {
        if ($("#CheckBoxEasy").is(':checked')) {
            changeRegType('@Model.Issue.IssueId', '@SLRegulatoryType.EASYBORROW');
        }
        else
        {
            deleteRegType('@Model.Issue.IssueId', '@SLRegulatoryType.EASYBORROW');
        }
    });

    $('#CheckBoxPenaltyBox').change(function () {
        if ($("#CheckBoxPenaltyBox").is(':checked')) {
            changeRegType('@Model.Issue.IssueId', '@SLRegulatoryType.PENALTYBOX');
        }
        else {
            deleteRegType('@Model.Issue.IssueId', '@SLRegulatoryType.PENALTYBOX');
        }
    });

    $('#CheckBoxPremium').change(function () {
        if ($("#CheckBoxPremium").is(':checked')) {
            changeRegType('@Model.Issue.IssueId', '@SLRegulatoryType.PREMIUM');
        }
        else {
            deleteRegType('@Model.Issue.IssueId', '@SLRegulatoryType.PREMIUM');
        }
    });

    $('#CheckBoxRestricted').change(function () {
        if ($("#CheckBoxRestricted").is(':checked')) {
            changeRegType('@Model.Issue.IssueId', '@SLRegulatoryType.RESTRICTED');
        }
        else {
            deleteRegType('@Model.Issue.IssueId', '@SLRegulatoryType.RESTRICTED');
        }
    });

    $('#CheckBoxOCC').change(function () {
        if ($("#CheckBoxOCC").is(':checked')) {
            changeRegType('@Model.Issue.IssueId', '@SLRegulatoryType.OCCELIGIBLE');
        }
        else {
            deleteRegType('@Model.Issue.IssueId', '@SLRegulatoryType.OCCELIGIBLE');
        }
    });


    $('#CheckBoxThreshold').change(function () {
        if ($("#CheckBoxThreshold").is(':checked')) {
            changeRegType('@Model.Issue.IssueId', '@SLRegulatoryType.THRESHOLD');
        }
        else {
            deleteRegType('@Model.Issue.IssueId', '@SLRegulatoryType.THRESHOLD');
        }
    });

    $(document).ready(function () {
        if ('@((string.IsNullOrWhiteSpace(Model.Issue.Cusip)) ? 0 : Model.Issue.Cusip.Length)' > 0 ||
            '@((string.IsNullOrWhiteSpace(Model.Issue.SEDOL)) ? 0 : Model.Issue.SEDOL.Length)' > 0 ||
            '@((string.IsNullOrWhiteSpace(Model.Issue.ISIN)) ? 0 : Model.Issue.ISIN.Length)' > 0) {
            $("#TradeTicketButton").data("kendoButton").enable('@SessionSecurityService.IsEditable(ManagerTask.EditSLTRade)');
            $("#HelpButton").data("kendoButton").enable('@SessionSecurityService.IsEditable(ManagerTask.UpdateIssue)');
            $("#IssueCommentButton").data("kendoButton").enable('@SessionSecurityService.IsEditable(ManagerTask.EditSLIssueComment)');


         if ((@(Model.PossibleMatchingIssueList.Count()) > 1) && ('@(SessionService.UserPreference.ShowMatchingIssues)' == 'True'))
            {
                HelperPartialWindow(
                JSON.stringify({
                    cusip : '@Model.Issue.Cusip',
                    ticker : '@Model.Issue.Ticker',
                    sedol : '@Model.Issue.SEDOL',
                    quick : '@Model.Issue.Quick',
                    ISIN : '@Model.Issue.ISIN'
                }),
              'Additional Items',
              1100,
              450,
              '/DomesticTrading/Issue/Read_IssueList'
              );
            }
        }
        else {
            $("#TradeTicketButton").data("kendoButton").enable(false);
            $("#HelpButton").data("kendoButton").enable(false);
            $("#IssueCommentButton").data("kendoButton").enable(false);

            if ($("#SearchCriteria").val().length > 0) {
                $("#SecurityDescriptionTextBox").val("INVALID SEARCH CRITERIA");
    }
}
    })
</script>


@(Html.Kendo().Splitter()
        .Name("IssueWrapper")
        .Orientation(SplitterOrientation.Horizontal)
        .Panes(panes =>
        {
        panes.Add()
            .Scrollable(false)
            .Size("60%")
    .Content(@<text>
<table id="IssueTable">
    <tr class="k-alt">
        <td colspan="6">
            @LabelHelper.Text("Security Information")
        </td>
    </tr>
    <tr>
        <td colspan="2">
            @LabelHelper.Text("Description") <br />
            <span class="ktb-var-accent">
                @if (string.IsNullOrWhiteSpace(Model.Issue.Description_1))
                {
                    <pre>N.A.</pre>
                }
                else
                {
                    @Html.DisplayFor(m => m.Issue.Description_1)
                }
                @Html.HiddenFor(m => m.Issue.IssueId, new { ID = "SecurityMasterIssueIdTextBox" })
            </span>
        </td>
        <td colspan="2">
            @LabelHelper.Text("SecurityType")<br />
            <span class="ktb-var-accent">
                @if (string.IsNullOrWhiteSpace(Model.SecurityTypeDescription))
                {
                    <pre>N.A.</pre>
                }
                else
                {
                    @Html.DisplayFor(m => m.SecurityTypeDescription)
                }
            </span>
        </td>
        <td>
            @LabelHelper.Text("Cusip") <br />
            <span class="ktb-var-accent">
                @if (string.IsNullOrWhiteSpace(Model.Issue.Cusip))
                {
                    <pre id="SecurityMasterCusipTextBox">N.A.</pre>
                }
                else
                {                    
                    @Html.DisplayFor(m => m.Issue.Cusip, new { @class = "width100", ID = "SecurityMasterCusipTextBox" })
                }
            </span>
        <td>
            @LabelHelper.Text("Ticker") <br />
            <span class="ktb-var-accent">
                @if (string.IsNullOrWhiteSpace(Model.Issue.Ticker))
                {
                    <pre id="SecurityMasterTickerTextBox">N.A.</pre>
                }
                else
                {
                    @Html.DisplayFor(m => m.Issue.Ticker)
                }
            </span>
        </td>
    </tr>
    <tr class="k-alt">
        <td colspan="2">
            @LabelHelper.Text("Isin") <br />
            <span class="ktb-var-accent">
                @if (string.IsNullOrWhiteSpace(Model.Issue.ISIN))
                {
                    <pre>N.A.</pre>
                }
                else
                {
                    @Html.DisplayFor(m => m.Issue.ISIN, new { @class = "width100", ID = "SecurityMasterIsinTextBox" })
                }
            </span>
        </td>
        <td>
            @LabelHelper.Text("Sedol") <br />
            <span class="ktb-var-accent">
                @if (string.IsNullOrWhiteSpace(Model.Issue.SEDOL))
                {
                    <pre>N.A.</pre>
                }
                else
                {
                    @Html.DisplayFor(m => m.Issue.SEDOL, new { @class = "width100", ID = "SecurityMasterSedolTextBox" })
                }
            </span>
        </td>
        <td>
            @LabelHelper.Text("SecNumber") <br />
            <span class="ktb-var-accent">
                @if (string.IsNullOrWhiteSpace(Model.Issue.SecNumber))
                {
                    <pre>N.A.</pre>
                }
                else
                {
                    @Html.DisplayFor(m => m.Issue.SecNumber, new { @class = "width100", ID = "SecurityMasterSecNumberTextBox" })
                }
            </span>
        </td>
        <td>
            @LabelHelper.Text("Quick") <br />
            <span class="ktb-var-accent">
                @if (string.IsNullOrWhiteSpace(Model.Issue.Quick))
                {
                    <pre>N.A.</pre>
                }
                else
                {
                    @Html.DisplayFor(m => m.Issue.Quick, new { @class = "width100", ID = "SecurityMasterQuickTextBox" })
                }
            </span>
        </td>               
        <td>
            @LabelHelper.Text("MktPrice") <br />
            <span class="ktb-var-accent">
                @if (Model.IssuePrice.StartCashPrice == null)
                {
                    <pre>N.A.</pre>
                }
                else
                {
                    @Html.DisplayFor(m => m.IssuePrice.StartCashPrice, "Double")
                }
            </span>
        </td>
    </tr>
    <tr>        
        <td>
            @LabelHelper.Text("RecordDate")<br />
            <span class="ktb-var-accent">
                @if (Model.IssueDividendInfo.RecordDate == null)
                {
                    <pre>N.A.</pre>
                }
                else
                {
                    @Html.ValueFor(m => m.IssueDividendInfo.RecordDate, "{0:yyyy-MM-dd}")
                }
            </span>
        </td>
        <td>
            @LabelHelper.Text("ClosingPrice") <br />
            <span class="ktb-var-accent">
                @if (Model.IssuePrice.CurrentCashPrice == null)
                {
                    <pre>N.A.</pre>
                }
                else
                {
                    @Html.DisplayFor(m => m.IssuePrice.CurrentCashPrice, "Double")
                }
            </span>
        </td>
        <td>
            @LabelHelper.Text("ClosingPriceDate")<br />
            <span class="ktb-var-accent">
                @if (Model.IssuePrice.DateTimeId == null)
                {
                    <pre>N.A.</pre>
                }
                else
                {
                    @Html.ValueFor(m => m.IssuePrice.DateTimeId, "{0:yyyy-MM-dd}")
                }
            </span>
        </td>        
    </tr>
    <tr class="k-alt">
        <td>
            <span>
                @LabelHelper.Text("Easy")<br />
                @Html.Kendo().CheckBoxFor(x => x.IssueList.Easy).HtmlAttributes(new { @ID = "CheckBoxEasy" }).Enable(Model.IssueList.EasyEditable)
            </span>
        </td>
        <td>
            <span>
                @LabelHelper.Text("PenaltyBox")<br />
                @Html.Kendo().CheckBoxFor(x => x.IssueList.PenaltyBox).HtmlAttributes(new { @ID = "CheckBoxPenaltyBox" }).Enable(Model.IssueList.PenaltyBoxEditable)
            </span>
        </td>
        <td>
            <span>
                @LabelHelper.Text("Premium")<br />
                @Html.Kendo().CheckBoxFor(x => x.IssueList.Premium).HtmlAttributes(new { @ID = "CheckBoxPremium" }).Enable(Model.IssueList.PremiumEditable)
            </span>
        </td>
        <td>
            <span>
                @LabelHelper.Text("Threshold")<br />
                @Html.Kendo().CheckBoxFor(x => x.IssueList.Threshold).HtmlAttributes(new { @ID = "CheckBoxThreshold" }).Enable(Model.IssueList.ThresholdEditable)
            </span>
        </td>
        <td>
            <span>
                @LabelHelper.Text("Restricted")<br />
                @Html.Kendo().CheckBoxFor(x => x.IssueList.Restricted).HtmlAttributes(new { @ID = "CheckBoxRestricted" }).Enable(Model.IssueList.RestrictedEditable)
            </span>
        </td>
        <td>
            <span>
                @LabelHelper.Text("OCCEligible")<br />
                @Html.Kendo().CheckBoxFor(x => x.IssueList.OccEligible).HtmlAttributes(new { @ID = "CheckBoxOCC" }).Enable(Model.IssueList.OccEligibleEditable)
            </span>
        </td>
    </tr>
</table>
        </text>);

    if (SessionSecurityService.IsEditable(ManagerTask.ViewSLIntradayLending))
    {
        panes.Add()
        .Scrollable(false)
        .Content(@<text>
@(Html.Kendo().Grid(Model.IntraDayList)
                    .NoRecords()
                    .Name("IssueTopIntradayLendingGrid")
                    .ToolBar(toolbar => toolbar.Template(@LabelHelper.Text("IntrdayDayLending").ToString()))
                    .Columns(cols =>
                    {
                        cols.Bound(x => x.CollateralCurrencyId).GetColumnFormat(SLTrader.Enums.ColumnTypeEnum.String, false, "", "");
                        cols.Bound(x => x.LoanRateMin).GetColumnFormat(SLTrader.Enums.ColumnTypeEnum.Rate, false, "#=GetRateDirection(LoanRateMin)#", "");
                        cols.Bound(x => x.LoanRateMax).GetColumnFormat(SLTrader.Enums.ColumnTypeEnum.Rate, false, "#=GetRateDirection(LoanRateMax)#", "");
                        cols.Bound(x => x.LoanRateAvg).GetColumnFormat(SLTrader.Enums.ColumnTypeEnum.Rate, false, "#=GetRateDirection(LoanRateAvg)#", "");
                    })
                    .DataSource(ds =>
                    {
                        ds.Ajax().ServerOperation(false);
                    }))
        </text>);
            }
        }))

@Html.Kendo().TextBoxFor(x => x.Issue.Cusip).Name("SecurityMasterCusipTextBox").HtmlAttributes(new { @style = "width:0px; height:0px;visibility:collapse" })