@using SLTrader.Tools
@using SLTrader.Enums


<style scoped>
    .label {
        padding-left:5px;
    }

    #InformationAutoBorrowButton.zeroclipboard-is-hover {
        background-color: #1ba1e2;
    }
</style>
<script>

    var _InfoAutoBorrowGridSelectAll = false;
    var _originalInfoAutoBorrowGridGrid = null;


    $(document).ready(function () {
        setTimeout(function () {
            _originalInfoAutoBorrowGridGrid = $('#InfoAutoBorrowGrid').data('kendoGrid').getOptions();

            LoadGridLayout("#InfoAutoBorrowGrid");

            var labelAutoBorrow = '@LabelHelper.Text("AutoBorrow")';

            $(".k-grid-toolbar", "#InfoAutoBorrowGrid").append("<label>" + labelAutoBorrow + "</label>");

            RefreshGrid("#InfoAutoBorrowGrid");
        }, 5);

        var clientInformationAutoBorrowButton = new ZeroClipboard(document.getElementById("InformationAutoBorrowButton"));

        clientInformationAutoBorrowButton.on("ready", function (readyEvent) {
            clientInformationAutoBorrowButton.on("copy", function (event) {
                var data = KendoGridToText("#InfoAutoBorrowGrid", "InfoAutoBorrowGrid", false);
                clientInformationAutoBorrowButton.setText(data);
            });
        });
    });

    function onIssueInformationUnsortGrid(e) {
        UnsortGrid(e);
    }


    function additionalInfoAutoBorrowData() {
        var datepicker = $("#InformationCalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entityId = $("#InformationDropdownList").data("kendoDropDownList").value();
        var criteria = document.getElementById('IssueInformationSecuritySearchTextBox').value;


        return {
            effectiveDate: value,
            entityId: entityId,
            criteria: criteria
        }
    }

    function onIssueInformationAutoBorrowGridLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#InfoAutoBorrowGrid");
        }, 5);
    }


    function onInfoAutoBorrowGridContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
        case 'AutoFit Columns':
            resizeGridColumns("#InfoAutoBorrowGrid");
                break;

            case 'Unsort':
                onIssueInformationUnsortGrid("#InfoAutoBorrowGrid");
                break;

            case "Reset Filter":
                ResetFilter("#InfoAutoBorrowGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#InfoAutoBorrowGrid");
                $('#InfoAutoBorrowGrid').data('kendoGrid').setOptions(_originalInfoAutoBorrowGridGrid);
                $('#InfoAutoBorrowGrid').data("kendoGrid").dataSource.read();

                $(".k-grid-toolbar", "#InfoAutoBorrowGrid").append("<label>" + '@LabelHelper.Text("AutoBorrow")' + "</label>");
                break;

            case 'Select All':
                onIssueInformationSelectAll("#InfoAutoBorrowGrid", _InfoAutoBorrowGridSelectAll);
                break;

            case 'Export To Excel':
                onIssueInformationExcel("#InfoAutoBorrowGrid", "InfoAutoBorrowGrid", _InfoAutoBorrowGridSelectAll);
                break;
        }
    }


    function onIssueInformationSelectAll(e, selectAll) {
        try {
            var contractGrid = $(e).data("kendoGrid");
            contractGrid.select(contractGrid.tbody.find(">tr"));

            selectAll = true;
        } catch (e) {
            console.log(e.message);
        }
    }

</script>
<div class="height100p width100p" >
@(Html.Kendo().Grid<BondFire.Entities.Projections.SL_AutoBorrowOrderProjection>()
    .Name("InfoAutoBorrowGrid")
    .HtmlAttributes(new { @class = "grid" })
               .ToolBar(t =>
               {
                   t.Template("<label></label>");
               })
    .Sortable(sort =>
    {
        sort.AllowUnsort(true);
        sort.Enabled(true);
        sort.SortMode(GridSortMode.MultipleColumn);
    })
    .Scrollable(scroll => scroll.Virtual(true))
    .Filterable()
    .Navigatable()
    .NoRecords()
    .Reorderable(reorder => reorder.Columns(true))
      .Events(events =>
      {
          events.ColumnHide("onIssueInformationAutoBorrowGridLayoutChange");
          events.ColumnShow("onIssueInformationAutoBorrowGridLayoutChange");
          events.ColumnResize("onIssueInformationAutoBorrowGridLayoutChange");
          events.ColumnReorder("onIssueInformationAutoBorrowGridLayoutChange");
      })
    .ColumnMenu(menu =>
    {
        menu.Columns(true);
        menu.Filterable(true);
        menu.Sortable(true);
        menu.ComponentType( "modern" );
    } )
    .AutoBind(false)
     .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Row))
    .Columns(cols =>
    {
        cols.Bound(x => x.SmartRouteName).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.ContraEntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.Quantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(Quantity)#", "QuantityDecimalNumber");
        cols.Bound(x => x.MinQuantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(MinQuantity)#", "QuantityDecimalNumber");
        cols.Bound(x => x.BorrowStatus).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(false);
        cols.Bound(x => x.BorrowStatusFlag).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.SubmissionType).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        cols.Bound(x => x.DateTimeId).GetColumnFormat(ColumnTypeEnum.Time, false, "", "");
    })
    .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
    .DataSource(ds => ds.Ajax()
        .ServerOperation(false)
        .AutoSync(true)
        .Read(read => read.Action("Read_AutoBorrowByIssue", "SmartRoute", new { area = "DomesticTrading" }).Data("additionalInfoAutoBorrowData"))
        .Sort(sort => sort.Add(x => x.DateTimeId))
        .Aggregates(agg =>
        {
            agg.Add(x => x.MinQuantity).Sum();
            agg.Add(x => x.Quantity).Sum();
        })))
</div>

@(
 Html.Kendo().ContextMenu()
.Name("InfoAutoBorrowGridContextMenu")
.Target("#InfoAutoBorrowGrid")
    .Events(events => events.Select("onInfoAutoBorrowGridContextMenuSelect"))
.Items(items =>
{
    items.Add().Text("AutoFit Columns");
    items.Add().Text("Unsort").Enabled(true);
    items.Add().Text("Reset Filter").Enabled(true);
    items.Add().Text("Reset Grid").Enabled(true);
    items.Add().Text("Select All").Enabled(true);
    items.Add().Separator(true);
    items.Add().Text("Copy").Enabled(true).HtmlAttributes(new { ID = "InformationAutoBorrowButton" });
    items.Add().Text("Export To Excel").Enabled(true);
}))


