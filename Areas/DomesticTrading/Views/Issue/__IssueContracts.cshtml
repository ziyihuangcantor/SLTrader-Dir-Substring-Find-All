@using SLTrader.Tools
@using SLTrader.Enums


<style scoped>
    .label {
        padding-left:5px;
    }

      #InformationContractButton.zeroclipboard-is-hover {
        background-color: #1ba1e2;
    }
</style>
<script>
   
    var _originalIssueInformationContractSummaryDetails = null;
    var _IssueInformationContractSummaryDetailsSelectAll = false;

    $(document).ready(function () {
        setTimeout(function () {
            _originalIssueInformationContractSummaryDetails = $('#IssueInformationContractSummaryDetails').data('kendoGrid').getOptions();

            LoadGridLayout("#IssueInformationContractSummaryDetails");
           
            var labelContractSummary = '@LabelHelper.Text("ContractSummary")';

            $(".k-grid-toolbar", "#IssueInformationContractSummaryDetails").append("<label>" + labelContractSummary + "</label>");

            RefreshGrid("#IssueInformationContractSummaryDetails");
        }, 5);

        var clientInformationContractButton = new ZeroClipboard(document.getElementById("InformationContractButton"));

        clientInformationContractButton.on("ready", function (readyEvent) {
            clientInformationContractButton.on("copy", function (event) {
                var data = KendoGridToText("#IssueInformationContractSummaryDetails", "IssueInformationContractSummaryDetails", false);
                clientInformationContractButton.setText(data);
            });
        });

    });

    function additionalInformationContractSummaryData() {
        var datepicker = $("#InformationCalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entityId = $("#InformationDropdownList").data("kendoDropDownList").value();
        var criteria = document.getElementById('IssueInformationSecuritySearchTextBox').value;


        return {
            effectiveDate: value,
            entityId: entityId,
            criteria: criteria
        }
    }

    function onIssueInformationContractDetailGridLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#IssueInformationContractSummaryDetails");
        }, 5);
    } 
   
    function IssueInformationContractSummaryDetailsContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#IssueInformationContractSummaryDetails");
                break;

            case 'Unsort':
                onIssueInformationUnsortGrid("#IssueInformationContractSummaryDetails");
                break;

            case "Reset Filter":
                ResetFilter("#IssueInformationContractSummaryDetails");
                break;

            case "Reset Grid":
                ResetUserLayout("#IssueInformationContractSummaryDetails");
                $('#IssueInformationContractSummaryDetails').data('kendoGrid').setOptions(_originalIssueInformationContractSummaryDetails);
                $('#IssueInformationContractSummaryDetails').data("kendoGrid").dataSource.read();

                $(".k-grid-toolbar", "#IssueInformationContractSummaryDetails").append("<label>" + '@LabelHelper.Text("ContractSummary")' + "</label>");
                break;

            case 'Select All':
                onIssueInformationSelectAll("#IssueInformationContractSummaryDetails", _IssueInformationContractSummaryDetailsSelectAll);
                break;

            case 'Export To Excel':
                onIssueInformationExcel("#IssueInformationContractSummaryDetails", "IssueInformationContractSummaryDetails", _IssueInformationContractSummaryDetailsSelectAll);
                break;
        }
    }

    
    function onIssueInformationContractDetailGridRowChange()
    {
        _IssueInformationContractSummaryDetailsSelectAll = false;
    }

    </script>
<div class="height100p width100p">
    @(Html.Kendo().Grid<BondFire.Entities.Projections.SL_ContractSummaryByContraEntityAndSecurityProjection>()
                                 .Name("IssueInformationContractSummaryDetails")
                                 .HtmlAttributes(new { @class = "grid" })
                                 .Sortable(sort =>
                                 {
                                     sort.AllowUnsort(true);
                                     sort.Enabled(true);
                                     sort.SortMode(GridSortMode.MultipleColumn);
                                 })
                                 .Scrollable(scrollable => scrollable.Enabled(true))
                                 .Filterable()
                                 .Navigatable()
                                 .AutoBind(false)
                                             .ToolBar(t =>
                                             {
                                                 t.Template("<label></label>");
                                             })
                                 .ColumnMenu(menu =>
                                 {
                                     menu.Columns(true);
                                     menu.Filterable(true);
                                     menu.Sortable(true);
                                     menu.ComponentType( "modern" );
                                 } )
                                 .NoRecords()
                                           .Events(events =>
                                           {
                                               events.ColumnHide("onIssueInformationContractDetailGridLayoutChange");
                                               events.ColumnShow("onIssueInformationContractDetailGridLayoutChange");
                                               events.ColumnResize("onIssueInformationContractDetailGridLayoutChange");
                                               events.ColumnReorder("onIssueInformationContractDetailGridLayoutChange");
                                           })

                                 .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Row))
                                 .Columns(columns =>
                                 {
                                     columns.Bound(x => x.EffectiveDate).Hidden(true).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
                                     columns.Bound(x => x.SLContract).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                     columns.Bound(x => x.EntityId).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                     columns.Bound(x => x.ContraEntity).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                     columns.Bound(x => x.AccountName).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                     columns.Bound(x => x.ContractNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                     columns.Bound(p => p.TradeType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                     columns.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                     columns.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                     columns.Bound(x => x.Classification).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                     columns.Bound(x => x.RecordDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "").Hidden(true);
                                     columns.Bound(x => x.MktPrice).GetColumnFormat(ColumnTypeEnum.Money, false, "", "").Hidden();
                                     columns.Bound(x => x.IssueId).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                     columns.Bound(x => x.BorrowQuantityDelta).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDeltaDirection(BorrowQuantityDelta)#", "").Hidden(true);
                                     columns.Bound(x => x.BorrowQuantityFullSettled).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(BorrowQuantityFullSettled)#", "").Hidden(true);
                                     columns.Bound(x => x.BorrowQuantityStartOfDay).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(BorrowQuantityStartOfDay)#", "").Hidden(true);
                                     columns.Bound(x => x.BorrowQuantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(BorrowQuantity)#", "");
                                     columns.Bound(x => x.BorrowQuantityOnRecall).GetColumnFormat(ColumnTypeEnum.Position, false, "", "");
                                     columns.Bound(x => x.BorrowAmountFullSettled).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(BorrowAmountFullSettled)#", "").Hidden(true);
                                     columns.Bound(x => x.BorrowAmountDelta).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDeltaDirection(BorrowAmountDelta)#", "").Hidden(true);
                                     columns.Bound(x => x.BorrowAmount).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(BorrowAmount)#", "");
                                     columns.Bound(x => x.BorrowAmountStartOfDay).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(BorrowAmountStartOfDay)#", "").Hidden(true);
                                     columns.Bound(x => x.BorrowDepositoryStatus).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                     columns.Bound(x => x.LoanQuantityDelta).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDeltaDirection(LoanQuantityDelta)#", "").Hidden(true);
                                     columns.Bound(x => x.LoanQuantityFullSettled).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(LoanQuantityFullSettled)#", "").Hidden(true);
                                     columns.Bound(x => x.LoanQuantityStartOfDay).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(LoanQuantityStartOfDay)#", "").Hidden(true);
                                     columns.Bound(x => x.LoanQuantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(LoanQuantity)#", "");
                                     columns.Bound(x => x.LoanQuantityOnRecall).GetColumnFormat(ColumnTypeEnum.Position, false, "", "");
                                     columns.Bound(x => x.LoanAmountFullSettled).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(LoanAmountFullSettled)#", "").Hidden(true);
                                     columns.Bound(x => x.LoanAmountDelta).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDeltaDirection(LoanAmountDelta)#", "").Hidden(true);
                                     columns.Bound(x => x.LoanAmount).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(LoanAmount)#", "");
                                     columns.Bound(x => x.LoanAmountStartOfDay).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(LoanAmountStartOfDay)#", "").Hidden(true);
                                     columns.Bound(x => x.LoanDepositoryStatus).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                     columns.Bound(x => x.CollateralFlag).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                     columns.Bound(x => x.ProfitId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                     columns.Bound(x => x.RebateRate).GetColumnFormat(ColumnTypeEnum.Rate, true, "#=GetRateDirection(RebateRate)#", "");
                                     columns.Bound(x => x.RebateRateId).Hidden(true);
                                     columns.Bound(x => x.Mark).GetColumnFormat(ColumnTypeEnum.Margin, false, "#=GetRateDirection(Mark)#", "");
                                     columns.Bound(x => x.MarkParameterId).Hidden(true);
                                     columns.Bound(x => x.ValueDate).Hidden(true).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
                                     columns.Bound(x => x.SettlementDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
                                     columns.Bound( x => x.TermDate ).GetColumnFormat( ColumnTypeEnum.Date, false, "", "" );
                                     columns.Bound(x => x.CurrencyCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                     columns.Bound(x => x.SecurityLoc).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                     columns.Bound(x => x.CashLoc).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                     columns.Bound(x => x.ActivityItemCount).GetColumnFormat(ColumnTypeEnum.Position, false, "# if (ActivityItemCount > 0) { #<i class='fa fa-bars' style='color:green;'></i># }# ", "").Title("").HtmlAttributes(new { title = "Actions - #= ActivityItemCount # " }).Filterable(false);
                                     columns.Bound(X => X.ContractFlag).GetColumnFormat(ColumnTypeEnum.String, false, "# if (ContractFlag == 'Pending') { #<i class='fa  fa-info-circle' style='color:blue;'></i># } else if (ContractFlag == 'Success') { #<i class='fa  fa-exclamation-circle' style='color:green;'></i># } else if (ContractFlag != ''){ #<i class='fa  fa-exclamation-triangle' style='color:red;'></i># } #", "").Title("").HtmlAttributes(new { title = "Status - #= ContractFlag # " }).Filterable(false);
                                     columns.Bound(x => x.IncomeAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(IncomeAmount)#", "");
                                     columns.Bound(x => x.Spread).GetColumnFormat(ColumnTypeEnum.Money, false, "#=GetRateDirection(Spread)#", "");
                                     columns.Bound(x => x.DateTimeId).GetColumnFormat(ColumnTypeEnum.Time, false, "", "");
                                 })
                                 .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
                                 .DataSource(dataSource => dataSource
                                 .Ajax()
                                 .ServerOperation(false)
                                 .Read(read => read.Action("Read_ContractExtendedSummaryByContraEntityAndSecurity", "Contract", new { area = "DomesticTrading" }).Data("additionalInformationContractSummaryData"))
                                 .Aggregates(s =>
                                 {
                                     s.Add(x => x.BorrowQuantityFullSettled).Sum();
                                     s.Add(x => x.BorrowQuantityDelta).Sum();
                                     s.Add(x => x.BorrowQuantity).Sum();
                                     s.Add(x => x.BorrowQuantityStartOfDay).Sum();
                                     s.Add(x => x.BorrowAmountFullSettled).Sum();
                                     s.Add(x => x.BorrowAmountDelta).Sum();
                                     s.Add(x => x.BorrowAmount).Sum();
                                     s.Add(x => x.BorrowAmountStartOfDay).Sum();
                                     s.Add(x => x.LoanQuantityFullSettled).Sum();
                                     s.Add(x => x.LoanQuantityDelta).Sum();
                                     s.Add(x => x.LoanQuantity).Sum();
                                     s.Add(x => x.LoanQuantityStartOfDay).Sum();
                                     s.Add(x => x.LoanAmountFullSettled).Sum();
                                     s.Add(x => x.LoanAmountDelta).Sum();
                                     s.Add(x => x.LoanAmount).Sum();
                                     s.Add(x => x.LoanAmountStartOfDay).Sum();
                                     s.Add(x => x.IncomeAmount).Sum();
                                     s.Add(x => x.RebateRate).Average();
                                 })))
</div>

@(
 Html.Kendo().ContextMenu()
.Name("IssueInformationContractSummaryDetailsContextMenu")
    .Target("#IssueInformationContractSummaryDetails")
.Events(events => events.Select("IssueInformationContractSummaryDetailsContextMenuSelect"))
.Items(items =>
{
    items.Add().Text("AutoFit Columns");
    items.Add().Text("Unsort").Enabled(true);
    items.Add().Text("Reset Filter").Enabled(true);
    items.Add().Text("Reset Grid").Enabled(true);
    items.Add().Text("Select All").Enabled(true);
    items.Add().Separator(true);
    items.Add().Text("Copy").Enabled(true).HtmlAttributes(new { ID = "InformationContractButton" });
    items.Add().Text("Export To Excel").Enabled(true);
}))

