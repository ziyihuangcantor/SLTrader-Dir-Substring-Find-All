@using SLTrader.Tools
@using SLTrader.Enums


<style scoped>
    .label {
        padding-left: 5px;
    }

    #InformationRecallsButton.zeroclipboard-is-hover {
        background-color: #1ba1e2;
    }
</style>
<script>

    var _originalIssueInformationRecallsDetails = null;
    var _IssueInformationRecallsDetailsSelectAll = false;

    $(document).ready(function () {
        setTimeout(function () {
            _originalIssueInformationRecallsDetails = $('#IssueInformationRecallsDetails').data('kendoGrid').getOptions();

            LoadGridLayout("#IssueInformationRecallsDetails");

            var labelRecalls = '@LabelHelper.Text("Recalls")';

            $(".k-grid-toolbar", "#IssueInformationRecallsDetails").append("<label>" + labelRecalls + "</label>");

            RefreshGrid("#IssueInformationRecallsDetails");
        }, 5);

        var clientInformationRecallsButton = new ZeroClipboard(document.getElementById("InformationRecallsButton"));

        clientInformationRecallsButton.on("ready", function (readyEvent) {
            clientInformationRecallsButton.on("copy", function (event) {
                var data = KendoGridToText("#IssueInformationRecallsDetails", "IssueInformationRecallsDetails", false);
                clientInformationRecallsButton.setText(data);
            });
        });
    });

    function additionalInformationRecallsData() {
        var datepicker = $("#InformationCalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entityId = $("#InformationDropdownList").data("kendoDropDownList").value();
        var criteria = document.getElementById('IssueInformationSecuritySearchTextBox').value;


        return {
            effectiveDate: value,
            entityId: entityId,
            criteria: criteria
        }
    }

    function onIssueInformationContractDetailGridLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#IssueInformationRecallsDetails");
        }, 5);
    }

    function IssueInformationRecallsDetailsContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#IssueInformationRecallsDetails");
                break;

            case 'Unsort':
                onIssueInformationUnsortGrid("#IssueInformationRecallsDetails");
                break;

            case "Reset Filter":
                ResetFilter("#IssueInformationRecallsDetails");
                break;

            case "Reset Grid":
                ResetUserLayout("#IssueInformationRecallsDetails");
                $('#IssueInformationRecallsDetails').data('kendoGrid').setOptions(_originalIssueInformationRecallsDetails);
                $('#IssueInformationRecallsDetails').data("kendoGrid").dataSource.read();

                $(".k-grid-toolbar", "#IssueInformationRecallsDetails").append("<label>" + '@LabelHelper.Text("Recalls")' + "</label>");
                break;

            case 'Select All':
                onIssueInformationSelectAll("#IssueInformationRecallsDetails", _IssueInformationRecallsDetailsSelectAll);
                break;

            case 'Export To Excel':
                onIssueInformationExcel("#IssueInformationRecallsDetails", "IssueInformationRecallsDetails", _IssueInformationRecallsDetailsSelectAll);
                break;
        }
    }

</script>
<div class="height100p width100p">
    @(Html.Kendo().Grid<BondFire.Entities.Projections.SL_RecallExtendedProjection>()
                                 .Name("IssueInformationRecallsDetails")
                                 .HtmlAttributes(new { @class = "grid" })
                                 .Sortable(sort =>
                                 {
                                     sort.AllowUnsort(true);
                                     sort.Enabled(true);
                                     sort.SortMode(GridSortMode.MultipleColumn);
                                 })
                                 .Scrollable(scrollable => scrollable.Enabled(true))
                                 .Filterable()
                                 .Navigatable()
                                 .AutoBind(false)
                                             .ToolBar(t =>
                                             {
                                                 t.Template("<label></label>");
                                             })
                                 .ColumnMenu(menu =>
                                 {
                                     menu.Columns(true);
                                     menu.Filterable(true);
                                     menu.Sortable(true);
                                     menu.ComponentType( "modern" );
                                 } )
                                 .NoRecords()
                                           .Events(events =>
                                           {
                                               events.ColumnHide("onIssueInformationContractDetailGridLayoutChange");
                                               events.ColumnShow("onIssueInformationContractDetailGridLayoutChange");
                                               events.ColumnResize("onIssueInformationContractDetailGridLayoutChange");
                                               events.ColumnReorder("onIssueInformationContractDetailGridLayoutChange");
                                           })

                                 .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Row))
                                 .Columns(columns =>
                                 {
                                     columns.Bound(p => p.RecallNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                     columns.Bound(p => p.EffectiveDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "").Hidden(true);
                                     columns.Bound(p => p.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                     columns.Bound(p => p.ContraEntity).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                     columns.Bound(p => p.IssueId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                     columns.Bound(p => p.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                     columns.Bound(p => p.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                     columns.Bound(p => p.ContractNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                     columns.Bound(p => p.TradeType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                     columns.Bound(p => p.Price).GetColumnFormat(ColumnTypeEnum.Money, false, "", "");
                                     columns.Bound(p => p.ContractPosition).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(ContractPosition)#", "");
                                     columns.Bound(p => p.QuantityRecalled).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(QuantityRecalled)#", "");
                                     columns.Bound(p => p.RecallAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(RecallAmount)#", "");
                                     columns.Bound(p => p.QuantityRemaining).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(QuantityRemaining)#", "");
                                     columns.Bound(p => p.QuantityReturnedPending).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(QuantityReturnedPending)#", "");
                                     columns.Bound(p => p.QuantityReturnedSettled).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(QuantityReturnedSettled)#", "");
                                     columns.Bound(p => p.CnsFailToDeliverPositionSettled).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(CnsFailToDeliverPositionSettled)#", "");
                                     columns.Bound(p => p.DvpFailToDeliverPositionSettled).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(DvpFailToDeliverPositionSettled)#", "");
                                     columns.Bound(p => p.BrokerFailToDeliverPositionSettled).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(BrokerFailToDeliverPositionSettled)#", "");
                                     columns.Bound(p => p.RebateRate).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetMoneyDirection(RebateRate)#", "");
                                     columns.Bound(p => p.RecallFlag).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                     columns.Bound(p => p.RecallDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
                                     columns.Bound(p => p.BuyInDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
                                     columns.Bound(p => p.RecallReason).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                     columns.Bound(p => p.ActionCount).GetColumnFormat(ColumnTypeEnum.Position, false, "# if (ActionCount > 0) { #<i class='fa fa-bars' style='color:green;'></i># }# ", "").Title("").HtmlAttributes(new { title = "Actions - #= ActionCount # " }).Filterable(false);
                                     columns.Bound(p => p.Comment).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                     columns.Bound(p => p.Status).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                 })
                                 .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
                                 .DataSource(dataSource => dataSource
                                 .Ajax()
                                 .ServerOperation(false)
                                         .Read(read => read.Action("Read_RecallByCriteria", "Recall", new { area = "DomesticTrading" }).Data("additionalInformationRecallsData"))
                                         .Aggregates(aggregates =>
                                         {
                                             aggregates.Add(p => p.ContractPosition).Sum();
                                             aggregates.Add(p => p.QuantityRecalled).Sum();
                                             aggregates.Add(p => p.QuantityRemaining).Sum();
                                             aggregates.Add(p => p.QuantityReturnedPending).Sum();
                                             aggregates.Add(p => p.QuantityReturnedSettled).Sum();
                                             aggregates.Add(p => p.CnsFailToDeliverPositionSettled).Sum();
                                             aggregates.Add(p => p.DvpFailToDeliverPositionSettled).Sum();
                                             aggregates.Add(p => p.BrokerFailToDeliverPositionSettled).Sum();
                                             aggregates.Add(p => p.RecallAmount).Sum();
                                         })))
</div>

@(Html.Kendo().ContextMenu()
    .Name("IssueInformationRecallsDetailsContextMenu")
    .Target("#IssueInformationRecallsDetails")
    .Events(events => events.Select("IssueInformationRecallsDetailsContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
        items.Add().Text("Select All").Enabled(true);
        items.Add().Separator(true);
        items.Add().Text("Copy").Enabled(true).HtmlAttributes(new { ID = "InformationRecallsButton" });
        items.Add().Text("Export To Excel").Enabled(true);
    }))

