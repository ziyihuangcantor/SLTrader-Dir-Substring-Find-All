@using System.ComponentModel
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Enums
@using SLTrader.Tools
@using SLTrader.Models
@using BondFire.Entities.Projections

@model string

<style scoped>
    #LegalEntityAssignLayoutTable {
        height: 400px;
        width: 550px;
        max-width: 500px;
        margin:0px;
        padding:0px;
    }

    #AvailableContraEntityGrid {
        height: 200px;
        width: 225px;
    }

    #LegalEntityAssignItemGrid {
        height: 200px;
        width: 225px;
    }

    #LegalEntityAssignGrid {
        width:100%;
        height:250px;
    }
    
        #LegalEntityAssignLayoutTable {
        border-collapse:collapse;
        width:100%;
    }

        #LegalEntityAssignLayoutTable th,
        #LegalEntityAssignLayoutTable td {
            min-height: 50px;
            padding: 0px 0px 0px 0px;
        }

</style>

<script>

    function additionalAvailableAccountsData() {

        var entityGrid = $("#LegalEntityAssignGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        var portfolioId = selectedItem["SLPortfolio"];

        return {
            portfolioId: portfolioId,
            entityId: '@Model',
        }
    }

    function additionalPortfolioData() {
        var entityGrid = $("#LegalEntityAssignGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        var portfolioId = selectedItem["SLPortfolio"];
     
        return {
            portfolioId: portfolioId,
        }
    }

    function onLegalEntityChange() {        
        $("#AvailableContraEntityGrid").data("kendoGrid").dataSource.read();
        $("#LegalEntityAssignItemGrid").data("kendoGrid").dataSource.read();
    }

    function onContraEntityAdd() {
        var dataItems = [];
        var entityGrid = $("#LegalEntityAssignGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        var SLContraEntityParent = selectedItem["SLContraEntityParent"];

        var grid = $('#AvailableContraEntityGrid').data('kendoGrid');
        var rows = grid.select();

        rows.each(function (index, row) {
            var selectedItem = grid.dataItem(row);
            dataItems.push(selectedItem);
        });

        $("#ContraEntityAddButton").data("kendoButton").enable(false);
        $("#ContraEntityDelButton").data("kendoButton").enable(false);

        $.ajax({
            url: '@Url.Action("AddLegalEntityContraEntity","ContraEntity", new { area = "DomesticTrading" })',
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify({
                contraEntityParentId: SLContraEntityParent,
                contraEntityList: dataItems,
            }),
            success: function(valid) {
                $("#AvailableContraEntityGrid").data("kendoGrid").dataSource.read();
                $("#LegalEntityAssignItemGrid").data("kendoGrid").dataSource.read();

                $("#ContraEntityAddButton").data("kendoButton").enable(true);
                $("#ContraEntityDelButton").data("kendoButton").enable(true);

            },
            error: function(valid) {
                DisplayControllerError(valid);
            }
        });
    }

    function onContraEntityDelete() {
        var dataItems = [];
        var grid = $("#LegalEntityAssignItemGrid").data("kendoGrid")
        var rows = grid.select();

        rows.each(function (index, row) {
            var selectedItem = grid.dataItem(row);
            dataItems.push(selectedItem);
        });

        $("#ContraEntityAddButton").data("kendoButton").enable(false);
        $("#ContraEntityDelButton").data("kendoButton").enable(false);

        $.ajax({
            url: '@Url.Action("DeleteLegalEntityContraEntity", "ContraEntity", new { area = "DomesticTrading" })',
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify({
                contraEntityList: dataItems,
            }),
            success: function(valid) {
                $("#AvailableContraEntityGrid").data("kendoGrid").dataSource.read();
                $("#LegalEntityAssignItemGrid").data("kendoGrid").dataSource.read();

                $("#ContraEntityAddButton").data("kendoButton").enable(true);
                $("#ContraEntityDelButton").data("kendoButton").enable(true);
            },
            error: function(valid) {
                DisplayControllerError(valid);
            }
        });
    }

    function onLegalEntityError(e)
    {
        DisplayControllerError(e);
    }

    function additionalLegalEntityData(e) {
        return  {
            entityId : '@Model'
        }
    }

    function additionalAvailableAccountsData(e) {
        var entityGrid = $("#LegalEntityAssignGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        var contraEntityParent = selectedItem["SLContraEntityParent"];
        

        return {
            entityId: '@Model',
            contraEntityParent: contraEntityParent
        }

    }
</script>

<table id="LegalEntityAssignLayoutTable">
    <tr>
        <td colspan="3">
            @(Html.Kendo().Grid<SL_ContraEntitiesParentProjection>()
                .Name("LegalEntityAssignGrid")
                .Selectable(select => select.Enabled(true).Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
                .Events(events => events.Change("onLegalEntityChange"))
                .Scrollable()                
                .NoRecords()                
                .Columns(cols =>
                {
                    cols.Bound(x => x.SLContraEntityParent).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                    cols.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                    cols.Bound(x => x.ContraEntityName).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                })
                .DataSource(ds => ds.Ajax()
                .Sort(sort =>
                {
                    sort.Add(x => x.AccountName).Ascending();
                })
                .ServerOperation(false)
                .AutoSync(true)
                .Events(events => events.Error("onLegalEntityError"))
                .Read(read => read.Action("LoadLegalEntity", "ContraEntity", new { area = "DomesticTrading" }).Data("additionalLegalEntityData"))))
        </td>
    </tr>
    <tr>
        <td class="valign-top" >
                @LabelHelper.Label("AvailableContraEntity")
                 @(Html.Kendo().Grid<ContraEntityCompanyModel>()
                    .Name("AvailableContraEntityGrid")
                    .AutoBind(false)
                    .Scrollable(scroll => scroll.Enabled(true))
                    .Filterable(filter => filter.Enabled(true))
                    .Sortable()
                    .Selectable(select => select.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Row).Enabled(true))
                    .Columns(cols =>
                    {
                        cols.Bound(x => x.Company.Custodian).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                        cols.Bound(x => x.ContraEntity.ContraEntity).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                        cols.Bound(x => x.ContraEntity.AccountName).GetColumnFormat(ColumnTypeEnum.String, false, "", "");

                    })
                    .DataSource(ds => ds.Ajax()
                        .ServerOperation(false)
                        .Events(events => events.Error("onLegalEntityError"))
                        .Read(read => read.Action("LoadAvailableContraEntity", "ContraEntity", new { area = "DomesticTrading" }).Data("additionalAvailableAccountsData"))))
        </td>
         <td class="valign-middle text-center width100">
            <span>
            @Html.Kendo().Button().Name("ContraEntityAddButton").Content(LabelHelper.Text("onContraEntityAdd")).Events(e => e.Click("onContraEntityAdd"))
            <br />
            <br />
             @Html.Kendo().Button().Name("ContraEntityDelButton").Content(LabelHelper.Text("onContraEntityDelete")).Events(e => e.Click("onContraEntityDelete"))
            </span>
        </td>
         <td class="valign-top" >
            @LabelHelper.Label("AssignedContraEntity")
            @(Html.Kendo().Grid<ContraEntityCompanyModel>()
            .Name("LegalEntityAssignItemGrid")
            .AutoBind(false)
            .Selectable(select => select.Mode(GridSelectionMode.Multiple))
            .Sortable()
            .Scrollable(scroll => scroll.Enabled(true))
            .Columns(cols =>
            {
                cols.Bound(x => x.Company.Custodian).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.ContraEntity.ContraEntity).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.ContraEntity.AccountName).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            })
            .DataSource(ds => ds.Ajax()
                .ServerOperation(false)
                .Events(events => events.Error("onLegalEntityError"))
                .Read(read => read.Action("LoadAssginedContraEntity", "ContraEntity", new { area = "DomesticTrading" }).Data("additionalAvailableAccountsData")))
            )
        </td> 
    </tr>
</table>
