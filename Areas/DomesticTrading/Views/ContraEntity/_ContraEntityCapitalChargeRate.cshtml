@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools



<style scoped>
            #ContraEntitySummaryButton.zeroclipboard-is-hover {
        background-color: #1ba1e2;
    }
</style>

<script type="text/javascript">
    var _originalContraEntityGrid = null;
    var _originalContraEntitySummaryGrid = null;

    $(document).ready(function () {
        setTimeout(function () {
            _originalContraEntitySummaryGrid = $('#ContraEntityCapitalChargeSummaryGrid').data('kendoGrid').getOptions();

            LoadGridLayout("#ContraEntityCapitalChargeSummaryGrid");
        }, 5);

        setTimeout(function () {
            _originalContraEntityGrid = $('#ContraEntityCapitalChargeGrid').data('kendoGrid').getOptions();

            LoadGridLayout("#ContraEntityCapitalChargeGrid");
        }, 5);


        var clientEvent1 = new ZeroClipboard(document.getElementById("ContraEntitySummaryButton"));

        clientEvent1.on("ready", function (readyEvent) {
            clientEvent1.on("copy", function (event) {
                var data1 = KendoGridToText("#ContraEntityCapitalChargeGrid", "ContraEntityCapitalChargeGrid", false);
                clientEvent1.setText(data1);
            });
        });        
    });

    function onContraEntityCapitalChargeSummaryLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#ContraEntityCapitalChargeSummaryGrid");
        }, 5);

    }

    function onContraEntityChargeDetailGridLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#ContraEntitiesDetailGrid");
        }, 5);
    }

    $('#SharedLabelCheckBox').change(function () {
        RefreshGrid("#ContraEntityCapitalChargeSummaryGrid");        
        RefreshGrid("#ContraEntityCapitalChargeGrid");                
    });

    function onContraEntityChargeSummaryContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#ContraEntityCapitalChargeSummaryGrid");
                break;

            case 'Unsort':
                onContraEntityChargeUnsortGrid("#ContraEntityCapitalChargeSummaryGrid");
                break;

            case 'Reset Grid':
                ResetUserLayout("#ContraEntityCapitalChargeSummaryGrid");
                $('#ContraEntityCapitalChargeSummaryGrid').data('kendoGrid').setOptions(_originalContraEntitySummaryGrid);
                break;

            case "Reset Filter":
                ResetFilter("#ContraEntityCapitalChargeSummaryGrid");
                break;

            case 'Select All':
                onContraEntityChargeSummarySelectAll(true);
                break;

            case 'Export To Excel':
                exportToContraEntityExcel("#ContraEntityCapitalChargeSummaryGrid", "ContraEntityCapitalChargeSummaryGrid");
                break;
        }
    }

    function onContraEntityChargeContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {        
            case 'AutoFit Columns':
                resizeGridColumns("#ContraEntityCapitalChargeGrid");
                break;

            case 'Unsort':
                onContraEntityChargeUnsortGrid("#ContraEntityCapitalChargeGrid");
                break;

            case 'Reset Grid':
                ResetUserLayout("#ContraEntityCapitalChargeGrid");
                $('#ContraEntityCapitalChargeGrid').data('kendoGrid').setOptions(_originalContraEntityGrid);
                break;

            case "Reset Filter":
                ResetFilter("#ContraEntityCapitalChargeGrid");
                break;

            case 'Select All':
                onContraEntityChargeSelectAll(true);
                break;

            case 'Export To Excel':
                exportToContraEntityExcel("#ContraEntityCapitalChargeGrid", "ContraEntityCapitalChargeGrid");
                break;
        }
    }

    function  onContraEntityChargeUnsortGrid(e)
    {
        UnsortGrid(e);
    }

    function exportToContraEntityExcel(gridName, spreadSheetName) {
        KendoGridToCSVConvertor(gridName, spreadSheetName);
    }

    function onContraEntityChargeSummarySelectAll() {
        try {
            var contraGrid = $("#ContraEntityCapitalChargeSummaryGrid").data("kendoGrid");
            contraGrid.select(contraGrid.tbody.find(">tr"));
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onContraEntityChargeSelectAll() {
        try {
            var contraGrid = $("#ContraEntityCapitalChargeGrid").data("kendoGrid");
            contraGrid.select(contraGrid.tbody.find(">tr"));
        }
        catch (e) {
            console.log(e.message);
        }
    }


    function onContraEntityChargeDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function(valid) {
                    userPreference = valid;

                    var dropdownList = $('#ContraEntityCapitalChargeDropdownList').data("kendoMultiSelect");

                    dropdownList.value(userPreference.DefaultFirm);

                    $('#ContraEntityCapitalChargeSummaryGrid').data("kendoGrid").dataSource.read();
                    $('#ContraEntityCapitalChargeGrid').data("kendoGrid").dataSource.read();
                },
                error: function(valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onContraEntityChargeGridLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#ContraEntityCapitalChargeGrid");
        }, 5);
    }

    function onContraEntityChargeDetailChange() {
        $('#ContraEntityCapitalChargeGrid').data("kendoGrid").dataSource.read();
    }

    function additionalContraEntityCapitalChargeSummaryData() {

        var datepicker = $("#ContraEntityCapitalChargeCalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entity = $("#ContraEntityCapitalChargeDropdownList").data("kendoMultiSelect");
        var currency = $("#ContraEntityCapitalCurrencyDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity.value(),
            effectiveDate: value,
            currencyCode: currency
        };
    }

    function additionalContraEntityCapitalChargeData() {

        try {
            var datepicker = $("#ContraEntityCapitalChargeCalander").data("kendoDatePicker");
            var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

            var entity = $("#ContraEntityCapitalChargeDropdownList").data("kendoMultiSelect");
            var currency = $("#ContraEntityCapitalCurrencyDropdownList").data("kendoDropDownList").value();

            var entityGrid = $("#ContraEntityCapitalChargeSummaryGrid").data("kendoGrid");            
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            var legalEntityId = selectedItem["LegalEntityId"];
            var contractCurrency = selectedItem["ContractCurrency"];


            return {
                entityId: entity.value(),
                effectiveDate: value,
                legalEntityId: legalEntityId,
                currencyCode: contractCurrency,
                reportingCurrency: currency
            };
        }
        catch 
        {
            return {
                entityId: null,
                effectiveDate: null,
                legalEntityId: null,
                currencyCode:null,
                reportingCurrency: null
            };
        }
    }

    function onContraEntityChargeError(e) {
        console.log(e.message);
    }

    function onContraEntityChargeDetailError(e) {
        console.log(e.message);
    }

    function onContraEntityChargeChange() {        
        $("#ContraEntityCapitalChargeSummaryGrid").data("kendoGrid").dataSource.read();        
    }

    function onLoadCapitalChargeRatePartial() {
        try {
          
            HelperPartialWindow(
                null,
                'Manage Capital Charges',
                1100,
                450,
                '/DomesticTrading/ContraEntity/LoadCapitalChargeRatePartial'
            );
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onContraEntityCapitalChargeSummaryRowChange(e) {
        $("#ContraEntityCapitalChargeGrid").data("kendoGrid").dataSource.read();
    }
</script>

@(
 Html.Kendo().ToolBar()
        .Name("ContraEntityProfileToolBar")
    .Resizable(true)
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("EffectiveDate").ToHtmlString());

        items.Add().Template(Html.Kendo().DatePicker()
                                .Name("ContraEntityCapitalChargeCalander")
                                .Format("yyyy-MM-dd")
                                .Value(DateTime.Now)
                                .HtmlAttributes(new { @class="width90" })
                                .Events(events => events.Change("onContraEntityChargeChange")).ToHtmlString());

        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());

        items.Add().Template(Html.Kendo().MultiSelect()
               .Name("ContraEntityCapitalChargeDropdownList")
               .HtmlAttributes(new { @class = "Toolbar-Cell", @style = "width:200px;overflow:hidden;" })
               .AutoClose(false)
               .TagMode(TagMode.Single)
               .AutoWidth(true)
               .AutoClose(true)
               .ClearButton(true)
               .Enable(true)
               .Placeholder("No records selected")
               .AutoBind(true)
               .ItemTemplate("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                .Events(e =>
                {
                    e.DataBound("onContraEntityChargeDefaultLoad");
                    e.Close("onContraEntityChargeChange");
                })
                .DataTextField("Custodian")
                .DataValueField("CompanyId")
                .DataSource(ds =>
                {
                    ds.Read(read => read.Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" }));
                }).ToHtmlString());
        
        items.Add().Template( LabelHelper.Label( "ReportingCurrency" ).ToHtmlString() );

        items.Add().Template( Html.Kendo().DropDownListFor( m => m )
            .Name( "ContraEntityCapitalCurrencyDropdownList" )
            .HtmlAttributes( new { @class = "width100", data_value_primitive = true } )
            .AutoWidth(true)
            .Events( events => events.Change( "onContraEntityChargeChange" ) )
            .BindTo( Enum.GetNames( typeof( Currency ) ).AsEnumerable() )
            .Value(Currency.USDollars.ToString() ).ToHtmlString() );

        items.Add().Template(Html.Kendo().Button().Name("CapitalChargeRefreshButton").Content("<i class='fa fa-refresh fa-1x'></i>").Events(ev => ev.Click("onContraEntityChargeChange")).ToHtmlString());

        items.Add().Template(Html.Kendo().Button().Name("LoadCapitalChargeRatePartialButton").Content("<i class='fa fa-pencil fa-1x'></i>").Events(ev => ev.Click("onLoadCapitalChargeRatePartial")).ToHtmlString());
    }))

<hr class="hr-white">

<div id="ContraEntityCapitalContent"  class="grid-div">
@(Html.Kendo().Splitter()
        .Name("CapitalContraChargeSplitter")
        .HtmlAttributes(new { @class = "grid" })
        .Orientation(SplitterOrientation.Vertical)
        .Panes(panes =>
        {
            panes.Add()
                .Collapsible(false)
                .Size("30%")
                .Scrollable(false)
                .Content(@<text>
                    @(Html.Kendo().Grid<ContraEntityCapitalChargeSummaryModel>()
    .Name("ContraEntityCapitalChargeSummaryGrid")
    .Sortable(sort =>
    {
        sort.AllowUnsort(true);
        sort.Enabled(true);
        sort.SortMode(GridSortMode.MultipleColumn);
    })
    .Scrollable()
    .Filterable()
    .Navigatable()
    .NoRecords()
     .HtmlAttributes(new { @class = "grid" })
    .Reorderable(reorder => reorder.Columns(true))
    .ColumnMenu(menu =>
    {
        menu.Columns(true);
        menu.Filterable(true);
        menu.Sortable(true);
        menu.ComponentType( "modern" );
    } )
    .Selectable(seclect => seclect.Mode(GridSelectionMode.Multiple))
    .Events(events =>
    {
        events.Change("onContraEntityCapitalChargeSummaryRowChange");
        events.ColumnHide("onContraEntityCapitalChargeSummaryLayoutChange");
        events.ColumnShow("onContraEntityCapitalChargeSummaryLayoutChange");
        events.ColumnResize("onContraEntityCapitalChargeSummaryLayoutChange");
        events.ColumnReorder("onContraEntityCapitalChargeSummaryLayoutChange");
    })
    .Columns(cols =>
    {
        cols.Bound(x => x.EffectiveDate).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        cols.Bound(x => x.LegalEntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.LegalEntityName).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);

        cols.Bound(x => x.ContractCurrency).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.ReportingCurrency).GetColumnFormat(ColumnTypeEnum.String, false, "", "");

        cols.Bound(p => p.ReportingCapitalCharge).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(ReportingCapitalCharge)#", "");
        cols.Bound(p => p.ReportingExcessPayment).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(ReportingExcessPayment)#", "");
        cols.Bound(p => p.ReportingTotalBorrowAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(ReportingTotalBorrowAmount)#", "");
        cols.Bound(p => p.ReportingTotalLoanAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(ReportingTotalLoanAmount)#", "");
        cols.Bound(p => p.ReportingNetBorrowLoanAmount).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetMoneyDirection(ReportingNetBorrowLoanAmount)#", "");

        cols.Bound(p => p.ReportingCollateralDepositAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(ReportingCollateralDepositAmount)#", "");
        cols.Bound(p => p.ReportingCollateralRecievedAmount).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(ReportingCollateralRecievedAmount)#", "");
        cols.Bound(p => p.ReportingNetCollateralMarkToMarketAdjustmentAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(ReportingNetCollateralMarkToMarketAdjustmentAmount)#", "");
        cols.Bound(p => p.ReportingNetCollateralReceivedAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(ReportingNetCollateralReceivedAmount)#", "");
    })
    .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
    .DataSource(ds => ds.Ajax()
        .ServerOperation(false)
        .Read(read => read.Action("Read_ContraEntityCapitalChargeSummary", "ContraEntity", new { area = "DomesticTrading" }).Data("additionalContraEntityCapitalChargeSummaryData"))
        .Aggregates(agg =>
        {
            agg.Add(p => p.ReportingCapitalCharge).Sum();
            agg.Add(p => p.ReportingExcessPayment).Sum();
            agg.Add(p => p.ReportingTotalBorrowAmount).Sum();
            agg.Add(p => p.ReportingTotalLoanAmount).Sum();
            agg.Add(p => p.ReportingNetBorrowLoanAmount).Sum();
            agg.Add(p => p.ReportingCollateralDepositAmount).Sum();
            agg.Add(p => p.ReportingCollateralRecievedAmount).Sum();
            agg.Add(p => p.ReportingNetCollateralMarkToMarketAdjustmentAmount).Sum();
            agg.Add(p => p.ReportingNetCollateralReceivedAmount).Sum();
        })))</text>);

            panes.Add()
                .Collapsible(false)
                .Size("70%")
                .Scrollable(false)
                .Content(@<text>
                    @(
    Html.Kendo().Grid<SL_ContraEntityCapitalChargeProjection>()
            .Name( "ContraEntityCapitalChargeGrid" )
            .HtmlAttributes( new { @class = "grid" } )
            .Sortable()
            .NoRecords()
            .Scrollable( scrollable => scrollable.Virtual( true ) )
            .Filterable()
            .Navigatable()
            .AutoBind(true)
            .Events( events =>
            {
                events.ColumnHide( "onContraEntityChargeGridLayoutChange" );
                events.ColumnShow( "onContraEntityChargeGridLayoutChange" );
                events.ColumnResize( "onContraEntityChargeGridLayoutChange" );
                events.ColumnReorder( "onContraEntityChargeGridLayoutChange" );
            } )
            .ColumnMenu( columnMenu =>
            {
                columnMenu.Filterable( true );
                columnMenu.Columns( true );
                columnMenu.Sortable( true );
                columnMenu.ComponentType( "modern" );
            } )
            .Reorderable( reorder =>
            {
                reorder.Columns( true );
            } )
            .Selectable( select => select.Mode( GridSelectionMode.Multiple ).Type( GridSelectionType.Row ) )
            .Columns( columns =>
            {
                columns.Bound( p => p.EntityId ).Hidden( true ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
                columns.Bound( p => p.ContraEntityId ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
                columns.Bound( p => p.AccountName ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
                columns.Bound( p => p.ContractCurrency).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );

                columns.Bound(p => p.LegalEntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                columns.Bound(p => p.LegalEntityName).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);

                columns.Bound(p => p.CapitalChargePercent).GetColumnFormat(ColumnTypeEnum.Money, false, "#=GetMoneyDirection(CapitalChargePercent)#", "");

                columns.Bound( p => p.TotalBorrowAmount ).GetColumnFormat( ColumnTypeEnum.Money, true, "#=GetMoneyDirection(TotalBorrowAmount)#", "" );
                columns.Bound( p => p.TotalLoanAmount ).GetColumnFormat( ColumnTypeEnum.Money, true, "#=GetMoneyDirection(TotalLoanAmount)#", "" );
                columns.Bound( p => p.NetBorrowLoanAmount ).GetColumnFormat( ColumnTypeEnum.Rate, false, "#=GetMoneyDirection(NetBorrowLoanAmount)#", "" );

                columns.Bound( p => p.CollateralDepositAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(CollateralDepositAmount)#", "");
                columns.Bound( p => p.CollateralRecievedAmount).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetMoneyDirection(CollateralRecievedAmount)#", "" );
                columns.Bound( p => p.NetCollateralMarkToMarketAdjustmentAmount).GetColumnFormat( ColumnTypeEnum.Money, true, "#=GetMoneyDirection(NetCollateralMarkToMarketAdjustmentAmount)#", "" );
                columns.Bound( p => p.NetCollateralReceivedAmount).GetColumnFormat( ColumnTypeEnum.Money, true, "#=GetMoneyDirection(NetCollateralReceivedAmount)#", "" );
            })
                .Resizable( cols => cols.Columns( bool.Parse( DataSystemValues.LoadSystemValue( "ResizeableGrid", "true" ) ) ) )
                .DataSource( dataSource => dataSource
                .Ajax()
                .Read( read => read.Action("Read_ContraEntityCapitalCharge", "ContraEntity", new { Area = "DomesticTrading" } ).Data("additionalContraEntityCapitalChargeData") )
                    .Events( events => events
                            .Error( "onContraEntityChargeError" ) )
                    .ServerOperation( false )
                    .Aggregates( aggregates =>
                    {
                        aggregates.Add(p => p.TotalBorrowAmount).Sum();
                        aggregates.Add(p => p.TotalLoanAmount).Sum();
                        aggregates.Add(p => p.NetBorrowLoanAmount).Sum();
                        aggregates.Add(p => p.CollateralDepositAmount).Sum();
                        aggregates.Add(p => p.CollateralRecievedAmount).Sum();
                        aggregates.Add(p => p.NetCollateralMarkToMarketAdjustmentAmount).Sum();
                        aggregates.Add(p => p.NetCollateralReceivedAmount).Sum();
                    })
                )
    )                </text>);
        })
)

    </div>


@(Html.Kendo().ContextMenu()
.Name( "ContraEntityContextMenu" )
    .Target( "#ContraEntityCapitalChargeGrid" )
    .Events( events => events.Select( "onContraEntityChargeContextMenuSelect" ) )
    .Items( items =>
    {
        items.Add().Text("AutoFit Columns");
        items.Add().Text( "Unsort" ).Enabled( true );
        items.Add().Text( "Reset Filter" ).Enabled( true );
        items.Add().Text( "Reset Grid" ).Enabled( true );
        items.Add().Separator( true );
        items.Add().Text("Select All").Enabled(true);
        items.Add().Text( "Export To Excel" ).Enabled( true );
    } )
)


@(Html.Kendo().ContextMenu()
.Name("ContraEntitySummaryContextMenu")
    .Target("#ContraEntityCapitalChargeSummaryGrid")
    .Events(events => events.Select("onContraEntityChargeSummaryContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
        items.Add().Separator(true);
        items.Add().Text("Select All").Enabled(true);
        items.Add().Text("Export To Excel").Enabled(true);
    })
)
