@using System.ComponentModel
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Enums
@using SLTrader.Tools
@using SLTrader.Models
@using BondFire.Entities.Projections

@model IEnumerable<CallbackModel>

<script type="text/javascript">
       $(document).ready(function () {
        setTimeout(function () {

            if (@Model.Count() >= 1) {
                resizeGridColumns("#ContractCallbackGrid");
            }


            $('#LocalDetailWindow').data("kendoWindow").center();
        }, 5);
    });

    $(function() {
        $('#ContractCallbackGrid').on('click', '.chkbx', function() {
            var checked = $(this).is(':checked');
            var grid = $('#ContractCallbackGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));
            dataItem['Enabled'] = checked;
        });
    });

    function onCallbackEdit(e) {
        var input = e.container.find("input");
        setTimeout(function () { input.select(); });
    }


    function onSelectAllCallback() {
        var grid = $('#ContractCallbackGrid').data('kendoGrid');
        var rows = grid.dataSource.data();
        var processedRowCount = 1;

        $("#CallbackButton").data("kendoButton").enable(false);
        $("#SelectAllButton").data("kendoButton").enable(false);

        $('#ProgressLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing items...');

        for (var index = 0; index < rows.length; index++) {
            grid.dataSource.data()[index].Enabled = true;

            processedRowCount = processedRowCount + 1;
        }

        grid.dataSource.sync();

        $("#CallbackButton").data("kendoButton").enable(true);
        $("#SelectAllButton").data("kendoButton").enable(true);


        $('#ProgressLabel').html('Selected ' + processedRowCount + ' items.');
    }

    function onCallback() {
        var grid = $('#ContractCallbackGrid').data('kendoGrid');
        var rows = grid.dataSource.data();

        var rowCount = 0;
        var processedRowCount = 0;

        $("#CallbackButton").data("kendoButton").enable(false);

        $.each(rows, function (i, row) {
            if (row.Enabled) {
                rowCount++;
            }
        });

        console.log(rows);

        $('#ProgressLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing ' + rowCount + ' items.');

        $.ajax({
            url: "@Url.Action("ProcessCallback", "ContractRelated", new { area = "DomesticTrading" })",
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify(rows),
            success: function (valid) {

                $.each(valid, function (i, obj) {
                    var effectiveDate = kendo.parseDate(obj['EffectiveDate']);
                    var valueDate = kendo.parseDate(obj['ValueDate']);

                    obj['EffectiveDate'] = effectiveDate;
                    obj['ValueDate'] = valueDate;
                });

                grid.dataSource.data(valid);
                grid.refresh();

                var _grid = $("#ContractCallbackGrid").data("kendoGrid");
                var _data = _grid.dataSource.data();

                $("#CallbackButton").data("kendoButton").enable(false);

                $.each(_data, function (i, row) {
                    if (row.Enabled) {
                        $("#CallbackButton").data("kendoButton").enable(true);

                        processedRowCount++;
                    }
                });

                $('#ProgressLabel').html('Processed ' + processedRowCount + ' out of ' + rowCount + ' items.');

                if (processedRowCount == rowCount) {
                    $('#LocalDetailWindow').data("kendoWindow").close();
                }
            },
            error: function (valid) {
                console.log(valid);
                $('#ProgressLabel').html('<i class="fa fa-times"></i> Error Processing!');
                $("#CallbackButton").data("kendoButton").enable(true);
            }
        });
    }
</script>

@if (!Model.Any())
{
    <div style="padding:20px;font-size:small;">
        <h2>No Data Selected / Processed</h2>
    </div>
}
else
{
@(
 Html.Kendo().ToolBar()
        .Name("SharedCallbackToolBar")
    .Items(items =>
    {
        items.Add().Template(Html.Kendo().Button().Name("CallbackButton").Content("Send Callback").Events(e => e.Click("onCallback")).ToHtmlString());
        items.Add().Template(Html.Kendo().Button().Name("SelectAllButton").Content("Select All").Events(e => e.Click("onSelectAllCallback")).ToHtmlString());
        items.Add().Template("<label id='ProgressLabel'></label>");
    })
)
<div id="ContractCallbackCenterDiv">
@(Html.Kendo().Grid(Model)
    .Name("ContractCallbackGrid")
    .HtmlAttributes(new { @class = "grid" })
    .Scrollable()
    .Selectable()
    .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
    .Editable(editable => editable.Mode(GridEditMode.InCell).Enabled(true).DisplayDeleteConfirmation(false))
    .Events(e => e.Edit("onCallbackEdit"))
    .Columns(columns =>
    {
        columns.Command(c => c.Destroy()).Width(80);
        columns.Bound(x => x.ModelId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound(x => x.Enabled).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox'  class='chkbx' #= (Enabled) ? checked ='checked' : '' #/>", "");
        columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound(x => x.ContraEntity).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.ContractNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.TradeType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.IssueId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.SecNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Classification).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Quantity).GetColumnFormat(ColumnTypeEnum.String, true, "#=GetPositionDirection(Quantity)#", "");
        columns.Bound(x => x.Amount).GetColumnFormat(ColumnTypeEnum.String, true, "#=GetMoneyDirection(Amount)#", "");
        columns.Bound(x => x.CallbackQuantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(CallbackQuantity)#", "DecimalNumber");
        columns.Bound(x => x.CallbackAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(CallbackAmount)#", "");
        columns.Bound(x => x.SubmissionType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.MemoInfo).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Width(80);
    })
    .DataSource(read => read.Ajax()
        .Aggregates(agg =>
        {
            agg.Add(x => x.Quantity).Sum();
            agg.Add(x => x.Amount).Sum();
            agg.Add(x => x.CallbackQuantity).Sum();
            agg.Add(x => x.CallbackAmount).Sum();
        })
        .ServerOperation(false)
        .AutoSync(true)
                .Create(create => create.Action("CallbackChangeModel_Update", "ContractRelated", new { area = "DomesticTrading" }))
                .Destroy(destroy => destroy.Action("CallbackChangeModel_Destroy", "ContractRelated", new { area = "DomesticTrading" }))
                .Update(update => update.Action("CallbackChangeModel_Update", "ContractRelated", new { area = "DomesticTrading" }))
        .Model(model =>
        {
            model.Id(x => x.ModelId);
            model.Field(x => x.Enabled).Editable(true);
            model.Field(x => x.EntityId).Editable(false);

            model.Field(x => x.ContraEntity).Editable(false);
            model.Field(x => x.ContractNumber).Editable(false);
            model.Field(x => x.TradeType).Editable(false);
            model.Field(x => x.IssueId).Editable(false);
            model.Field(x => x.SecurityNumber).Editable(false);
            model.Field(x => x.Ticker).Editable(false);
            model.Field(x => x.SecNumber).Editable(false);
            model.Field(x => x.Classification).Editable(false);
            model.Field(x => x.Quantity).Editable(false);
            model.Field(x => x.Amount).Editable(false);

            model.Field(x => x.CallbackQuantity).Editable(true);
            model.Field(x => x.CallbackAmount).Editable(false);
            model.Field(x => x.SubmissionType).Editable(false);
            model.Field(x => x.MemoInfo).Editable(false);
        }))
)
</div>
}