@using System.ComponentModel
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Enums
@using SLTrader.Tools
@using SLTrader.Models
@using BondFire.Entities.Projections
@using SLTrader.Models.ContractRelatedModels

@model IEnumerable<ProfitCenterChangeModel>

<style scoped>
        #ProfitChangeTable {
        border-collapse:collapse;
        width:100%;
    }

        #ProfitChangeTable th,
        #ProfitChangeTable td {
            min-height: 50px;
            padding: 5px 0px 0px 5px;
        }



    #ProgressSingleLabel {
        width: 100%;
        font-style: normal;
        white-space: pre-wrap;
        border: 1px solid #ccc;
        height: 50px;
    }
</style>

<script type="text/javascript">
    $(document).ready(function () {
        setTimeout(function () {

            if (@Model.Count() > 1) {
                resizeGridColumns("#ContractProfitGrid");
            }


            $('#LocalDetailWindow').data("kendoWindow").center();
        }, 5);
    });

    function getFormData($form) {
        var unindexed_array = $form.serializeArray();
        var indexed_array = {};

        $.map(unindexed_array, function (n, i) {
            indexed_array[n['name']] = n['value'];
        });

        indexed_array['Enabled'] = "true";
    
        return indexed_array;
    }

    function onProcessSingleProfitCenter() {
     
        var form = $("#my-form");
        var formJSON = getFormData(form);
     
        $('#ProgressSingleLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing 1 item.');
        $('#ProfitCenterSingleButton').data("kendoButton").enable(false);

         $.ajax({
                url: "@Url.Action("ProcessProfitId", "ContractRelated", new { area = "DomesticTrading" })",
                type: 'POST',
                contentType: 'application/json;',
                data: '[' + JSON.stringify(formJSON) + ']',
                success: function (valid) {
                    $('#ProfitCenterSingleButton').data("kendoButton").enable(true);
                    $('#LocalDetailWindow').data("kendoWindow").close();                    
                },
                error: function (valid) {
                    $('#ProfitCenterSingleButton').data("kendoButton").enable(true);
                }
            });      
    }

    $(function() {
        $('#ContractProfitGrid').on('click', '.chkbx', function() {
            var checked = $(this).is(':checked');
            var grid = $('#ContractProfitGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));
            grid.select($(this).closest('tr'));

            var entityGrid = $("#ContractProfitGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            if (selectedItem.SubmissionType != '@Convert.ToInt32(StatusDetail.Approved)') {
                dataItem['Enabled'] = checked;
            }

            var grid = $("#ContractProfitGrid").data("kendoGrid");
            var data = grid.dataSource.data();

            $("#ProfitCenterButton").data("kendoButton").enable(false);
            $("#SuggestButton").data("kendoButton").enable(false);

            $.each(data, function (i, row) {
                if (row.Enabled)
                {
                    $("#ProfitCenterButton").data("kendoButton").enable(true);
                    $("#SuggestButton").data("kendoButton").enable(true);
                }
            });
        });
    });

    function onProfitIdEdit(e) {
        e.container.find("input[name='NewProfitCenter']").attr('maxlength', '1');

        var entityGrid = $("#ContractProfitGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        if (selectedItem.SubmissionType == '@Convert.ToInt32(StatusDetail.Approved)') {
            $('#ContractProfitGrid').data("kendoGrid").closeCell();
        }
        else {
            var input = e.container.find("input");
            setTimeout(function () { input.select(); });
        }
    }

    $(document).bind('keydown', 'alt+s', function (e) {
        if (e.altkey && (e.which == 83)) {

            e.preventDefault();
            onProfitIdChange();
            return false;
        }
    });

    $(document).bind('keydown', 'alt+e', function (e) {
        if (e.altkey && (e.which == 69)) {
            e.preventDefault();
            onProfitIdSelectAll();
            return false;
        }
    });

    $(document).bind('keydown', 'alt+b', function (e) {
        if (e.altkey && (e.which == 66)) {
            e.preventDefault(); 
            window.onBulkApply();
            return false;
        }
    });

    function onSelectAllProfitId() {
        var grid = $('#ContractProfitGrid').data('kendoGrid');
        var rows = grid.dataSource.data();
        var processedRowCount = 0;

        $("#ProfitCenterButton").data("kendoButton").enable(false);
        $("#SuggestButton").data("kendoButton").enable(false);

        $('#ProgressLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing items...');

        for (var index = 0; index < rows.length; index++) {
            grid.dataSource.data()[index].Enabled = true;

            processedRowCount = processedRowCount + 1;
        }

        grid.dataSource.sync();

        $("#ProfitCenterButton").data("kendoButton").enable(true);
        $("#SuggestButton").data("kendoButton").enable(true);


        $('#ProgressLabel').html('Selected ' + processedRowCount + ' items.');


    }
    function onSuggestSingleProfitCenter() {
        var form = $("#my-form");
        var formJSON = getFormData(form);


        $.ajax({
            url: "@Url.Action("SuggestProfitCenter", "ContractRelated")",
            type: 'POST',
            contentType: 'application/json;',
            data: '[' + JSON.stringify(formJSON) + ']',
            success: function (valid) {
                var suggestedPC = '';

                $.each(valid, function (i, row) {
                    suggestedPC = row.NewProfitCenter;
                });

                $("#NewProfitCenterTextBox").val(suggestedPC);
            },
            error: function (valid) {
                $('#ProgressLabel').html('<i class="fa fa-times"></i> Error Processing!');
            }
        });
    }


    function onProfitIdMatrixSuggest() {
        var grid = $('#ContractProfitGrid').data('kendoGrid');
        var rows = grid.dataSource.data();
        var rowCount = 0;
        var processedRowCount = 0;

        $.each(rows, function (i, row) {
            if (row.Enabled) {
                $("#ProfitCenterButton").data("kendoButton").enable(true);
                $("#SuggestButton").data("kendoButton").enable(true);

                rowCount++;
            }
        });

        $('#ProgressLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing ' +  rowCount + ' items.');

        $.ajax({
            url: "@Url.Action("SuggestProfitCenter", "ContractRelated")",
            type: 'POST',
        contentType: 'application/json;',
        data: JSON.stringify(rows),
        success: function(valid) {
            grid.dataSource.data(valid);
            grid.refresh();

            var _grid = $("#ContractProfitGrid").data("kendoGrid");
            var _data = _grid.dataSource.data();

            $("#ProfitCenterButton").data("kendoButton").enable(false);
            $("#SuggestButton").data("kendoButton").enable(false);

            $.each(_data, function (i, row) {
                if (row.Enabled) {
                    $("#ProfitCenterButton").data("kendoButton").enable(true);
                    $("#SuggestButton").data("kendoButton").enable(true);

                    processedRowCount++;
                }
            });

            $('#ProgressLabel').html('Processed ' + processedRowCount + ' out of ' + rowCount + ' items.');

        },
        error: function(valid) {
            LogError(valid);

            $('#ProgressLabel').html('<i class="fa fa-times"></i> Error Processing!');
        }
    });
    }

    function onBulkProfitApply() {
        var dataSource = $("#ContractProfitGrid").data("kendoGrid").dataSource;
        var profitIdBox = document.getElementById('BulkProfitTextBox').value;

        var grid = $('#ContractProfitGrid').data('kendoGrid');
        var rows = grid.dataSource.data();


        if (profitIdBox == null) {
            return;
        }

        $("#BulkApplyButton").data("kendoButton").enable(false);

        var rowCount = 0;
        var processedRowCount = 0;

        $.each(rows, function (i, row) {
            if (row.Enabled) {
                $("#ProfitCenterButton").data("kendoButton").enable(true);
                $("#SuggestButton").data("kendoButton").enable(true);
 
                rowCount++;
            }
        });

        $('#ProgressLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing ' + rowCount + ' items.');

        var data = dataSource.data();

        var totalNumber = dataSource.total();

        try {
            for (var i = 0; i < totalNumber; i++) {
                var currentDataItem = data[i];
                if (currentDataItem.Enabled == 1) {
                    currentDataItem.set('NewProfitCenter', profitIdBox);
                    currentDataItem.set('Enabled', true);
                    currentDataItem.set('SubmissionType', '@StatusDetail.HeldLocal');
                }
            }

            var _grid = $("#ContractProfitGrid").data("kendoGrid");
            var _data = _grid.dataSource.data();

            $("#ProfitCenterButton").data("kendoButton").enable(false);
            $("#SuggestButton").data("kendoButton").enable(false);

            $.each(_data, function (i, row) {
                if (row.Enabled) {
                    $("#ProfitCenterButton").data("kendoButton").enable(true);
                    $("#SuggestButton").data("kendoButton").enable(true);
 
                    processedRowCount++;
                }
            });

            $('#ProgressLabel').html('Processed ' + processedRowCount + ' out of ' + rowCount + ' items.');
        }
        catch (e) {
            console.log(e.message);
        }

        $("#BulkApplyButton").data("kendoButton").enable(true);
    }

    function onProfitIdChange() {
        var grid = $('#ContractProfitGrid').data('kendoGrid');
        var rows = grid.dataSource.data();

        var rowCount = 0;
        var processedRowCount = 0;

        $("#ProfitCenterButton").data("kendoButton").enable(false);
        $("#SuggestButton").data("kendoButton").enable(false);


        $.each(rows, function (i, row) {
            if (row.Enabled) {           
                rowCount++;
            }
        });

        $('#ProgressLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing ' + rowCount + ' items.');
        $("#ProfitCenterButton").data("kendoButton").enable(false);

        $.ajax({
            url: "@Url.Action("ProcessProfitId", "ContractRelated")",
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify(rows),
            success: function(valid) {
                grid.dataSource.data(valid);
                grid.refresh();

                var _grid = $("#ContractProfitGrid").data("kendoGrid");
                var _data = _grid.dataSource.data();

                $("#ProfitCenterButton").data("kendoButton").enable(false);
                $("#SuggestButton").data("kendoButton").enable(false);
                $("#BulkApplyButton").data("kendoButton").enable(false);

                $.each(_data, function (i, row) {
                    if (row.Enabled) {
                        $("#ProfitCenterButton").data("kendoButton").enable(true);
                        $("#SuggestButton").data("kendoButton").enable(true);

                        processedRowCount++;
                    }
                });

                $('#ProgressLabel').html('Processed ' + processedRowCount + ' out of ' + rowCount + ' items.');


                if (processedRowCount == rowCount) {
                    $('#LocalDetailWindow').data("kendoWindow").close();
                }
            },
            error: function(valid) {
                LogError(valid);

                $('#ProgressLabel').html('<i class="fa fa-times"></i> Error Processing!');
                $("#ProfitCenterButton").data("kendoButton").enable(true);
            }
        });
    }

    function onContractProfitDataBound(e) {
        try {
            var grid = $("#ContractProfitGrid").data("kendoGrid");
            var data = grid.dataSource.data();

            $("#ProfitCenterButton").data("kendoButton").enable(false);
            $("#SuggestButton").data("kendoButton").enable(false);

            $.each(data, function (i, row) {
                if (row.Enabled) {
                    $("#ProfitCenterButton").data("kendoButton").enable(true);
                    $("#SuggestButton").data("kendoButton").enable(true);
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onBulkProfitTextBoxChange(e) {
        var batchCode = $('#BulkProfitTextBox').val();

        if (batchCode.length == 0) {
            $("#BulkApplyButton").data("kendoButton").enable(false);
        }
        else {
            $("#BulkApplyButton").data("kendoButton").enable(true);
        }
    }

    $('#NewProfitCenterTextBox').on('focus', function () {
        var input = $(this);
        setTimeout(function () { input.select(); });
    });
</script>

@if (!Model.Any())
{
    <div style="padding:20px;font-size:small;">
        <h2>No Data Selected / Processed</h2>
    </div>
}
else if (Model.Count() == 1)
{
    using (Html.BeginForm("Action", "ControllerName", FormMethod.Post, new { id = "my-form" }))
    {
        <table id="ProfitChangeTable">
            <tr>
                <td>@LabelHelper.Label("ClearingId")</td>
                <td>@Html.Kendo().TextBoxFor(x => x.First().ClearingId).HtmlAttributes(new { @readonly = "readonly", style = "width:75px;" })</td>                
            </tr>

            <tr>
                <td>@LabelHelper.Label("ContraEntity")</td>
                <td>@Html.Kendo().TextBoxFor(x => x.First().ContraEntity).HtmlAttributes(new { @readonly = "readonly", style = "width:75px;" })</td>
                <td style="display:none">@Html.Kendo().CheckBoxFor(x => x.First().Enabled).HtmlAttributes(new { ID = "EnabledCheckBox" }).Checked(true).Label(LabelHelper.Text("Enabled"))</td>
            </tr>
            <tr>
                <td>@LabelHelper.Label("SecurityNumber")</td>
                <td>@Html.Kendo().TextBoxFor(x => x.First().SecurityNumber).HtmlAttributes(new { @readonly = "readonly", style = "width:75px;" }) @Html.Kendo().TextBoxFor(x => x.First().Ticker).HtmlAttributes(new { @readonly = "readonly", style = "width:60px;" })</td>
            </tr>            
            <tr>
                <td>@LabelHelper.Label("Quantity")</td>
                <td>@Html.Kendo().NumericTextBoxFor(x => x.First().Quantity).Format("n0").HtmlAttributes(new { @readonly = "readonly", style = "width:75px;" }).Spinners(false)</td>
            </tr>
            <tr>
                <td>@LabelHelper.Label("Amount")</td>
                <td>@Html.Kendo().NumericTextBoxFor(x => x.First().Amount).Format("n0").HtmlAttributes(new { @readonly = "readonly", style = "width:75px;" }).Spinners(false)</td>
            </tr>
            <tr>
                <td>@LabelHelper.Label("OldProfitCenter")</td>
                <td>@Html.Kendo().TextBoxFor(x => x.First().OldProfitCenter).HtmlAttributes(new { @readonly = "readonly", style = "width:75px;" })</td>                
            </tr>
            <tr>
                <td>@LabelHelper.Label("NewProfitCenter")</td>
                <td>@Html.Kendo().TextBoxFor(x => x.First().NewProfitCenter).HtmlAttributes(new { ID = "NewProfitCenterTextBox", style = "width:75px;" })
                <td><a href="#" onclick="onSuggestSingleProfitCenter()" class="k-button">@LabelHelper.Text("SuggestSingleProfitCenter")</a></td>
            </tr>
            <tr>
                <td colspan="3" align="left">
                    <label id='ProgressSingleLabel'></label>
                </td>
            </tr>
            <tr>
                <td colspan="3" align="right">
                    @Html.Kendo().Button().Name("ProfitCenterSingleButton").Content(LabelHelper.Text("SendSingleProfitCenter")).Events(e => e.Click("onProcessSingleProfitCenter"))      
                </td>
            </tr>
        </table>

       @Html.HiddenFor(x => x.First().ModelId)
        @Html.HiddenFor(x => x.First().Enabled)
        @Html.HiddenFor(x => x.First().EffectiveDate)
        @Html.HiddenFor(x => x.First().Entity)
        @Html.HiddenFor(x => x.First().ContraEntity)
        @Html.HiddenFor(x => x.First().ContractNumber)
        @Html.HiddenFor(x => x.First().TradeType)
        @Html.HiddenFor(x => x.First().IssueId)
        @Html.HiddenFor(x => x.First().SecurityNumber)
        @Html.HiddenFor(x => x.First().Ticker)
        @Html.HiddenFor(x => x.First().Quantity)
        @Html.HiddenFor(x => x.First().Amount)
        @Html.HiddenFor(x => x.First().RebateRate)
        @Html.HiddenFor(x => x.First().OldProfitCenter)        
        @Html.HiddenFor(x => x.First().SubmissionType)
        @Html.HiddenFor(x => x.First().MemoInfo)
    }
}
else
{

@(
 Html.Kendo().ToolBar()
    .Name("SharedPCToolBar")
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("BulkProfitIdLbl").ToHtmlString());        
        items.Add().Template(Html.Kendo().AutoComplete().Name("BulkProfitTextBox").HtmlAttributes(new { ID = "BulkProfitTextBox", maxlength = "1", style = "width:50px;" }).Suggest(true).Events(ev => ev.Filtering("onBulkProfitTextBoxChange")).ToHtmlString());

        items.Add().Template(Html.Kendo().Button().Name("BulkApplyButton").Content("Apply PC").Events(e => e.Click("onBulkProfitApply")).Enable(false).ToHtmlString());
        items.Add().Template(Html.Kendo().Button().Name("SelectAllButton").Content("Select All").Events(e => e.Click("onSelectAllProfitId")).ToHtmlString());
        items.Add().Template(Html.Kendo().Button().Name("SuggestButton").Content("Suggest").Events(e => e.Click("onProfitIdMatrixSuggest")).Enable(false).ToHtmlString());
        items.Add().Template(Html.Kendo().Button().Name("ProfitCenterButton").Content("Send PC").Events(e => e.Click("onProfitIdChange")).Enable(false).ToHtmlString());

        items.Add().Template("<label id='ProgressLabel'></label>");
    })
)

    <hr class="hr-white">
    <div>
        @(Html.Kendo().Grid( Model )
    .Name( "ContractProfitGrid" )
    .HtmlAttributes( new { @class = "grid" } )
    .Scrollable()
    .Selectable()
    .NoRecords()
    .Resizable( cols => cols.Columns( bool.Parse( DataSystemValues.LoadSystemValue( "ResizeableGrid", "true" ) ) ) )
    .Editable( editable => editable.Mode( GridEditMode.InCell ) )
        .Events( e => e.Edit( "onProfitIdEdit" ).DataBound( "onContractProfitDataBound" ) )
    .Columns( columns =>
    {
        columns.Bound( x => x.SubmissionType ).GetColumnFormat( ColumnTypeEnum.String, false, "# if (SubmissionType == " + Convert.ToInt32( StatusDetail.Approved ).ToString() + ") { #" +
"<div style='text-align:center;' class='k-widget k-notification k-notification-success'><i class='fa  fa-check'></i></div>" +
"# } else if (SubmissionType == " + Convert.ToInt32( StatusDetail.Rejected ).ToString() + "){ #" +
"<div style='text-align:center;' class='k-widget k-notification k-notification-error'><i class='fa fa-times' ></i></div>" +
"# } else if (SubmissionType == " + Convert.ToInt32( StatusDetail.HeldLocal ).ToString() + "){ #" +
"<div style='text-align:center;' class='k-widget k-notification k-notification-warning'><i class='fa fa-pencil'></i></div>" +
"# }#", "" );
        columns.Bound( x => x.ModelId ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
        columns.Bound( x => x.Enabled ).GetColumnFormat( ColumnTypeEnum.String, false, "<input type='checkbox'  class='chkbx' #= (Enabled) ? checked ='checked' : '' #/>", "" );
        columns.Bound( x => x.Entity ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
        columns.Bound(x => x.ClearingId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound( x => x.ContraEntity ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.ContractNumber ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.TradeType ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.SecurityNumber ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.Ticker ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.Quantity ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(Quantity)#", "" );
        columns.Bound( x => x.Amount ).GetColumnFormat( ColumnTypeEnum.Money, true, "#=GetMoneyDirection(Amount)#", "" );
        columns.Bound( x => x.RebateRate ).GetColumnFormat( ColumnTypeEnum.Rate, false, "#=GetRateDirection(RebateRate)#", "" );
        columns.Bound( x => x.OldProfitCenter ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.NewProfitCenter ).GetColumnFormat( ColumnTypeEnum.String, false, "", "String" );
        columns.Bound( x => x.SubmissionType ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.MemoInfo ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
    } )
    .DataSource( read => read.Ajax()
        .Aggregates( agg =>
        {
            agg.Add( x => x.Quantity ).Sum();
            agg.Add( x => x.Amount ).Sum();
        } )
        .ServerOperation( false )
        .AutoSync( true )
        .Update( update => update.Action( "ProfitIdChangeModel_Update", "ContractRelated", new { area = "DomesticTrading" } ) )
        .Model( model =>
        {
            model.Id( x => x.ModelId );
            model.Field( x => x.ModelId ).Editable( false );
            model.Field( x => x.Enabled ).Editable( false );
            model.Field( x => x.Entity ).Editable( false );
            model.Field(x => x.ClearingId).Editable(false);
            model.Field( x => x.ContraEntity ).Editable( false );
            model.Field( x => x.ContractNumber ).Editable( false );
            model.Field( x => x.TradeType ).Editable( false );
            model.Field( x => x.SecurityNumber ).Editable( false );
            model.Field( x => x.Ticker ).Editable( false );
            model.Field( x => x.Quantity ).Editable( false );
            model.Field( x => x.Amount ).Editable( false );
            model.Field( x => x.RebateRate ).Editable( false );
            model.Field( x => x.OldProfitCenter ).Editable( false );
            model.Field( x => x.NewProfitCenter ).Editable( true );
            model.Field( x => x.SubmissionType ).Editable( false );
            model.Field( x => x.MemoInfo ).Editable( false );
        } ) ))
    </div>
}