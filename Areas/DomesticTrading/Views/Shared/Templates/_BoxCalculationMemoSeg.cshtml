@using SLTrader.Tools
@using SLTrader.Enums;
@using SLTrader.Models.ContractRelatedModels


@model IEnumerable<MemoSegUpdateModel>

<style>
    #MemoSegSingleChangeDiv td .k-checkbox-label {
        vertical-align: middle;
        top: -2px;
    }

    #MemoSegSingleChangeDiv td,
    #MemoSegSingleChangeDiv th {
        min-height: 50px;
        padding: 5px 0px 0px 5px;
    }
</style>


<script type="text/javascript">
    function onError(e) {
        console.log(e);
    }

    function onSharedMemoSegEdit(e) {
        var entityGrid = $("#BoxCalculationMemoSegGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        if (selectedItem.SubmissionType == '@Convert.ToInt32(StatusDetail.Approved)') {
            $('#BoxCalculationMemoSegGrid').data("kendoGrid").closeCell();
        }
        else {
            var input = e.container.find("input");
            setTimeout(function () { input.select(); });
        }
    }

    function onSelectAllMemoSeg() {
        var grid = $('#BoxCalculationMemoSegGrid').data('kendoGrid');
        var rows = grid.dataSource.data();
        var processedRowCount = 0;

        $("#MemoSegAllButton").data("kendoButton").enable(false);        
        $("#SelectAllButton").data("kendoButton").enable(false);

        $('#ProgressLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing items...');

        for (var index = 0; index < rows.length; index++) {
            if (grid.dataSource.data()[index].ReturnPortionQuantity > 0) {
                grid.dataSource.data()[index].Enabled = true;
                processedRowCount = processedRowCount + 1;
            }
        }

        grid.dataSource.sync();

        $('#ProgressLabel').html('Selected ' + processedRowCount + ' items.');

        $("#MemoSegAllButton").data("kendoButton").enable(true);
        $("#SelectAllButton").data("kendoButton").enable(true);
    }

    function getFormData($form) {
        var unindexed_array = $form.serializeArray();
        var indexed_array = {};

        $.map(unindexed_array, function (n, i) {
            indexed_array[n['name']] = n['value'];
        });      

        return indexed_array;
    }

    function onProcessSingleMemoSeg() {
        var quantity = $("#MemoSegQuantityTextBox").data("kendoNumericTextBox").value();

        var form = $("#my-form");
        var formJSON = getFormData(form);

        $.ajax({
            url: "@Url.Action("ProcessMemoSegs", "ContractRelated", new { area = "DomesticTrading" })",
            type: 'POST',
            contentType: 'application/json;',
            data: '[' + JSON.stringify(formJSON) + ']',
            success: function (valid) {
                $('#LocalDetailWindow').data("kendoWindow").close();
            },
            error: function (valid) {
                $("#ReturnAllButton").data("kendoButton").enable(true);
            }
        });
    }
 

    function onProcessMemoSeg() {
        var grid = $('#BoxCalculationMemoSegGrid').data('kendoGrid');
        var rows = grid.dataSource.data();

        var rowCount = 0;
        var processedRowCount = 0;

        $("#MemoSegAllButton").data("kendoButton").enable(false);
        
        $.each(rows, function (i, row) {
            if (row.Enabled) {
                rowCount++;
            }
        });
        
        $('#ProgressLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing ' + rowCount + ' items.');
       
        $.ajax({
            url: "@Url.Action("ProcessMemoSegChanges", "ContractRelated", new { area = "DomesticTrading" })",
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify(rows),
            success: function(valid) {
                
                grid.dataSource.data(valid);
                grid.refresh();

                var _grid = $("#BoxCalculationMemoSegGrid").data("kendoGrid");
                var _data = _grid.dataSource.data();

                $("#MemoSegAllButton").data("kendoButton").enable(false);                

                $.each(_data, function (i, row) {
                    if (row.Enabled) {
                        $("#MemoSegAllButton").data("kendoButton").enable(true);                        

                        processedRowCount++;
                    }
                });

                $('#ProgressLabel').html('Processed ' + processedRowCount + ' out of ' + rowCount + ' items.');

                if (processedRowCount == rowCount) {
                    $('#LocalDetailWindow').data("kendoWindow").close();
                }
            },
            error: function(valid) {               
                $('#ProgressLabel').html('<i class="fa fa-times"></i> Error Processing!');
                $("#MemoSegAllButton").data("kendoButton").enable(true);
            }
        });
    }
    
    $('#MemoSegQuantityTextBox').on('focus', function () {
        var input = $(this);
        setTimeout(function () { input.select(); });
    });  
</script>

@if (!Model.Any())
{
   <div style="padding:20px;font-size:small;">
       <h2>No Data Selected / Processed</h2>
   </div>
}
else if (Model.Count() == 1)
{
    using (Html.BeginForm("Action", "ControllerName", FormMethod.Post, new { id = "my-form" }))
    {
    <table id="MemoSegSingleChangeDiv">
        <tr>
            <td>@LabelHelper.Label("SecurityNumber")</td>
            <td>@Html.Kendo().TextBoxFor(x => x.First().SecurityNumber).HtmlAttributes(new { @readonly = "readonly", style = "width:75px;", @class = "k-widget k-textbox" }) @Html.Kendo().TextBoxFor(x => x.First().Ticker).HtmlAttributes(new { @readonly = "readonly", style = "width:60px;" })</td>
        </tr>
        <tr>
            <td>@LabelHelper.Label("MemoSegOperator")</td>
            <td>
                @(Html.Kendo().DropDownListFor(m => m.First().Operator)
                    .DataValueField("Value")
                    .DataTextField("Text")
                    .HtmlAttributes(new { style = "width:120px;" })
                    .BindTo(EnumExtensions.GetEnumSelectList<SL_MemoSegOperator>()))
            </td>
        </tr>        
        <tr>
            <td>@LabelHelper.Label("Quantity")</td>
            <td>@Html.Kendo().NumericTextBoxFor(x => x.First().Quantity).Format("n0").HtmlAttributes(new {  ID = "MemoSegQuantityTextBox", style = "width:75px;" }).Spinners(false)</td>            
        </tr>    
        <tr>
            <td colspan="3" align="left">
                <label id='ProgressLabel'></label>
            </td>
        </tr>
        <tr>
            <td colspan ="3" align="right">
                <a href="#" onclick="onProcessSingleMemoSeg()" class="k-button">@LabelHelper.Text("SendSingleMemoSeg")</a>                
            </td>
        </tr>
    </table>
        
        @Html.HiddenFor(x => x.First().EntityId)        
        @Html.HiddenFor(x => x.First().IssueId)
    }
}
else
{

    @(
    Html.Kendo().ToolBar()
    .Name("SharedRecallToolBar")
    .Items(items =>
    {
        items.Add().Template(Html.Kendo().Button().Name("SelectAllButton").Content("Select All").Events(e => e.Click("onSelectAllMemoSeg")).ToHtmlString());        
        items.Add().Template(Html.Kendo().Button().Name("MemoSegAllButton").Content("Send MemoSeg").Events(e => e.Click("onProcessMemoSeg")).Enable(false).ToHtmlString());
        items.Add().Template("<label id='ProgressLabel'></label>");
    })

    )

    <hr class="hr-white">

    <div id="RecallAddDiv" class="grid-div">
        @(Html.Kendo().Grid(Model)
    .Name("BoxCalculationMemoSegGrid")
    .HtmlAttributes(new { @style = "height:85%;" })
    .Scrollable()
    .Selectable()
    .NoRecords()
    .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
    .Editable(edit => edit.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(false).Enabled(true))
    .Events(events => events.Edit("onSharedMemoSegEdit"))
    .Columns(columns =>
    {
        columns.Bound(x => x.SubmissionType).GetColumnFormat(ColumnTypeEnum.String, false, "# if (SubmissionType == " + Convert.ToInt32(StatusDetail.Approved).ToString() + ") { #" +
"<div style='text-align:center;' class='k-widget k-notification k-notification-success'><i class='fa  fa-check'></i></div>" +
"# } else if (SubmissionType == " + Convert.ToInt32(StatusDetail.Rejected).ToString() + "){ #" +
"<div style='text-align:center;' class='k-widget k-notification k-notification-error'><i class='fa fa-times' ></i></div>" +
"# } else if (SubmissionType == " + Convert.ToInt32(StatusDetail.HeldLocal).ToString() + "){ #" +
"<div style='text-align:center;' class='k-widget k-notification k-notification-warning'><i class='fa fa-pencil'></i></div>" +
"# }#", "");
        columns.Bound(x => x.Enabled).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox'  class='chkbx' #= (Enabled) ? checked ='checked' : '' #/>", "");
        columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound(x => x.IssueId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Quantity).GetColumnFormat(ColumnTypeEnum.String, false,"", "");
        columns.Bound(x => x.Operator).GetColumnFormat(ColumnTypeEnum.String, false, "", "_MemoSegOperatorDropdown");
        columns.Bound(x => x.SubmissionType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.MemoInfo).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
    })
    .DataSource(read => read.Ajax()
        .Aggregates(agg =>
        {
            agg.Add(x => x.Quantity).Sum();
        })
        .ServerOperation(false)
        .AutoSync(true)
        .Update(update => update.Action("MemoSegModel_Update", "ContractRelated", new { area = "DomesticTrading" }))              
        .Model(model =>
        {
            model.Id(x => x.ModelId);
            model.Field(x => x.Enabled).Editable(false);
            model.Field(x => x.IssueId).Editable(false);
            model.Field(x => x.SecurityNumber).Editable(false);
            model.Field(x => x.Ticker).Editable(false);
            model.Field(x => x.Quantity).Editable(true);
            model.Field(x => x.Operator).Editable(true);
            model.Field(x => x.SubmissionType).Editable(false);
            model.Field(x => x.MemoInfo).Editable(false);
        }))
        )
    </div>
}
