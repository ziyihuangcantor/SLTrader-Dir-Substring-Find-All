@using System.ComponentModel
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Enums
@using SLTrader.Tools
@using SLTrader.Models
@using BondFire.Entities.Projections
@using SLTrader.Models.ContractRelatedModels

@model IEnumerable<RateChangeModel>

<style scoped>
    #ContractRateGrid {
        border-collapse: collapse;
        margin: 0;
    }

    #RateSingleChangeDiv td,
    #RateSingleChangeDiv th {
        min-height:50px;
        padding: 5px 0px 0px 5px;
    }

    #ProgressSingleLabel {        
        width: 100%;
        font-style: normal;
        white-space: pre-wrap;
        border: 1px solid #ccc;
        height: 50px;        
    }
</style>

<script type="text/javascript">
    $(document).ready(function () {
        setTimeout(function () {
            if (@Model.Count() > 1) {
                resizeGridColumns("#ContractRateGrid");
            }

            $('#LocalDetailWindow').data("kendoWindow").center();
        }, 5);
    });

    function getFormData($form) {
        var unindexed_array = $form.serializeArray();
        var indexed_array = {};

        $.map(unindexed_array, function (n, i) {
            indexed_array[n['name']] = n['value'];
        });

        indexed_array['Enabled'] = "true";

        return indexed_array;
    }

    $(function() {
        $('#ContractRateGrid').on('click', '.chkbx', function() {
            var checked = $(this).is(':checked');
            var grid = $('#ContractRateGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));
            grid.select($(this).closest('tr'));

            var entityGrid = $("#ContractRateGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            if (selectedItem.SubmissionType != '@Convert.ToInt32(StatusDetail.Approved)') {
                dataItem['Enabled'] = checked;
            }

            var grid = $("#ContractRateGrid").data("kendoGrid");
            var data = grid.dataSource.data();

            $("#RateChangeButton").data("kendoButton").enable(false);
            $("#BulkApplyButton").data("kendoButton").enable(false);

            $.each(data, function (i, row) {
                if (row.Enabled) {
                    $("#RateChangeButton").data("kendoButton").enable(true);
                    $("#BulkApplyButton").data("kendoButton").enable(true);
                }
            });
        });
    });


    $(function () {
        $('#ContractRateGrid').on('click', '.HouseRate', function () {
            var checked = $(this).is(':checked');
            var grid = $('#ContractRateGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));
            grid.select($(this).closest('tr'));

            var entityGrid = $("#ContractRateGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            if (selectedItem.SubmissionType != '@Convert.ToInt32(StatusDetail.Approved)') {
                dataItem['NewUseHouseRate'] = checked;
                dataItem['Enabled'] = checked;
                dataItem['SubmissionType'] = '@StatusDetail.HeldLocal';
            }

            var grid = $("#ContractRateGrid").data("kendoGrid");
            var data = grid.dataSource.data();

            $("#RateChangeButton").data("kendoButton").enable(false);
            $("#BulkApplyButton").data("kendoButton").enable(false);

            $.each(data, function (i, row) {
                if (row.Enabled) {
                    $("#RateChangeButton").data("kendoButton").enable(true);
                    $("#BulkApplyButton").data("kendoButton").enable(true);
                }
            });
        });
    });

    function onContractRateEdit(e) {
        var input = e.container.find("input");

        var entityGrid = $("#ContractRateGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        if (selectedItem.SubmissionType == '@Convert.ToInt32(StatusDetail.Approved)') {
            $('#ContractRateGrid').data("kendoGrid").closeCell();
        }
        else {
            var input = e.container.find("input");
            setTimeout(function () { input.select(); });
        }
    }

    function onInputEdit(e) {
        var input = e.container.find("input");
        setTimeout(function () { input.select(); });
    }

    $(document).bind('keydown', 'alt+s', function (e) {
        if (e.altKey && (e.which == 83)) {

            e.preventDefault();
            onRateChange();
            return false;
        }
    });

    $(document).bind('keydown', 'alt+e', function (e) {
        if (e.altKey && (e.which == 69)) {
            e.preventDefault();
            onRateSelectAll();
            return false;
        }
    });

    $(document).bind('keydown', 'alt+b', function (e) {
        if (e.altKey && (e.which == 66)) {
            e.preventDefault();
            onBulkRateApply();
            return false;
        }
    });

    function onBulkRateApply() {
        var grid = $("#ContractRateGrid").data("kendoGrid");

        var dataSource = $("#ContractRateGrid").data("kendoGrid").dataSource;
        var data = dataSource.data();

        var rate = $("#RateApplyBox").data("kendoNumericTextBox").value();

        var rowCount = 0;
        var processedRowCount = 0;

        $("#RateChangeButton").data("kendoButton").enable(false);
        $("#BulkApplyButton").data("kendoButton").enable(false);

        var grid = $('#ContractRateGrid').data('kendoGrid');
        var rows = grid.dataSource.data();

        $.each(rows, function (i, row) {
            if (row.Enabled) {
                rowCount++;
            }
        });

        $('#ProgressLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing ' + rowCount + ' items.');


        if (rate == null) {
            return;
        }

        var totalNumber = dataSource.total();

        try {
            for (var i = 0; i < totalNumber; i++) {
                var currentDataItem = data[i];

                if (currentDataItem.Enabled == 1) {
                  currentDataItem.set('Enabled', true);
                  currentDataItem.set('NewRate', rate);
                  currentDataItem.set('SubmissionType', '@StatusDetail.HeldLocal');
                }
            }

            var _grid = $("#ContractRateGrid").data("kendoGrid");
            var _data = _grid.dataSource.data();

            $("#RateChangeButton").data("kendoButton").enable(false);
            $("#BulkApplyButton").data("kendoButton").enable(false);


            $.each(_data, function (i, row) {
                if (row.Enabled) {
                    $("#RateChangeButton").data("kendoButton").enable(true);
                    $("#BulkApplyButton").data("kendoButton").enable(true);

                    processedRowCount++;
                }
            });

            $('#ProgressLabel').html('Processed ' + processedRowCount + ' out of ' + rowCount + ' items.');
        }
        catch (e) {
            console.log(e.message);
        }
        $("#RateChangeButton").data("kendoButton").enable(true);
        $("#BulkApplyButton").data("kendoButton").enable(true);
    }


    function onSelectAllRate() {
        var grid = $('#ContractRateGrid').data('kendoGrid');
        var rows = grid.dataSource.data();
        var processedRowCount = 0;


        $("#RateChangeButton").data("kendoButton").enable(false);
        $("#BulkApplyButton").data("kendoButton").enable(false);

        $('#ProgressLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing items...');

        for (var index = 0; index < rows.length; index++) {
            grid.dataSource.data()[index].Enabled = true;

            processedRowCount = processedRowCount + 1;
        }

        grid.dataSource.sync();


        $("#RateChangeButton").data("kendoButton").enable(true);
        $("#BulkApplyButton").data("kendoButton").enable(true);

        $('#ProgressLabel').html('Selected ' + processedRowCount + ' items.');
    }

    function onProcessRatesChangesByPassNo()
    {
        $('#RateChangeYesButton').hide();
        $('#RateChangeNoButton').hide();
        $('#ProgressLabel').html('');

        var _grid = $("#ContractRateGrid").data("kendoGrid");
        var _data = _grid.dataSource.data();

        $("#RateChangeButton").data("kendoButton").enable(false);
        $("#BulkApplyButton").data("kendoButton").enable(false);

        $.each(_data, function (i, row) {
            if (row.Enabled) {
                $("#RateChangeButton").data("kendoButton").enable(true);
                $("#BulkApplyButton").data("kendoButton").enable(true);
                $("#SelectAllButton").data("kendoButton").enable(true);
                processedRowCount++;
            }
        });
    }

    function onProcessRatesChangesByPass()
    {
        $('#RateChangeYesButton').hide();
        $('#RateChangeNoButton').hide();
        $('#ProgressLabel').html('');

        var grid = $('#ContractRateGrid').data('kendoGrid');
        var rows = grid.dataSource.data();

        var rowCount = 0;
        var processedRowCount = 0;
        var zeroRowCount = 0;

        $("#RateChangeButton").data("kendoButton").enable(false);
        $("#BulkApplyButton").data("kendoButton").enable(false);
        $("#SelectAllButton").data("kendoButton").enable(false);


        $.each(rows, function (i, row) {
            if (row.Enabled) {
                rowCount++;
            }

            if (row.NewRate == 0)
            {
                zeroRowCount++;
            }
        });

        $('#ProgressLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing ' + rowCount + ' items.');
        $("#RateChangeButton").data("kendoButton").enable(false);

        $.ajax({
            url: "@Url.Action("ProcessRateChanges", "ContractRelated")",
            type: 'POST',
        contentType: 'application/json;',
        data: JSON.stringify(rows),
        success: function(valid) {
            $.each(valid, function(i, obj) {
                var effectiveDate = kendo.parseDate(obj['EffectiveDate']);

                obj['EffectiveDate'] = effectiveDate;
            });

            grid.dataSource.data(valid);
            grid.refresh();

            var _grid = $("#ContractRateGrid").data("kendoGrid");
            var _data = _grid.dataSource.data();

            $("#RateChangeButton").data("kendoButton").enable(false);
            $("#BulkApplyButton").data("kendoButton").enable(false);

            $.each(_data, function (i, row) {
                if (row.Enabled) {
                    $("#RateChangeButton").data("kendoButton").enable(true);
                    $("#BulkApplyButton").data("kendoButton").enable(true);
                    $("#SelectAllButton").data("kendoButton").enable(true);
                    processedRowCount++;
                }
            });

            $('#ProgressLabel').html('Processed ' + processedRowCount + ' out of ' + rowCount + ' items.');


            $("#RateChangeButton").data("kendoButton").enable(true);
          

            if (processedRowCount == rowCount) {
                $('#LocalDetailWindow').data("kendoWindow").close();
            }

        },
        error: function(valid) {
            $('#ProgressLabel').html('<i class="fa fa-times"></i> Error Processing!');
            $("#RateChangeButton").data("kendoButton").enable(true);
        }
    });
    }

    function onRateChange() {
        var grid = $('#ContractRateGrid').data('kendoGrid');
        var rows = grid.dataSource.data();

        var rowCount = 0;
        var processedRowCount = 0;
        var zeroRowCount = 0;

        $("#RateChangeButton").data("kendoButton").enable(false);
        $("#BulkApplyButton").data("kendoButton").enable(false);
        $("#SelectAllButton").data("kendoButton").enable(false);

        $.each(rows, function (i, row) {
            if (row.Enabled) {
                rowCount++;
                if (row.NewRate == 0) {                    
                    zeroRowCount++;
                }
            }
        });

        if (zeroRowCount > 0)
        {
            $('#ProgressLabel').html('There are ' + zeroRowCount + ' contracts with zero rate, confirm? ');
            $('#RateChangeYesButton').show();
            $('#RateChangeNoButton').show();
            return;
        }

        $('#ProgressLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing ' + rowCount + ' items.');
        $("#RateChangeButton").data("kendoButton").enable(false);

        $.ajax({
            url: "@Url.Action("ProcessRateChanges", "ContractRelated")",
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify(rows),
            success: function (valid) {
                $.each(valid, function(i, obj) {
                    var effectiveDate = kendo.parseDate(obj['EffectiveDate']);

                    obj['EffectiveDate'] = effectiveDate;
                });

                grid.dataSource.data(valid);
                grid.refresh();

                var _grid = $("#ContractRateGrid").data("kendoGrid");
                var _data = _grid.dataSource.data();

                $("#RateChangeButton").data("kendoButton").enable(false);
                $("#BulkApplyButton").data("kendoButton").enable(false);

                $.each(_data, function (i, row) {
                    if (row.Enabled) {
                        $("#RateChangeButton").data("kendoButton").enable(true);
                        $("#BulkApplyButton").data("kendoButton").enable(true);
                        $("#SelectAllButton").data("kendoButton").enable(true);
                        processedRowCount++;
                    }
                });

                $('#ProgressLabel').html('Processed ' + processedRowCount + ' out of ' + rowCount + ' items.');

                $("#RateChangeButton").data("kendoButton").enable(true);


                if (processedRowCount == rowCount) {
                    $('#LocalDetailWindow').data("kendoWindow").close();
                }
            },
            error: function(valid) {
                LogError(valid);
                $('#ProgressLabel').html('<i class="fa fa-times"></i> Error Processing!');
                $("#RateChangeButton").data("kendoButton").enable(true);
            }
        });
    }

    function onContractRateChangeDataBound(e) {
        try {
            var grid = $("#ContractRateGrid").data("kendoGrid");
            var data = grid.dataSource.data();
            var dataSource = grid.dataSource;

            $("#RateChangeButton").data("kendoButton").enable(false);
            $("#BulkApplyButton").data("kendoButton").enable(false);

            $.each(data, function (i, row) {
                if (row.Enabled) {
                    $("#RateChangeButton").data("kendoButton").enable(true);
                    $("#BulkApplyButton").data("kendoButton").enable(true);
                    $("#SelectAllButton").data("kendoButton").enable(true);
                }
            });

            $('#ProgressLabel').html('Loaded ' + dataSource.data().length + ' rate changes.');
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onProcessSingleRateChange() {
        var form = $("#my-form");
        var formJSON = getFormData(form);


        $('#ProgressSingleLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing 1 item.');
        $('#SendSingleRateChangeButton').data("kendoButton").enable(false);

        $.ajax({
            url: "@Url.Action("ProcessRateChanges", "ContractRelated")",
            type: 'POST',
            contentType: 'application/json;',
            data: '[' + JSON.stringify(formJSON) + ']',
            success: function (valid) {
                var closeWindow = true;

                try {
                    $.each(valid, function (i, obj) {
                        if (obj["SubmissionType"] == '@Convert.ToInt32(StatusDetail.Rejected)') {
                            $('#ProgressSingleLabel').html('<i class="fa fa-times"></i> ' + obj["MemoInfo"]);
                            closeWindow = false;
                        }
                    });
                }
                catch(e) {
                
                }

                if (closeWindow) {
                    $('#SendSingleRateChangeButton').data("kendoButton").enable(true);
                    $('#LocalDetailWindow').data("kendoWindow").close();
                }
            },
            error: function (valid) {
                $('#ProgressSingleLabel').html('<i class="fa fa-times"></i> Error Processing!');
            }
        });
    }

    function getFormData($form) {
        var unindexed_array = $form.serializeArray();
        var indexed_array = {};

        $.map(unindexed_array, function (n, i) {
            indexed_array[n['name']] = n['value'];
        });

        indexed_array['Enabled'] = "true";

        return indexed_array;
    }


    $('#NewRateNumericTextBox').on('focus', function () {
        var input = $(this);
        setTimeout(function () { input.select(); });
    });

    function onRateChangeRequestEnd(e) {
        e.preventDefault();

        resizeGridColumns("#ContractRateGrid");
    }

    function calculateNewIncome() {
        var amount = $("#AmountNumericBox").data("kendoNumericTextBox").value();
        var newRate = $("#NewRateNumericTextBox").data("kendoNumericTextBox").value();
        var newIncome = (amount * newRate / 100) / 360;

        if (newRate < 0) {
            $("#NewRateCodeTextBox").val('N');
        }
        else {
            $("#NewRateCodeTextBox").val('');
        }

        if ('@((Model.Any()) ? Model.First().TradeType.GetParDirection() : -1)' == '1') {

            newIncome = newIncome;
        }
        else {
            newIncome = newIncome * -1;
        }

        $("#NewIncomeNumericBox").data("kendoNumericTextBox").value(newIncome);
    }
</script>

@if (!Model.Any())
{
    <div style="padding:20px;font-size:small;">
        <h2>No Data Selected / Processed</h2>
    </div>
}
else if (Model.Count() == 1)
{
    using (Html.BeginForm("Action", "ControllerName", FormMethod.Post, new { id = "my-form" }))
    {
        <table id="RateSingleChangeDiv">
            <tr>
                <td>@LabelHelper.Label("ClearingId")</td>
                <td>@Html.Kendo().TextBoxFor(x => x.First().ClearingId).HtmlAttributes(new { @readonly = "readonly", style = "width:75px;" }) </td>
            </tr>
            <tr>
                <td>@LabelHelper.Label("ContraEntity")</td>
                <td>@Html.Kendo().TextBoxFor(x => x.First().ContraEntity).HtmlAttributes(new { @readonly = "readonly", style= "width:75px;" })</td>           
                <td style="display:none">@Html.Kendo().CheckBoxFor(x => x.First().Enabled).HtmlAttributes(new { ID = "EnabledCheckBox" }).Checked(true).Label(LabelHelper.Text("Enabled"))</td>     
            </tr>
            <tr>
                <td>@LabelHelper.Label("SecurityNumber")</td>
                <td>@Html.Kendo().TextBoxFor(x => x.First().SecurityNumber).HtmlAttributes(new { @readonly = "readonly", style = "width:75px;" }) @Html.Kendo().TextBoxFor(x => x.First().Ticker).HtmlAttributes(new { @readonly = "readonly", style = "width:75px;" })</td>
            </tr>
            <tr>
                <td>@LabelHelper.Label("StartDate")</td>
                <td>@Html.Kendo().DatePickerFor(x => x.First().EffectiveDate).HtmlAttributes(new { style = "width:85px;" })</td>
            </tr>
            <tr>
                <td>@LabelHelper.Label("Quantity")</td>
                <td>@Html.Kendo().NumericTextBoxFor(x => x.First().Quantity).Format("n0").HtmlAttributes(new { @readonly = "readonly", style = "width:75px;" }).Spinners(false)</td>
            </tr>
            <tr>
                <td>@LabelHelper.Label("Amount")</td>
                <td>@Html.Kendo().NumericTextBoxFor(x => x.First().Amount).Format("c2").HtmlAttributes(new { ID = "AmountNumericBox" , @readonly = "readonly", style = "width:75px;" }).Spinners(false)</td>
            </tr>
            <tr>
                <td>@LabelHelper.Label("ContraRateSwing")</td>
                <td>@Html.Kendo().CheckBoxFor(x => x.First().ContraRateSwing)</td>
            </tr>
            <tr style="align-items:center">
                <td>@LabelHelper.Label("OldRate")</td>
                <td>@Html.Kendo().NumericTextBoxFor(x => x.First().OldRate).HtmlAttributes(new { @readonly = "readonly", style = "width:75px;" }).Format("n4").Decimals(4).Spinners(false) @Html.Kendo().TextBoxFor(x => x.First().OldRateCode).HtmlAttributes(new { @readonly = "readonly", style = "width:50px;" })</td>                
                <td style="display:none">@Html.Kendo().CheckBoxFor(x => x.First().OldUseHouseRate).HtmlAttributes(new { @readonly = "readonly" }).Label(LabelHelper.Text("HouseRate")).Enable(false)</td>
                <td>@Html.Kendo().NumericTextBoxFor(x => x.First().OldIncomeAmount).Format("c2").HtmlAttributes(new { @readonly = "readonly", style = "width:75px;" }).Format("c2").Spinners(false)</td>
            </tr>
            <tr style="align-items:center">
                <td>@LabelHelper.Label("NewRate")</td>
                <td>@Html.Kendo().NumericTextBoxFor(x => x.First().NewRate).HtmlAttributes(new { ID = "NewRateNumericTextBox", style = "width:75px;" }).Events(ev => ev.Change("calculateNewIncome")).Format("n4").Decimals(4).Max(999).Min(-999).Spinners(false) @Html.Kendo().TextBoxFor(x => x.First().NewRateCode).HtmlAttributes(new { @readonly = "readonly", ID = "NewRateCodeTextBox", style = "width:50px;" }) </td>
                <td style="display:none">@Html.Kendo().CheckBoxFor(x => x.First().NewUseHouseRate).Label(LabelHelper.Text("UseHouseRate")).HtmlAttributes(new { ID = "NewUseHouseRateCheckBox" }) </td>
                <td>@Html.Kendo().NumericTextBoxFor(x => x.First().NewIncomeAmount).Format("c2").HtmlAttributes(new { ID = "NewIncomeNumericBox", @readonly = "readonly", style = "width:75px;" }).Format("c2").Spinners(false)</td>
            </tr>
            <tr>
                <td colspan="4" align="left">
                    <label id='ProgressSingleLabel'></label>
                </td>
            </tr>
            <tr>
                <td colspan="5" align="right">
                    @Html.Kendo().Button().Name("SendSingleRateChangeButton").Content(LabelHelper.Text("SendSingleRateChange")).Events(e => e.Click("onProcessSingleRateChange"))                                       
                </td>
            </tr>
        </table>

    @Html.HiddenFor(x => x.First().ModelId)
    @Html.HiddenFor(x => x.First().Enabled)
    @Html.HiddenFor(x => x.First().ContraRateSwing)
    @Html.HiddenFor(x => x.First().Entity)
    @Html.HiddenFor(x => x.First().ContraEntity)
    @Html.HiddenFor(x => x.First().ContractNumber)
    @Html.HiddenFor(x => x.First().TradeType)
    @Html.HiddenFor(x => x.First().IssueId)
    @Html.HiddenFor(x => x.First().SecurityNumber)
    @Html.HiddenFor(x => x.First().Isin)
    @Html.HiddenFor(x => x.First().Sedol)
    @Html.HiddenFor(x => x.First().Ticker)
    @Html.HiddenFor(x => x.First().Quantity)
    @Html.HiddenFor(x => x.First().Amount)
    @Html.HiddenFor(x => x.First().OldRate)
    @Html.HiddenFor(x => x.First().OldRateCode)
    @Html.HiddenFor(x => x.First().OldIncomeAmount)
    @Html.HiddenFor(x => x.First().OldUseHouseRate)
    @Html.HiddenFor(x => x.First().SubmissionType)
    @Html.HiddenFor(x => x.First().ExecutingSystem)
    @Html.HiddenFor(x => x.First().MemoInfo)
                }
}
else
{
    <div>
    @(
    Html.Kendo().ToolBar()
    .Name( "SharedRateToolBar" )
    .Items( items =>
    {
        items.Add().Template(LabelHelper.Label("BulkRateChangeIdLbl").ToHtmlString());
        items.Add().Template(Html.Kendo().NumericTextBox().Name("RateApplyBox").Format("#,##0.0000").Decimals(4).Max(999).Min(-999).ToHtmlString());
        items.Add().Template(Html.Kendo().Button().Name("BulkApplyButton").Content("Apply Rate").Events(e => e.Click("onBulkRateApply")).Enable(false).ToHtmlString());
        items.Add().Template(Html.Kendo().Button().Name("SelectAllButton").Content("Select All").Events(e => e.Click("onSelectAllRate")).Enable(true).ToHtmlString());
        items.Add().Template(Html.Kendo().Button().Name("RateChangeButton").Content("Send Rates").Events(e => e.Click("onRateChange")).Enable(false).ToHtmlString());
        items.Add().Template("<label id='ProgressLabel'></label>");

        items.Add().Template(Html.Kendo().Button().Name("RateChangeYesButton").HtmlAttributes(new { style = "display:none" }).Content("Yes").Events(e => e.Click("onProcessRatesChangesByPass")).Enable(true).ToHtmlString());
        items.Add().Template(Html.Kendo().Button().Name("RateChangeNoButton").HtmlAttributes(new { style = "display:none" }).Content("No").Events(e => e.Click("onProcessRatesChangesByPassNo")).Enable(true).ToHtmlString());
    }))
                                <hr class="hr-white">
        @(Html.Kendo().Grid( Model )
    .Name( "ContractRateGrid" )
    .HtmlAttributes( new { @class = "grid" } )
    .Scrollable(vscroll => vscroll.Virtual(true))
    .Selectable()
    .Filterable()
    .Pageable(pagable =>
    {
        pagable.Numeric(false);
        pagable.PreviousNext(false);
        pagable.Messages(config =>
        {
            config.Display("Showing {2} rate change(s)");
        });
    })
    .Resizable( cols => cols.Columns( bool.Parse( DataSystemValues.LoadSystemValue( "ResizeableGrid", "true" ) ) ) )
    .Editable( editable => editable.Mode( GridEditMode.InCell ) )
    .Events( e => e.Edit( "onContractRateEdit" ).DataBound( "onContractRateChangeDataBound" ) )
    .Columns( columns =>
    {
        columns.Bound(x => x.SubmissionType).GetColumnFormat(ColumnTypeEnum.String, false, "# if (SubmissionType == " + Convert.ToInt32(StatusDetail.Approved).ToString() + ") { #" +
                        "<div style='text-align:center;' class='k-widget k-notification k-notification-success'><i class='fa  fa-check'></i></div>" +
                        "# } else if (SubmissionType == " + Convert.ToInt32(StatusDetail.Rejected).ToString() + "){ #" +
                        "<div style='text-align:center;' class='k-widget k-notification k-notification-error'><i class='fa fa-times' ></i></div>" +
                        "# } else if (SubmissionType == " + Convert.ToInt32(StatusDetail.HeldLocal).ToString() + "){ #" +
                        "<div style='text-align:center;' class='k-widget k-notification k-notification-warning'><i class='fa fa-pencil'></i></i></div>" +
                        "# }#", "");
        columns.Bound(x => x.ExecutingSystem).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound(x => x.ModelId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound(x => x.Enabled).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox'  class='chkbx' #= (Enabled) ? checked ='checked' : '' #/>", "");
        columns.Bound(x => x.Entity).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound(x => x.ClearingId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.ContraEntity).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.ContractNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.TradeType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Isin).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Sedol).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Quantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(Quantity)#", "");
        columns.Bound(x => x.Amount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(Amount)#", "");
        columns.Bound(x => x.EffectiveDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
        columns.Bound(x => x.ContraRateSwing).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox' value='#= ContraRateSwing #' " + "# if (ContraRateSwing) { #" + "checked='checked'" + "# } #" + "/>", "").Hidden(true);
        columns.Bound(x => x.OldRate).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(OldRate)#", "");
        columns.Bound(x => x.OldRateCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound(x => x.OldUseHouseRate).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox' value='#= OldUseHouseRate #' " + "# if (OldUseHouseRate) { #" + "checked='checked'" + "# } #" + "/>", "").Hidden(true);
        columns.Bound(x => x.OldIncomeAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(OldIncomeAmount)#", "").Hidden(true);
        columns.Bound(x => x.SecurityLoc).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound(x => x.CashLoc).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound(x => x.NewRate).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(NewRate)#", "RebateRateDecimalNumber");
        columns.Bound(x => x.NewRateCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound(x => x.NewUseHouseRate).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox'  class='HouseRate' #= (NewUseHouseRate) ? checked ='checked' : '' #/>", "").Hidden(true);
        columns.Bound(x => x.NewIncomeAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(NewIncomeAmount)#", "");
        columns.Bound(x => x.SubmissionType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.MemoInfo).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
    } )
    .DataSource( read => read.Ajax()
        .Aggregates( agg =>
        {
            agg.Add( x => x.Quantity ).Sum();
            agg.Add( x => x.Amount ).Sum();
            agg.Add( x => x.OldIncomeAmount ).Sum();
            agg.Add( x => x.NewIncomeAmount ).Sum();
        } )
        .ServerOperation( false )
        .PageSize(30)
        .AutoSync(true)
        .Destroy( destroy => destroy.Action( "RateChangeModel_Destroy", "ContractRelated", new { area = "DomesticTrading" } ) )
        .Update( update => update.Action( "RateChangeModel_Update", "ContractRelated", new { area = "DomesticTrading" } ) )
        .Model( model =>
        {
            model.Id( x => x.ModelId );
            model.Field( x => x.ModelId ).Editable( false );
            model.Field( x => x.Enabled ).Editable( false );
            model.Field( x => x.Entity ).Editable( false );
            model.Field(x => x.ClearingId).Editable(false);
            model.Field( x => x.ContraEntity ).Editable( false );
            model.Field( x => x.ContractNumber ).Editable( false );
            model.Field( x => x.TradeType ).Editable( false );
            model.Field( x => x.SecurityNumber ).Editable( false );
            model.Field( x => x.Ticker ).Editable( false );
            model.Field( x => x.Quantity ).Editable( false );
            model.Field( x => x.Amount ).Editable( false );
            model.Field(x => x.ContraRateSwing).Editable(false);
            model.Field( x => x.OldRate ).Editable( false );
            model.Field( x => x.OldRateCode ).Editable( false );
            model.Field( x => x.OldUseHouseRate ).Editable( false );
            model.Field( x => x.OldIncomeAmount ).Editable( false );
            model.Field( x => x.NewRate ).Editable( true );
            model.Field( x => x.NewRateCode ).Editable( false );
            model.Field( x => x.NewUseHouseRate ).Editable( false );
            model.Field( x => x.NewIncomeAmount ).Editable( false );
            model.Field( x => x.SubmissionType ).Editable( false );
            model.Field( x => x.MemoInfo ).Editable( false );
            model.Field(x => x.SecurityLoc).Editable(false);
            model.Field(x => x.CashLoc).Editable(false);
        } ) )
        )
    </div>
}