@using System.ComponentModel
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Enums
@using SLTrader.Tools
@using SLTrader.Models
@using BondFire.Entities.Projections
@using SLTrader.Models.ContractRelatedModels


@model IEnumerable<RateChangeModel>

<style scoped>
    #BulkRateChangeToolBar .k-checkbox-label {
        padding-left: 20px;
    }   

    #BulkRateChangeSplitter {
        height: 85%;
        width: 100%;
    }

    #BulkRateChangeListTextBox {
        width: 100%;
        height: 100%;
    }

    #BoxCalculationBulkRateChangeGrid {
        width: 100%;
        height: 95%;
    }

    #BulkRateChangeDiv {
        height: 85%;
        width: 100%;
    }


    #BulkRateChangeToolBar td {
        margin: 0px;
        padding: 0px;
        padding-left:5px;
    }

    #BulkRateChangeToolBar {        
        margin-top: 10px;
    }
</style>


<script type="text/javascript">
    var _originalBulkRateChange = null;

    $(document).ready(function () {
        setTimeout(function () {
            _originalBulkRateChange = $("#BoxCalculationBulkRateChangeGrid").data('kendoGrid').getOptions();

            LoadGridLayout("#BoxCalculationBulkRateChangeGrid");
        }, 5);

        var clientBulkRateChangeCopyButton = new ZeroClipboard(document.getElementById("BulkRateChangeCopyButton"));

        clientBulkRateChangeCopyButton.on("ready", function (readyEvent) {
            clientBulkRateChangeCopyButton.on("copy", function (event) {
                var data = KendoGridToText("#BoxCalculationBulkRateChangeGrid", "BoxCalculationBulkRateChangeGrid", false);
                clientBulkRateChangeCopyButton.setText(data);
            });
        });
    });


    function onError(e) {
        console.log(e);
    }

    function onSharedBulkRateChangeEdit(e) {       
        var entityGrid = $("#BoxCalculationBulkRateChangeGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        if (selectedItem.SubmissionType == '@Convert.ToInt32(StatusDetail.Approved)') {
            $('#BoxCalculationBulkRateChangeGrid').data("kendoGrid").closeCell();
        }
        else {
            var input = e.container.find("input");
            setTimeout(function () { input.select(); });
        }
    }

    $(function() {
        $('#BoxCalculationBulkRateChangeGrid').on('click', '.chkbx', function() {
            var checked = $(this).is(':checked');
            var grid = $('#BoxCalculationBulkRateChangeGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));
            grid.select($(this).closest('tr'));

            var entityGrid = $("#BoxCalculationBulkRateChangeGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            if (selectedItem.SubmissionType != '@Convert.ToInt32(StatusDetail.Approved)') {
                dataItem['Enabled'] = checked;
            }

            var data = grid.dataSource.data();
            
            $("#BulkRateChangeAllButton").data("kendoButton").enable(false);

            $.each(data, function (i, row) {
                if (row.Enabled) {                    
                    $("#BulkRateChangeAllButton").data("kendoButton").enable(true);
                }
            });
        });
    });

    $(document).bind('keydown', 'alt+s', function (e) {
        if (e.altkey && (e.which == 83)) {

            e.preventDefault();
            onProcessBulkRateChange();
            return false;
        }
    });

    $(document).bind('keydown', 'alt+e', function (e) {
        if (e.altkey && (e.which == 69)) {
            e.preventDefault();
            onSelectAll();
            return false;
        }
    });


    function onBulkRateChangeSearchType() {
        $("#ParseBulkRateChangeList").data("kendoButton").enable(false);
        $("#BulkRateChangeSearchTypeButton").data("kendoButton").enable(false);

        var grid = $('#BoxCalculationBulkRateChangeGrid').data('kendoGrid');
        var entityId = $("#BulkRateChangeEntityDropdownList").data("kendoDropDownList").value();
        var columnEnum = $("#BulkRateChangeSearchTypeDropdownList").data("kendoDropDownList").value();
        var searchCriteriaVal = $('#BulkRateChangeSearchTypeTextBox').val();
        var contraEntityId = $("#BulkRateChangeContraEntityCheckBox").is(':checked') ? $("#BulkRateChangeContraEntityDropdownList").data("kendoAutoComplete").value() : "";
        var tradeType = $("#BulkRateChangeTradeTypeDropdownList").data("kendoDropDownList").value();
        var batchCodeOverride = $("#BulkRateChangeBatchCodeCheckBox").is(':checked') ? $("#BulkRateChangeBatchCodeTextBox").val() : ""
        var rateChangeDelta = $("#BulkRateChangeRateChangeDeltaCheckBox").is(':checked') ? $("#BulkRateChangeRateChangeDeltaNumericTextBox").data("kendoNumericTextBox").value() : null;
        var effectiveDate = $("#BulkRateChangeDateTimePicker").data("kendoDatePicker").value();
        var newRate = $("#BulkRateChangeNewRateChangeCheckBox").is(':checked') ? $("#BulkRateChangeNewRateChangeNumericTextBox").data("kendoNumericTextBox").value() : null;
        var newRateCode = $("#BulkRateChangeNewRateChangeCheckBox").is(':checked') ? $("#BulkRateChangeNewRateChangeCodeTextBox").val() : "";
        var operator = $("#BulkRateChangeSearchTypeOperatorDropdownList").data("kendoDropDownList").value();
        $('#ProgressLabel').html('<i class="fa fa-spinner fa-spin"></i> Searching list...');

        $.ajax({
            url: "@Url.Action("Load_RateChangeExpandedOptionsBySuggestionBySearchCriteria", "ContractRelated", new { area = "DomesticTrading" })",
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify({
                entityId: entityId,
                columnEnum: columnEnum,
                searchCriteria: searchCriteriaVal,
                tradeType: tradeType,
                batchCodeOverride: batchCodeOverride,
                rateChangeDelta: rateChangeDelta,
                effectiveDate: effectiveDate,
                newRate: newRate,
                newRateCode: newRateCode,
                operatorType: operator,
                contraEntity: contraEntityId
            }),
            success: function (valid) {
                var rowCount = 0;

                $.each(valid, function (i, obj) {
                    var effectiveDate = kendo.parseDate(obj['EffectiveDate']);                    
                    obj['EffectiveDate'] = effectiveDate;

                    rowCount++;
                });

                grid.dataSource.data(valid);
                grid.refresh();

                $('#ParseBulkRateChangeList').data('kendoButton').enable(true);     
                $("#BulkRateChangeSearchTypeButton").data("kendoButton").enable(true);

                $('#ProgressLabel').html('Processed ' + rowCount + ' items.');

                $('#BulkRateChangeApplyOptionsButton').data('kendoButton').enable(true);
            },
            error: function (valid) {
                $('#ProgressLabel').html('<i class="fa fa-times"></i> Error Processing!');
                $("#ParseBulkRateChangeList").data("kendoButton").enable(true);
            }
        });
    }

    function onBulkRateChangeEntityChange(e) {
        var company = $('#BulkRateChangeEntityDropdownList').data("kendoDropDownList").dataItem();

        $("#BulkRateChangeExecutingSystemDropdownList").data("kendoDropDownList").select(company.DefaultExecutionSystem);
    }

    function additionalBulkRateChangeExecutingSystem(e) {
        var executingSystem = $("#BulkRateChangeExecutingSystemDropdownList").data("kendoDropDownList").value();

        return {
            executingSystem: executingSystem
        }
    }

    function onSelectAllBulkRateChange() {
        var grid = $('#BoxCalculationBulkRateChangeGrid').data('kendoGrid');
        var rows = grid.dataSource.data();
        var processedRowCount = 0;

        $("#BulkRateChangeAllButton").data("kendoButton").enable(false);        
        $('#ProgressLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing items...');

        for (var index = 0; index < rows.length; index++) {
            grid.dataSource.data()[index].Enabled = true;
            processedRowCount = processedRowCount + 1;
        }

        grid.dataSource.sync();

        $('#ProgressLabel').html('Selected ' + processedRowCount + ' items.');

        $("#BulkRateChangeAllButton").data("kendoButton").enable(true);        
    }
 
    function getFormData($form) {
        var unindexed_array = $form.serializeArray();
        var indexed_array = {};

        $.map(unindexed_array, function (n, i) {
            indexed_array[n['name']] = n['value'];
        });

        indexed_array['IsPendingReturn'] = $("#IsPendingReturnCheckBox").is(':checked');

        return indexed_array;
    }

    function onProcessBulkRateChange() {
        var grid = $('#BoxCalculationBulkRateChangeGrid').data('kendoGrid');
        var rows = grid.dataSource.data();

        var rowCount = 0;
        var processedRowCount = 0;

        $("#BulkRateChangeAllButton").data("kendoButton").enable(false);        
        $("#BulkRateChangeSearchTypeButton").data("kendoButton").enable(false);

        $.each(rows, function (i, row) {
            if (row.Enabled && row.SubmissionType != '@Convert.ToInt32(StatusDetail.Approved)') {
                rowCount++;
            }
        });

        $('#ProgressLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing ' + rowCount + ' items.');

        $.ajax({
            url: "@Url.Action("ProcessRateChanges", "ContractRelated", new { area = "DomesticTrading" })",
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify(rows),
            success: function (valid) {
                $.each(valid, function (i, obj) {
                    var effectiveDate = kendo.parseDate(obj['EffectiveDate']);
                    obj['EffectiveDate'] = effectiveDate;

                    rowCount++;
                });

                grid.dataSource.data(valid);
                grid.refresh();

                var _grid = $("#BoxCalculationBulkRateChangeGrid").data("kendoGrid");
                var _data = _grid.dataSource.data();

                $("#BulkRateChangeAllButton").data("kendoButton").enable(false);                
                $("#BulkRateChangeSearchTypeButton").data("kendoButton").enable(true);
       
                $.each(_data, function (i, row) {
                    if (row.Enabled && row.SubmissionType == '@Convert.ToInt32(StatusDetail.Approved)') {
                        $("#BulkRateChangeAllButton").data("kendoButton").enable(true);                        

                        processedRowCount++;
                    }
                });

                $('#ProgressLabel').html('Processed ' + processedRowCount + ' out of ' + rowCount + ' items.');
                $('#BulkRateChangeApplyOptionsButton').data('kendoButton').enable(true);
                if (processedRowCount == rowCount) {
                    $('#LocalDetailWindow').data("kendoWindow").close();
                }
            },
            error: function(valid) {
                $('#ProgressLabel').html('<i class="fa fa-times"></i> Error Processing!');
                $("#BulkRateChangeAllButton").data("kendoButton").enable(true);
                $("#BulkRateChangeSearchTypeButton").data("kendoButton").enable(true);
            }
        });
    }

    function onProcessBulkRateChangeExpandedOptions() {
        var grid = $('#BoxCalculationBulkRateChangeGrid').data('kendoGrid');
        var rows = grid.dataSource.data();
        var batchCode = $('#BulkRateChangeBatchCodeTextBox').val();

        var rowCount = 0;
        var processedRowCount = 0;

        $("#BulkRateChangeAllButton").data("kendoButton").enable(false);

        var rateChangeDelta = $("#BulkRateChangeRateChangeDeltaCheckBox").is(':checked') ? $("#BulkRateChangeRateChangeDeltaNumericTextBox").data("kendoNumericTextBox").value() : null;
        var effectiveDate = $("#BulkRateChangeDateTimePicker").data("kendoDatePicker").value();
        var newRate = $("#BulkRateChangeNewRateChangeCheckBox").is(':checked') ? $("#BulkRateChangeNewRateChangeNumericTextBox").data("kendoNumericTextBox").value() : null;
        var newRateCode = $("#BulkRateChangeNewRateChangeCheckBox").is(':checked') ? $("#BulkRateChangeNewRateChangeCodeTextBox").val() : "";


        $.each(rows, function (i, row) {
            if (row.Enabled) {
                rowCount++;
            }
        });

        $('#ProgressLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing ' + rowCount + ' items.');


        $.ajax({
            url: "@Url.Action("ProcessRateChangeExpandedOptions", "ContractRelated", new { area = "DomesticTrading" })",
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify({
                modelList: rows,                
                rateChangeDelta: rateChangeDelta,
                effectiveDate: effectiveDate,
                newRate: newRate,
                newRateCode: newRateCode
            }),
            success: function (valid) {

                $.each(valid, function (i, obj) {
                    var effectiveDate = kendo.parseDate(obj['EffectiveDate']);
                                    
                    obj['EffectiveDate'] = effectiveDate;                    
                });

                grid.dataSource.data(valid);
                grid.refresh();

                var _grid = $("#BoxCalculationBulkRateChangeGrid").data("kendoGrid");
                var _data = _grid.dataSource.data();

                $("#BulkRateChangeAllButton").data("kendoButton").enable(false);                

                $.each(_data, function (i, row) {
                    if (row.Enabled) {
                        $("#BulkRateChangeAllButton").data("kendoButton").enable(true);                        

                        processedRowCount++;
                    }
                });

                $('#ProgressLabel').html('Processed ' + processedRowCount + ' out of ' + rowCount + ' items.');

                $('#BulkRateChangeApplyOptionsButton').data('kendoButton').enable(true);
            },
            error: function (valid) {
                LogError(valid);
                $('#ProgressLabel').html('<i class="fa fa-times"></i> Error Processing!');
                $("#BulkRateChangeAllButton").data("kendoButton").enable(true);
            }
        });
 
    }

    
    function onContractBulkRateChangeDataBound(e) {
        try {
            var grid = $("#BoxCalculationBulkRateChangeGrid").data("kendoGrid");
            var data = grid.dataSource.data();

            $("#BulkRateChangeAllButton").data("kendoButton").enable(false);            

            $.each(data, function (i, row) {
                if (row.Enabled) {
                    $("#BulkRateChangeAllButton").data("kendoButton").enable(true);                    
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    $('#ReturnQuantityTextBox').on('focus', function () {
        var input = $(this);
        setTimeout(function () { input.select(); });
    });

    $('#ReturnAmountTextBox').on('focus', function () {
        var input = $(this);
        setTimeout(function () { input.select(); });
    });

    $('#BulkRateChangeBatchCodeTextBox').on('focus', function () {
        var input = $(this);
        setTimeout(function () { input.select(); });
    });

    $('#ReturnQuantityTextBox').on('change', function () {
        QtyChange();
    });



    function QtyChange() {
        var price = $("#ReturnPriceTextBox").data("kendoNumericTextBox").value();
        var quantity = $("#ReturnQuantityTextBox").data("kendoNumericTextBox").value();

        var amount = quantity * price;
        $("#ReturnAmountTextBox").data("kendoNumericTextBox").value(amount);
    }

    function onBulkRateChangeDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    userPreference = valid;

                    var dropdownList = $('#BulkRateChangeEntityDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });
                },
                error: function (valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) { }
    }

    function BulkRateChangeResizeDropdown(e) {

        var autoComplete = $("#BulkRateChangeContraEntityDropdownList").data("kendoAutoComplete");
        autoComplete.list.width(200);
    }


    function additionalBulkRateChangeData() {
        var entityId = $("#BulkRateChangeEntityDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entityId,
        }
    }

    function onBulkRateChangeListParse(e) {

        $("#ParseBulkRateChangeList").data("kendoButton").enable(false);

        var grid = $('#BoxCalculationBulkRateChangeGrid').data('kendoGrid');
        var entityId = $("#BulkRateChangeEntityDropdownList").data("kendoDropDownList").value();
        var contraEntityId = $("#BulkRateChangeContraEntityCheckBox").is(':checked') ? $("#BulkRateChangeContraEntityDropdownList").data("kendoAutoComplete").value() : "";

        var tradeType = $("#BulkRateChangeTradeTypeDropdownList").data("kendoDropDownList").value();
        var batchCodeOverride = $("#BulkRateChangeBatchCodeCheckBox").is(':checked') ? $("#BulkRateChangeBatchCodeTextBox").val() : ""
        var rateChangeDelta = $("#BulkRateChangeRateChangeDeltaCheckBox").is(':checked') ? $("#BulkRateChangeRateChangeDeltaNumericTextBox").data("kendoNumericTextBox").value() : null;
        var effectiveDate = $("#BulkRateChangeDateTimePicker").data("kendoDatePicker").value();
        var newRate = $("#BulkRateChangeNewRateChangeCheckBox").is(':checked') ? $("#BulkRateChangeNewRateChangeNumericTextBox").data("kendoNumericTextBox").value() : null;
        var newRateCode = $("#BulkRateChangeNewRateChangeCheckBox").is(':checked') ? $("#BulkRateChangeNewRateChangeCodeTextBox").val() : "";

        var items = $('#BulkRateChangeListTextBox').val();

        $('#ProgressLabel').html('<i class="fa fa-spinner fa-spin"></i> Parsing list...');

        $.ajax({
            url: "@Url.Action("Load_BUlkRateChangeBySuggestionByContractEntityId", "ContractRelated", new { area = "DomesticTrading" })",
            type: 'POST',
        contentType: 'application/json;',
        data: JSON.stringify({
            entityId: entityId,
            list: items,
            contraEntityId: contraEntityId,
            tradeType: tradeType,
            batchCodeOverride: batchCodeOverride,
            rateChangeDelta: rateChangeDelta,
            effectiveDate: effectiveDate,
            newRate: newRate,
            newRateCode: newRateCode
        }),
        success: function (valid) {


            var rowCount = 0;

            $.each(valid, function (i, obj) {
                var effectiveDate = kendo.parseDate(obj['EffectiveDate']);                

                obj['EffectiveDate'] = effectiveDate;

                rowCount ++;
            });

            grid.dataSource.data(valid);
            grid.refresh();

            $("#ParseBulkRateChangeList").data("kendoButton").enable(true);

            $('#ProgressLabel').html('Processed ' + rowCount + ' items.');
            $('#BulkRateChangeApplyOptionsButton').data('kendoButton').enable(true);
        },
        error: function (valid) {
            $('#ProgressLabel').html('<i class="fa fa-times"></i> Error Processing!');
            $("#ParseBulkRateChangeList").data("kendoButton").enable(true);
        }
    });
    }

    function onMultipleContraCheckBoxChange(e) {
        if ($("#MultipleContraCheckBox").is(':checked')) {
            $("#BulkRateChangeContraEntityDropdownList").data("kendoAutoComplete").enable(false);
        }
        else
        {
            $("#BulkRateChangeContraEntityDropdownList").data("kendoAutoComplete").enable(true);
        }
    }

    function onBulkRateChangeExecutingSystemChange(e) {
        $("#BulkRateChangeTradeTypeDropdownList").data("kendoDropDownList").dataSource.read();

    }
    function onBulkRateChangeUnsortGrid(e) {
        UnsortGrid(e);
    }

    function onBulkRateChangeContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'Unsort':
                onBulkRateChangeUnsortGrid('#BoxCalculationBulkRateChangeGrid');
                break;

            case 'Check All':
                onSelectAllBulkRateChange();
                break;

            case 'Select All':
                onBulkRateChangeSelectAll(true);
                break;

            case "Reset Grid":
                ResetUserLayout("#BoxCalculationBulkRateChangeGrid");
                $("#BoxCalculationBulkRateChangeGrid").data('kendoGrid').setOptions(_originalBulkRateChange);
                break;

            case 'Export To Excel':
                exportToBulkRateChangeExcel();
                break;

            case 'AutoFit Columns':
                resizeGridColumns("#BoxCalculationBulkRateChangeGrid");
                break;
        }
    }

    function exportToBulkRateChangeExcel() {
        KendoGridToCSVConvertor("#BoxCalculationBulkRateChangeGrid", 'BoxCalculationBulkRateChangeGrid');
    }


    function onBulkRateChangeGridLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#BoxCalculationBulkRateChangeGrid");
        }, 5);
    }

    function onBulkRateChangeSelectAll(e) {
        try {
            var BulkRateChangeGrid = $("#BoxCalculationBulkRateChangeGrid").data("kendoGrid");
            BulkRateChangeGrid.select(BulkRateChangeGrid.tbody.find(">tr"));
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onBulkRateChangeTrash(e) {
        $("#BoxCalculationBulkRateChangeGrid").data("kendoGrid").dataSource.data([]);
    }


    $(document).ready(function () {
        $('#BulkRateChangeEntityCheckBox').change(function () {
            $("#BulkRateChangeEntityDropdownList").data("kendoDropDownList").enable($(this).is(':checked'));
        });

        $('#BulkRateChangeContraEntityCheckBox').change(function () {
            $("#BulkRateChangeContraEntityDropdownList").data("kendoAutoComplete").enable($(this).is(':checked'));
        });

        $('#BulkRateChangeEntityTypeCheckBox').change(function () {
            $("#BulkRateChangeEntityTypeDropdownList").data("kendoDropDownList").enable($(this).is(':checked'));
        });

        $('#BulkRateChangeExecutingSystemCheckBox').change(function () {
            $("#BulkRateChangeExecutingSystemDropdownList").data("kendoDropDownList").enable($(this).is(':checked'));
        });

        $('#BulkRateChangeTradeTypeCheckBox').change(function () {
            $("#BulkRateChangeTradeTypeDropdownList").data("kendoDropDownList").enable($(this).is(':checked'));
        });              

        $('#BulkRateChangeSearchTypeCheckBox').change(function () {
            $("#BulkRateChangeSearchTypeTextBox").prop("readonly", !$(this).is(':checked'));            
        });

        $('#BulkRateChangeRateChangeDeltaCheckBox').change(function () {
            $("#BulkRateChangeRateChangeDeltaNumericTextBox").data("kendoNumericTextBox").enable($(this).is(':checked'));

            if ($("#BulkRateChangeNewRateChangeCheckBox").is(':checked')) {
                $("#BulkRateChangeNewRateChangeCheckBox").attr('checked', false);
                $("#BulkRateChangeNewRateChangeNumericTextBox").data("kendoNumericTextBox").enable(!$(this).is(':checked'));
                $("#BulkRateChangeNewRateChangeCodeTextBox").prop("readonly", $(this).is(':checked'));
            }
        });

        $('#BulkRateChangeEffectiveDateCheckBox').change(function () {
            $("#BulkRateChangeDateTimePicker").data("kendoDatePicker").enable($(this).is(':checked'));     
        });

        $('#BulkRateChangeNewRateChangeCheckBox').change(function () {
            $("#BulkRateChangeNewRateChangeNumericTextBox").data("kendoNumericTextBox").enable($(this).is(':checked'));
            $("#BulkRateChangeNewRateChangeCodeTextBox").prop("readonly", !$(this).is(':checked'));    

            if ($("#BulkRateChangeRateChangeDeltaCheckBox").is(':checked')) {
                $("#BulkRateChangeRateChangeDeltaCheckBox").attr('checked', false);
                $("#BulkRateChangeDateTimePicker").data("kendoDatePicker").enable(!$(this).is(':checked'));
                $("#BulkRateChangeRateChangeDeltaNumericTextBox").data("kendoNumericTextBox").enable(!$(this).is(':checked'));
            }
        });
        
    });
</script>
<div id="BulkRateChangesItemsDiv" class="toolbar">
    @(Html.Kendo().ToolBar()
                .Name("SharedBulkRateChangeToolBar")
                .Items(items =>
                {
                    items.Add().Template(Html.Kendo().Button().Name("ParseBulkRateChangeList").Events(e => e.Click("onBulkRateChangeListParse")).Content(@<text><i class="fa fa-pencil"></i>&nbsp;Parse List</text>).ToHtmlString());                
                items.Add().Template(Html.Kendo().Button().Name("BulkRateChangeBulkRateChangeSelectAllButton").Content("Select All").Events(e => e.Click("onSelectAllBulkRateChange")).ToHtmlString());
                items.Add().Template(Html.Kendo().Button().Name("BulkRateChangeAllButton").Content("Send RateChanges").Events(e => e.Click("onProcessBulkRateChange")).Enable(false).ToHtmlString());
                items.Add().Template(Html.Kendo().Button().Name("BulkRateChangeApplyOptionsButton").Content("Apply Options").Events(e => e.Click("onProcessBulkRateChangeExpandedOptions")).Enable(false).ToHtmlString());
                items.Add().Template(Html.Kendo().Button().Name("BulkRateChangeTrashTradesButton").HtmlAttributes(new { @class = "k-widget k-notification k-notification-error" }).Events(e => e.Click("onBulkRateChangeTrash")).Content(@<text> <i class="fa fa-trash-o"></i>&nbsp;Trash</text>).ToHtmlString());
        }))

    @(Html.Kendo().ToolBar()
                     .Name("SharedBulkSecondaryRateChangeToolBar")
                     .Items(items =>
                     {
                         items.Add().Template(LabelHelper.Label("SearchType").ToHtmlString());
                         items.Add().Template(Html.Kendo().DropDownList()
                                                        .Name("BulkRateChangeSearchTypeDropdownList")
                                                        .HtmlAttributes(new { @style = "width:120px;", data_value_primitive = true })
                                                        .Enable(true)
                                                        .AutoWidth(true)
                                                        .BindTo(Enum.GetNames(typeof(SL_ColumnType)).AsEnumerable())
                                                        .Value(SL_ColumnType.CONTRAENTITY.ToString()).ToHtmlString());
                         items.Add().Template(Html.Kendo().DropDownList()
                                                      .Name("BulkRateChangeSearchTypeOperatorDropdownList")                                                      
                                                      .Enable(true)
                                                      .AutoWidth(true)
                                                      .HtmlAttributes(new { @style = "width:80px;", data_value_primitive = true })
                                                      .BindTo(Enum.GetNames(typeof(SL_Operator)).AsEnumerable())
                                                      .Value(SL_Operator.eq.ToString()).ToHtmlString());
                         items.Add().Template(Html.TextBox("BulkRateChangeSearchTypeTextBox", "", new { @class = "k-textbox", style = "width:100px;" }).ToHtmlString());
                         items.Add().Template(Html.Kendo().Button().Name("BulkRateChangeSearchTypeButton").Enable(true).Content(LabelHelper.Text("SearchType")).Events(ev => ev.Click("onBulkRateChangeSearchType")).ToHtmlString());

                     }))

<table id="BulkRateChangeToolBar" class="toolbar">
<tr>
    <td valign="middle">
        @Html.Kendo().CheckBox().Name("BulkRateChangeEntityCheckBox").Label(LabelHelper.Text("Entity"))
    </td>
    <td>
        @(Html.Kendo().DropDownList()
                        .Name("BulkRateChangeEntityDropdownList")
                        .HtmlAttributes(new { @class = "Toolbar-Cell", @style = "width:90px;" })
                        .DataTextField("Custodian")
                        .DataValueField("CompanyId")
                        .OptionLabel(LabelHelper.Text("OptionLabel"))
                        .Animation(true)
                        .AutoBind(true)
                        .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                        "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                        "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                        .Events(events => events.Open("onContraEntityAutoCompleteResize").DataBound("onBulkRateChangeDefaultLoad").Change("onBulkRateChangeEntityChange"))
                        .Enable(false)
                        .DataSource(dataSource => dataSource
                        .Read(read => read.Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                        .SelectedIndex(1))
    </td>
    <td valign="middle">
        @Html.Kendo().CheckBox().Name("BulkRateChangeContraEntityCheckBox").Label(LabelHelper.Text("ContraEntity"))
    </td>
    <td>
        @(Html.Kendo().AutoComplete()
                        .Name("BulkRateChangeContraEntityDropdownList")
                        .DataTextField("ContraEntity")
                        .HtmlAttributes(new { @class = "Toolbar-Cell" })
                        .Enable(false)
                        .Events(events => events.Open("BulkRateChangeResizeDropdown"))
                        .DataSource(source =>
                        {
                            source.Read(read => read.Action("Read_ContraEntityDropdown", "ContraEntity", new { area = "DomesticTrading" }).Data("additionalBulkRateChangeData"));
                        })
                        .HtmlAttributes(new { ID = "BulkRateChangeContraEntityDropdownList", @style = "width:90px;" })
                        .Filter("startswith")
                        .Template("<span class=\"k-state-default\">#:data.ContraEntity# #:data.AccountName# </span>"))
    </td>
    <td valign="middle">
        @Html.Kendo().CheckBox().Name("BulkRateChangeEffectiveDateCheckBox").Label(LabelHelper.Text("DateTimePicker"))
    </td>
    <td>
        @(Html.Kendo().DatePicker()
                            .Name("BulkRateChangeDateTimePicker")
                            .HtmlAttributes(new { @class = "Toolbar-Cell" })                            
                            .Enable(false)
                            .HtmlAttributes(new { @style = "width:120px;" })
                            .Value(DateTime.Today))
    </td>
</tr>
<tr>
    <td valign="middle">
        @Html.Kendo().CheckBox().Name("BulkRateChangeExecutingSystemCheckBox").Label(LabelHelper.Text("ExecutingSystem"))
    </td>
    <td>
        @(Html.Kendo().DropDownList()
                    .Name("BulkRateChangeExecutingSystemDropdownList")
                    .HtmlAttributes(new { ID = "BulkRateChangeExecutingSystemDropdownList", @style = "width:120px;", @class = "Toolbar-Cell" })
                    .SelectedIndex(0)
                    .Enable(false)
                    .AutoWidth(true)
                    .Events(ev => ev.Change("onBulkRateChangeExecutingSystemChange"))
                    .Value(SessionService.UserFirms.Where(x => x.CompanyId.ToString() == SessionService.UserPreference.DefaultFirm).First().DefaultExecutionSystem.ToString())
                    .BindTo(Enum.GetNames(typeof(SL_ExecutionSystemType)).ToList()))
    </td>
    <td valign="middle">
        @Html.Kendo().CheckBox().Name("BulkRateChangeTradeTypeCheckBox").Label(LabelHelper.Text("TradeType"))
    </td>
    <td>
        @(Html.Kendo().DropDownList()
                        .Name("BulkRateChangeTradeTypeDropdownList")
                        .DataValueField("Value")
                        .DataTextField("Text")
                        .HtmlAttributes(new { @class = "Toolbar-Cell" })
                        .AutoWidth(true)
                        .Enable(false)
                        .HtmlAttributes(new { @style = "width:120px;" })
                        .Value(DataSystemValues.LoadSystemValue("BulkRateChangeDefaultTradeType", "StockBorrow"))
                        .DataSource(dataSource =>
                        {
                            dataSource.Read(read => read.Action("Read_SLTradeTypeByExecutingSystem", "Enum", new { area = "DomesticTrading" }).Data("additionalBulkRateChangeExecutingSystem"));
                        }))
    </td>
    <td valign="middle">
        @Html.Kendo().CheckBox().Name("BulkRateChangeBatchCodeCheckBox").Label(LabelHelper.Text("ReturnBatchCode"))
    </td>
    <td>
        @(Html.TextBox("BulkRateChangeBatchCodeTextBox", "", new { @class = "k-textbox,Toolbar-Cell", maxlength = "1", style = "width:50px;", @readonly = "readonly" }))
    </td>
</tr>
<tr>
    <td valign="middle">
        @Html.Kendo().CheckBox().Name("BulkRateChangeRateChangeDeltaCheckBox").Label(LabelHelper.Text("RateChangeDelta"))
    </td>
    <td>
        @(Html.Kendo().NumericTextBox()
                            .Name("BulkRateChangeRateChangeDeltaNumericTextBox")
                            .HtmlAttributes(new { ID = "BulkRateChangeRateChangeDeltaNumericTextBox", @style = "width:120px;", @class = "Toolbar-Cell" })
                            .Decimals(4)
                            .Format("#.0000")
                            .Step(0.25)
                            .Enable(false))
    </td>
    <td valign="middle">
        @Html.Kendo().CheckBox().Name("BulkRateChangeNewRateChangeCheckBox").Label(LabelHelper.Text("RateChangeNew"))
    </td>
    <td>
        @(Html.Kendo().NumericTextBox()
                                    .Name("BulkRateChangeNewRateChangeNumericTextBox")
                                    .HtmlAttributes(new { ID = "BulkRateChangeNewRateChangeNumericTextBox", @style = "width:120px;", @class = "Toolbar-Cell" })
                                    .Decimals(4)
                                    .Format("#.0000")
                                    .Step(0.25)
                                    .Enable(false))
        @(Html.TextBox("BulkRateChangeNewRateChangeCodeTextBox", "", new { @class = "k-textbox,Toolbar-Cell", maxlength = "1", style = "width:50px;", @readonly = "readonly" }))
    </td>
</tr>
<tr>
    <td></td>
    <td></td>
</tr>
</table>
</div>
                        @(Html.Kendo().Splitter()
                        .HtmlAttributes(new { @style = "height:75%" })
                        .Name("BulkRateChangeSplitter")                       
                        .Orientation(SplitterOrientation.Vertical)
                        .Panes(panes =>
                        {
                        panes.Add()
                        .Collapsible(false)
                        .Size("30%")
                        .Scrollable(false)
                        .Content(@<text>
                        @Html.TextArea("BulkRateChangeListTextBox")
                        </text>);

                            panes.Add()
                        .Collapsible(false)
                        .Scrollable(false)
                        .Content(@<text>
                            @(Html.Kendo().Grid(Model)
                                .Name("BoxCalculationBulkRateChangeGrid")
                                .Scrollable(scroll => scroll.Virtual(true))
                                .NoRecords()
                                .Selectable(select => select.Mode(GridSelectionMode.Multiple)
                                .Enabled(true))
                                .Sortable()
                                .Resizable(cols => cols.Columns(false))
                                .ColumnMenu(menu =>
                                {
                                    menu.Filterable(true);
                                    menu.Sortable(true);
                                    menu.ComponentType( "modern" );
                                } )
                                .Editable(edit => edit.Mode(GridEditMode.InCell).Enabled(true))
                                .Events(e =>
                                {
                                    e.Edit("onSharedBulkRateChangeEdit");
                                    e.DataBound("onContractBulkRateChangeDataBound");
                                    e.ColumnHide("onBulkRateChangeGridLayoutChange");
                                    e.ColumnShow("onBulkRateChangeGridLayoutChange");
                                    e.ColumnResize("onBulkRateChangeGridLayoutChange");
                                    e.ColumnReorder("onBulkRateChangeGridLayoutChange");
                                })
                                .Columns(columns =>
                                {
                                    columns.Bound(x => x.SubmissionType).GetColumnFormat(ColumnTypeEnum.String, false, "# if (SubmissionType == " + Convert.ToInt32(StatusDetail.Approved).ToString() + ") { #" +
                         "<div style='text-align:center;' class='k-widget k-notification k-notification-success'><i class='fa  fa-check'></i></div>" +
                         "# } else if (SubmissionType == " + Convert.ToInt32(StatusDetail.Rejected).ToString() + "){ #" +
                         "<div style='text-align:center;' class='k-widget k-notification k-notification-error'><i class='fa fa-times' ></i></div>" +
                         "# } else if (SubmissionType == " + Convert.ToInt32(StatusDetail.HeldLocal).ToString() + "){ #" +
                         "<div style='text-align:center;' class='k-widget k-notification k-notification-warning'><i class='fa fa-pencil'></i></i></div>" +
                         "# }#", "");
                                    columns.Bound(x => x.ExecutingSystem).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                    columns.Bound(x => x.ModelId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                    columns.Bound(x => x.Enabled).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox'  class='chkbx' #= (Enabled) ? checked ='checked' : '' #/>", "");
                                    columns.Bound(x => x.Entity).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                    columns.Bound(x => x.ClearingId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                    columns.Bound(x => x.ContraEntity).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                    columns.Bound(x => x.ContractNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                    columns.Bound(x => x.TradeType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                    columns.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                    columns.Bound(x => x.Isin).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                    columns.Bound(x => x.Sedol).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                    columns.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                    columns.Bound(x => x.Quantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(Quantity)#", "");
                                    columns.Bound(x => x.Amount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(Amount)#", "");
                                    columns.Bound(x => x.EffectiveDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
                                    columns.Bound(x => x.ContraRateSwing).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox' value='#= ContraRateSwing #' " + "# if (ContraRateSwing) { #" + "checked='checked'" + "# } #" + "/>", "").Hidden(true);
                                    columns.Bound(x => x.OldRate).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(OldRate)#", "");
                                    columns.Bound(x => x.OldRateCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                    columns.Bound(x => x.OldUseHouseRate).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox' value='#= OldUseHouseRate #' " + "# if (OldUseHouseRate) { #" + "checked='checked'" + "# } #" + "/>", "").Hidden(true);
                                    columns.Bound(x => x.OldIncomeAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(OldIncomeAmount)#", "").Hidden(true);
                                    columns.Bound(x => x.SecurityLoc).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                    columns.Bound(x => x.CashLoc).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                    columns.Bound(x => x.NewRate).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(NewRate)#", "RebateRateDecimalNumber");
                                    columns.Bound(x => x.NewRateCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                    columns.Bound(x => x.NewUseHouseRate).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox'  class='HouseRate' #= (NewUseHouseRate) ? checked ='checked' : '' #/>", "").Hidden(true);
                                    columns.Bound(x => x.NewIncomeAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(NewIncomeAmount)#", "");
                                    columns.Bound(x => x.SubmissionType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                    columns.Bound(x => x.MemoInfo).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                })
                                .DataSource(read => read.Ajax()
                                .PageSize(100)
                                .Model(model =>
                                {
                                    model.Id(x => x.ModelId);
                                    model.Field(x => x.ModelId).Editable(false);
                                    model.Field(x => x.Enabled).Editable(false);
                                    model.Field(x => x.Entity).Editable(false);
                                    model.Field(x => x.ClearingId).Editable(false);
                                    model.Field(x => x.ContraEntity).Editable(false);
                                    model.Field(x => x.ContractNumber).Editable(false);
                                    model.Field(x => x.TradeType).Editable(false);
                                    model.Field(x => x.SecurityNumber).Editable(false);
                                    model.Field(x => x.Ticker).Editable(false);
                                    model.Field(x => x.Quantity).Editable(false);
                                    model.Field(x => x.Amount).Editable(false);
                                    model.Field(x => x.ContraRateSwing).Editable(false);
                                    model.Field(x => x.OldRate).Editable(false);
                                    model.Field(x => x.OldRateCode).Editable(false);
                                    model.Field(x => x.OldUseHouseRate).Editable(false);
                                    model.Field(x => x.OldIncomeAmount).Editable(false);
                                    model.Field(x => x.NewRate).Editable(true);
                                    model.Field(x => x.NewRateCode).Editable(false);
                                    model.Field(x => x.NewUseHouseRate).Editable(false);
                                    model.Field(x => x.NewIncomeAmount).Editable(false);
                                    model.Field(x => x.SubmissionType).Editable(false);
                                    model.Field(x => x.MemoInfo).Editable(false);
                                    model.Field(x => x.SecurityLoc).Editable(false);
                                    model.Field(x => x.CashLoc).Editable(false);
                                })
                                .Aggregates(agg =>
                                {
                                    agg.Add(x => x.Quantity).Sum();
                                    agg.Add(x => x.Amount).Sum();
                                    agg.Add(x => x.OldIncomeAmount).Sum();
                                    agg.Add(x => x.NewIncomeAmount).Sum();
                                })
                                .Events(e => e.Error("onError")).ServerOperation(false).AutoSync(true).Update(update => update.Action("RateChangeModel_Update", "ContractRelated", new { area = "DomesticTrading" }))))
                            <label id='ProgressLabel'></label>
                                            </text>);
                                                                                                                            }))    
                            @(Html.Kendo().ContextMenu()
                            .Name("BulkRateChangeContextMenu")
                            .Target("#BoxCalculationBulkRateChangeGrid")
                            .Events(events => events.Select("onBulkRateChangeContextMenuSelect"))
                            .Items(items =>
                            {
                                items.Add().Text("AutoFit Columns").Enabled(true);
                                items.Add().Text("Unsort").Enabled(true);
                                items.Add().Text("Reset Filter").Enabled(true);
                                items.Add().Text("Reset Grid").Enabled(true);
                                items.Add().Separator(true);
                                items.Add().Text("Select All").Enabled(true);
                                items.Add().Text("Check All").Enabled(true);
                                items.Add().Text("Copy").Enabled(true).HtmlAttributes(new { ID = "BulkRateChangeCopyButton" });
                                items.Add().Text("Export To Excel").Enabled(true);
                            }))
