@using System.ComponentModel
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Enums
@using SLTrader.Tools
@using SLTrader.Models
@using BondFire.Entities.Projections
@using SLTrader.Models.ContractRelatedModels

@model IEnumerable<ContractCancelModel>

<style scoped>
        #CancelChangeTable {
        border-collapse:collapse;
        width:100%;
    }

        #CancelChangeTable th,
        #CancelChangeTable td {
            min-height: 50px;
            padding: 5px 0px 0px 5px;
        }
</style>

<script type="text/javascript">
    $(document).ready(function () {
        setTimeout(function () {
            resizeGridColumns("#ContractCancelGrid");
            $('#LocalDetailWindow').data("kendoWindow").center();
        }, 5);
    });

    function getFormData($form) {
        var unindexed_array = $form.serializeArray();
        var indexed_array = {};

        $.map(unindexed_array, function (n, i) {
            indexed_array[n['name']] = n['value'];
        });

        indexed_array['Enabled'] = "true";
    
        return indexed_array;
    }

    function onContractCancelGridError(e) {
        console.log(e);
    }
 
    $(function() {
        $('#ContractCancelGrid').on('click', '.chkbx', function() {
            var checked = $(this).is(':checked');
            var grid = $('#ContractCancelGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));
            grid.select($(this).closest('tr'));

            var entityGrid = $("#ContractCancelGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            if (selectedItem.SubmissionType != '@Convert.ToInt32(StatusDetail.Approved)') {
                dataItem['Enabled'] = checked;
            }

            var grid = $("#ContractCancelGrid").data("kendoGrid");
            var data = grid.dataSource.data();

            $("#CancelButton").data("kendoButton").enable(false);

            $.each(data, function (i, row) {
                if (row.Enabled)
                {
                    $("#CancelButton").data("kendoButton").enable(true);
                }
            });
        });
    });

    function onCancelEdit(e) {        
        var entityGrid = $("#ContractCancelGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        if (selectedItem.SubmissionType == '@Convert.ToInt32(StatusDetail.Approved)') {
            $('#ContractCancelGrid').data("kendoGrid").closeCell();
        }
        else {
            var input = e.container.find("input");
            setTimeout(function () { input.select(); });
        }
    }

   function onSelectAllCancel() {
        var grid = $('#ContractCancelGrid').data('kendoGrid');
        var rows = grid.dataSource.data();
        var processedRowCount = 0;

        $("#CancelButton").data("kendoButton").enable(false);

        $('#ProgressLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing items...');

        for (var index = 0; index < rows.length; index++) {
            grid.dataSource.data()[index].Enabled = true;

            processedRowCount = processedRowCount + 1;
        }

        grid.dataSource.sync();

        $("#CancelButton").data("kendoButton").enable(true);

        $('#ProgressLabel').html('Selected ' + processedRowCount + ' items.');
    }
 
   function onCancelChange() {
        var grid = $('#ContractCancelGrid').data('kendoGrid');
        var rows = grid.dataSource.data();

        var rowCount = 0;
        var processedRowCount = 0;

        $("#CancelButton").data("kendoButton").enable(false);
        
        $.each(rows, function (i, row) {
            if (row.Enabled) {           
                rowCount++;
            }
        });

        $('#ProgressLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing ' + rowCount + ' items.');
        $("#CancelButton").data("kendoButton").enable(false);

        $.ajax({
            url: "@Url.Action("ProcessCancel", "ContractRelated", new { area = "DomesticTrading" })",
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify({ items: rows }),
            success: function (valid) {
                grid.dataSource.data(valid);
                grid.refresh();

                var _grid = $("#ContractCancelGrid").data("kendoGrid");
                var _data = _grid.dataSource.data();

                $("#CancelButton").data("kendoButton").enable(false);

                $.each(_data, function (i, row) {
                    if (row.Enabled) {
                        $("#CancelButton").data("kendoButton").enable(true);
                        processedRowCount++;
                    }
                });

                $('#ProgressLabel').html('Processed ' + processedRowCount + ' out of ' + rowCount + ' items.');

                if (processedRowCount == rowCount) {
                    $('#LocalDetailWindow').data("kendoWindow").close();
                }
            },
            error: function (valid) {
                console.log(valid);
                $('#ProgressLabel').html('<i class="fa fa-times"></i> Error Processing!');
                $("#CancelButton").data("kendoButton").enable(true);
            }
        });
    }

    function onContractCancelDataBound(e) {
        try {
            var grid = $("#ContractCancelGrid").data("kendoGrid");
            var data = grid.dataSource.data();

            $("#CancelButton").data("kendoButton").enable(false);                        

            $.each(data, function (i, row) {
                if (row.Enabled) {
                    $("#CancelButton").data("kendoButton").enable(true);
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }
</script>

@if (!Model.Any())
{
    <div style="padding:20px;font-size:small;">
        <h2>No Data Selected / Processed</h2>
    </div>
}
else
{
@(
 Html.Kendo().ToolBar()
    .Name("SharedCancelToolBar")
    .Items(items =>
    {
        items.Add().Template(Html.Kendo().Button().Name("SelectAllButton").Content("Select All").Events(e => e.Click("onSelectAllCancel")).ToHtmlString());
        items.Add().Template(Html.Kendo().Button().Name("CancelButton").Content("Send Cancel").Events(e => e.Click("onCancelChange")).Enable(false).ToHtmlString());

        items.Add().Template("<label id='ProgressLabel'></label>");
    })
)

    <hr class="hr-white">
    <div>
        @(Html.Kendo().Grid( Model )
    .Name( "ContractCancelGrid" )
    .HtmlAttributes( new { @class = "grid" } )
    .Scrollable()
    .Selectable()
    .NoRecords()
    .Resizable( cols => cols.Columns( bool.Parse( DataSystemValues.LoadSystemValue( "ResizeableGrid", "true" ) ) ) )
    .Events( e => e.Edit( "onCancelEdit" ).DataBound( "onContractCancelDataBound" ))
    .Columns( columns =>
    {
        columns.Bound( x => x.SubmissionType ).GetColumnFormat( ColumnTypeEnum.String, false, "# if (SubmissionType == " + Convert.ToInt32( StatusDetail.Approved ).ToString() + ") { #" +
"<div style='text-align:center;' class='k-widget k-notification k-notification-success'><i class='fa  fa-check'></i></div>" +
"# } else if (SubmissionType == " + Convert.ToInt32( StatusDetail.Rejected ).ToString() + "){ #" +
"<div style='text-align:center;' class='k-widget k-notification k-notification-error'><i class='fa fa-times' ></i></div>" +
"# } else if (SubmissionType == " + Convert.ToInt32( StatusDetail.HeldLocal ).ToString() + "){ #" +
"<div style='text-align:center;' class='k-widget k-notification k-notification-warning'><i class='fa fa-pencil'></i></div>" +
"# }#", "" );
        columns.Bound( x => x.ModelId ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.Enabled ).GetColumnFormat( ColumnTypeEnum.String, false, "<input type='checkbox'  class='chkbx' #= (Enabled) ? checked ='checked' : '' #/>", "" );
        columns.Bound( x => x.EntityId ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
        columns.Bound( x => x.ContraEntity ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.ContractNumber ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.TradeType ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.SecurityNumber ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.Ticker ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.Quantity).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(Quantity)#", "" );
        columns.Bound( x => x.Amount).GetColumnFormat( ColumnTypeEnum.Money, true, "#=GetMoneyDirection(Amount)#", "" );
        columns.Bound( x => x.RebateRate ).GetColumnFormat( ColumnTypeEnum.Rate, false, "#=GetRateDirection(RebateRate)#", "" );
        columns.Bound( x => x.SubmissionType ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.MemoInfo ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
    } )
    .DataSource( read => read.Ajax()
        .Aggregates( agg =>
        {
            agg.Add(x => x.Quantity).Sum();
            agg.Add(x => x.Amount).Sum();
        })
        .ServerOperation( false )
        .AutoSync( true )
        .Events(ev => ev.Error("onContractCancelGridError"))
        .Update( update => update.Action("ContractCancelModel_Update", "ContractRelated", new { area = "DomesticTrading" } ) )
        .Model( model =>
        {
            model.Id( x => x.ModelId );
            model.Field( x => x.ModelId ).Editable( false );
            model.Field( x => x.Enabled ).Editable( false );
            model.Field( x => x.EntityId).Editable( false );
            model.Field( x => x.ContraEntity ).Editable( false );
            model.Field( x => x.ContractNumber ).Editable( false );
            model.Field( x => x.TradeType ).Editable( false );
            model.Field( x => x.SecurityNumber ).Editable( false );
            model.Field( x => x.Ticker ).Editable( false );
            model.Field( x => x.Quantity ).Editable( false );
            model.Field( x => x.Amount ).Editable( false );
            model.Field( x => x.RebateRate ).Editable( false );
            model.Field( x => x.SubmissionType ).Editable( false );
            model.Field( x => x.MemoInfo ).Editable( false );
        } ) ))
    </div>
}