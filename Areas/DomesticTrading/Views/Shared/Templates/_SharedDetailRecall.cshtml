@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools

@model PartialViewModel
<style scoped>
    #SharedRecallButton.zeroclipboard-is-hover {
        background-color: #1ba1e2;
    }
</style>
<script type="text/javascript">
    var _originalSharedRecallGrid = null;

    $(document).ready(function () {
        setTimeout(function () {
            _originalSharedRecallGrid = $('#SharedDetailRecallGrid').data('kendoGrid').getOptions();

            LoadGridLayout("#SharedDetailRecallGrid");

            $(".k-grid-toolbar", "#SharedDetailRecallGrid").prepend("<label style=\"font-weight:bold;\">Security: [@Model.SecurityNumber] @Model.Ticker For @Model.EffectiveDate.ToString("yyyy-MM-dd")</label>");

            $('#SharedDetailRecallGrid').data('kendoGrid').dataSource.read();
        }, 3);

        var clientEvent1 = new ZeroClipboard(document.getElementById("SharedRecallButton"));

        clientEvent1.on("ready", function (readyEvent) {
            clientEvent1.on("copy", function (event) {
                var data1 = KendoGridToText("#SharedDetailRecallGrid", "SharedDetailRecallGrid", false);
                clientEvent1.setText(data1);
            });
        });
    });

    function onSharedRecallGridLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#SharedDetailRecallGrid");
        }, 5);
    }

    function onSharedRecallReturn(e) {
        if (e) {
            var dataItems = [];

            var grid = $('#SharedDetailRecallGrid').data('kendoGrid');
            var rows = grid.select();

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });

            HelperPartialWindow(
                JSON.stringify(dataItems),
                'Book Returns',
                1100,
                450,
                '/DomesticTrading/ContractRelated/Load_ReturnByRecall'
            );
        }
    }


    function onSharedRecallContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'Return':
                onSharedRecallReturn(true);
                break;

            case 'Cancel':
                onSharedRecallDelete(true);
                break;

            case 'Buy-In':
                onSharedRecallBuyIn(true);
                break;

            case 'Unsort':
                onSharedRecallUnsortGrid("#SharedDetailRecallGrid");
                break;

            case 'Select All':
                onSharedRecallSelectAll(true);
                break;

            case 'Actions':
                onSharedRecallAction(true);
                break;

            case 'AutoFit Columns':
                resizeGridColumns("#SharedDetailRecallGrid");
                break;


            case "Reset Filter":
                ResetFilter("#SharedDetailRecallGrid");
                break;


            case 'Reset Grid':
                ResetUserLayout("#SharedDetailRecallGrid");
                $('#SharedDetailRecallGrid').data('kendoGrid').setOptions(_originalSharedRecallGrid);
                $(".k-grid-toolbar", "#SharedDetailRecallGrid").prepend("<label style=\"font-weight:bold;\">Security: [@Model.SecurityNumber] @Model.Ticker For @Model.EffectiveDate.ToString("yyyy-MM-dd")</label>");
                $('#SharedDetailRecallGrid').data('kendoGrid').dataSource.read();
                break;

            case 'Export To Excel':
                exportToSharedRecallExcel();
                break;
        }
    }

    function onSharedRecallSelectAll(e) {
        try {
            var recallGrid = $("#SharedDetailRecallGrid").data("kendoGrid");
            recallGrid.select(recallGrid.tbody.find(">tr"));
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onSharedRecallUnsortGrid(e) {
        UnsortGrid(e);
    }

    function exportToSharedRecallExcel() {
        KendoGridToCSVConvertor("#SharedDetailRecallGrid", 'SharedDetailRecallGrid');
    }

     function onSharedRecallDelete(e) {
         if (e) {
             var grid = $("#SharedDetailRecallGrid").data("kendoGrid");
             var selectedItem = grid.dataItem(grid.select());

             $.ajax({
                 url: '@Url.Action("Delete_Recall","Recall")',
                 type: 'POST',
                 contentType: 'application/json;',
                 data: JSON.stringify({ recall: selectedItem }),
                 success: function (valid) {
                     dataItem["Status"] = '@StatusDetail.Cancelled.ToString()';
                 },
                 error: function (valid) {
                     dataItem["Status"] = '@StatusDetail.Rejected.ToString()';
                 }
             })
        }
    }

    function onSharedRecallBuyIn(e) {
        if (e) {
            var grid = $("#SharedDetailRecallGrid").data("kendoGrid");
            var selectedItem = grid.dataItem(grid.select());

            $.ajax({
                url: '@Url.Action("BuyIn_Recall","Recall")',
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({ recall: selectedItem }),
                success: function (valid) {
                    selectedItem["Status"] = '@SL_RecallStatus.PEND.ToString()';
                },
                error: function (valid) {
                    selectedItem["Status"] = '@SL_RecallStatus.PEND.ToString()';
                }
            })
        }
    }

    function onSharedRecallAction(e) {
        if (e) {
            var grid = $("#SharedDetailRecallGrid").data("kendoGrid");
            var selectedItem = grid.dataItem(grid.select());

            HelperPartialWindow(
                JSON.stringify(selectedItem),
                'Recall Actions',
                490,
                490,
                '/DomesticTrading/Recall/Load_RecallAction'
            );
        }
    }

    function onSharedRecallError(e) {
        console.log(e.message);
    }

    function onSharedRecallCheckData() {
        CheckGridData('#SharedDetailRecallGrid');
    }

    function additionalSharedRecallData() {

        return {
            entityId: '@Model.EntityId',
            effectiveDate: '@Model.EffectiveDate',
            issueId: '@Model.IssueId'
        };
    }

</script>

<div id="SharedDetailRecallDiv" class="grid-div">
  @(
 Html.Kendo().Grid<SL_RecallExtendedProjection>()
           .Name("SharedDetailRecallGrid")
            .Sortable()
            .Scrollable(scrollable => scrollable.Virtual(true))
            .ToolBar(t =>
            {
                t.Template("<label></label>");
            })
                .Editable(x => x.Enabled(false))
                .HtmlAttributes(new { @class = "grid" })
                .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple))
                .Filterable()
                .AutoBind(false)
                .Events(events =>
                {
                    events.DataBound("onSharedRecallCheckData");
                    events.ColumnHide("onSharedRecallGridLayoutChange");
                    events.ColumnShow("onSharedRecallGridLayoutChange");
                    events.ColumnResize("onSharedRecallGridLayoutChange");
                    events.ColumnReorder("onSharedRecallGridLayoutChange");
                })
                .NoRecords()
                .ColumnMenu(columnMenu =>
                {
                    columnMenu.Columns(true);
                    columnMenu.Sortable(true);
                    columnMenu.Filterable(true);
                    columnMenu.ComponentType( "modern" );
                } )
                .Reorderable(reorder =>
                {
                    reorder.Columns(true);
                })
                .Navigatable()
                    .Columns(columns =>
                    {
                        columns.Bound(p => p.RecallNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                        columns.Bound(p => p.EffectiveDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "").Hidden(true);
                        columns.Bound(p => p.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                        columns.Bound(p => p.ContraEntity).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                        columns.Bound(p => p.IssueId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                        columns.Bound(p => p.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                        columns.Bound(p => p.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                        columns.Bound(p => p.ContractNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                        columns.Bound(p => p.TradeType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                        columns.Bound(p => p.Price).GetColumnFormat(ColumnTypeEnum.Money, false, "", "");
                        columns.Bound(p => p.ContractPosition).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(ContractPosition)#", "");
                        columns.Bound(p => p.QuantityRecalled).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(QuantityRecalled)#", "");
                        columns.Bound(p => p.RecallAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(RecallAmount)#", "");
                        columns.Bound(p => p.QuantityRemaining).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(QuantityRemaining)#", "");
                        columns.Bound(p => p.QuantityReturnedPending).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(QuantityReturnedPending)#", "");
                        columns.Bound(p => p.QuantityReturnedSettled).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(QuantityReturnedSettled)#", "");
                        columns.Bound(p => p.CnsFailToDeliverPositionSettled).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(CnsFailToDeliverPositionSettled)#", "");
                        columns.Bound(p => p.DvpFailToDeliverPositionSettled).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(DvpFailToDeliverPositionSettled)#", "");
                        columns.Bound(p => p.BrokerFailToDeliverPositionSettled).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(BrokerFailToDeliverPositionSettled)#", "");
                        columns.Bound(p => p.RebateRate).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetMoneyDirection(RebateRate)#", "");
                        columns.Bound(p => p.RecallFlag).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                        columns.Bound(p => p.RecallDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
                        columns.Bound(p => p.BuyInDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
                        columns.Bound(p => p.RecallReason).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                        columns.Bound(p => p.ActionCount).GetColumnFormat(ColumnTypeEnum.Position, false, "# if (ActionCount > 0) { #<i class='fa fa-bars' style='color:green;'></i># }# ", "").Title("").HtmlAttributes(new { title = "Actions - #= ActionCount # " }).Filterable(false);
                        columns.Bound(p => p.Comment).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                        columns.Bound(p => p.Status).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                    })
                    .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
                                  .DataSource(dataSource => dataSource
                      .Ajax()
                      .ServerOperation(false)
                      .Model(model => model.Id(p => p.SLRecall))
                    .Aggregates(aggregates =>
                    {
                        aggregates.Add(p => p.ContractPosition).Sum();
                        aggregates.Add(p => p.QuantityRecalled).Sum();
                        aggregates.Add(p => p.QuantityRemaining).Sum();
                        aggregates.Add(p => p.QuantityReturnedPending).Sum();
                        aggregates.Add(p => p.QuantityReturnedSettled).Sum();
                        aggregates.Add(p => p.CnsFailToDeliverPositionSettled).Sum();
                        aggregates.Add(p => p.DvpFailToDeliverPositionSettled).Sum();
                        aggregates.Add(p => p.BrokerFailToDeliverPositionSettled).Sum();
                        aggregates.Add(p => p.RecallAmount).Sum();
                    })
                    .Read(read => read
                                                .Action("Read_RecallByIssue", "Main", new { Area = "DomesticTrading" })
                                .Data("additionalSharedRecallData")
                        )
                        .Events(events =>
                                    events.Error("onSharedRecallError"))
                    ))
    </div>

 @(Html.Kendo().ContextMenu()
.Name("SharedRecallContextMenu")
        .Target("#SharedDetailRecallGrid")
        .Events(events => events.Select("onSharedRecallContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("Return").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLContract));
        items.Add().Text("Cancel").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLRecall));
        items.Add().Text("Buy-In").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLRecall));
        items.Add().Text("Actions").Enabled(true);
        items.Add().Separator(true);
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
        items.Add().Separator(true);
        items.Add().Text("Select All").Enabled(true);
        items.Add().Text("Copy").Enabled(true).HtmlAttributes(new { ID = "SharedRecallButton" });
        items.Add().Text("Export To Excel").Enabled(true);
    })
)
    