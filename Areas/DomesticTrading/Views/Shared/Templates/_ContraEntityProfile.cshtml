@using System.ComponentModel
@using System.Globalization
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Enums
@using SLTrader.Tools
@using SLTrader.Models
@using BondFire.Entities

@model SL_ContraEntity


<script>
    function onError(e) {
        alert(e);
    }

    function additionalContraEntityProfileData() {
        var entityId: '@Model.EntityId';
        var contraEntityId = '@Model.SLContraEntity';

        return {
            entityid: entityId,
            contraEntityId: contraEntityId,
        }
    }

    function onContraEntityProfileGridRequestEnd(e) {
        $("#ContraEntityProfileGrid").data("kendoGrid").dataSource.read();
    }

    $(document).ready(function () {
        var window = $("#LocalDetailWindow").data("kendoWindow");
        window.center();
    });
</script>

<style>
    #ContactDiv {
        max-width : 900px;
    }
</style>
<div id="ContactDiv">
    @(Html.Kendo().Grid<SL_ContraEntityProfile>()
            .Name("ContraEntityProfileGrid")
            .HtmlAttributes(new { style = "height:95%;" })
            .Sortable()
            .Scrollable()
            .Filterable()
            .Navigatable()
            .Resizable(resize =>
            {
                resize.Columns(true);
            })
            .Editable(edit => edit.Mode(GridEditMode.InLine))
              .Columns(columns =>
              {
                  columns.Bound(x => x.SLContraEntityProfile).Hidden(true);
                  columns.Bound(x => x.EntityId).Hidden(true);
                  columns.Bound(x => x.ContraEntity).Hidden(true);
                  columns.Bound(x => x.BatchCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                  columns.Bound(x => x.Currency).GetColumnFormat(ColumnTypeEnum.String, false, "", "_CurrencyDropdown");
                  columns.Bound(x => x.IncomeTracked).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                  columns.Bound(x => x.TradeType).GetColumnFormat(ColumnTypeEnum.String, false, "", "_TradeType");
                  columns.Bound(x => x.Rate).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(Rate)#", "");
                  columns.Command(command =>
                  {
                      command.Edit();
                      command.Destroy();
                  });
              })
              .ToolBar(toolbar => toolbar.Create())
              .DataSource(ds => ds.Ajax()
                  .ServerOperation(false)
                  .Events(ev => ev.Sync("onContraEntityProfileGridRequestEnd"))
                  .Model(x =>
                  {
                      x.Id(p => p.SLContraEntityProfile);
                      x.Field(p => p.EntityId).DefaultValue(Model.EntityId.ToString(CultureInfo.InvariantCulture));
                      x.Field(p => p.ContraEntity).DefaultValue(Model.ContraEntity.ToString(CultureInfo.InvariantCulture));
                      x.Field(p => p.TradeType).DefaultValue(TradeType.StockBorrow);
                      x.Field(p => p.BatchCode).DefaultValue("");
                      x.Field(p => p.Currency).DefaultValue(Currency.USDollars);
                      x.Field(p => p.IncomeTracked).DefaultValue(true);                     
                  })
                  .Update(update => update.Action("Update_ContraEntityProfile", "ContraEntity", new { area = "DomesticTrading" }))
                  .Destroy(destroy => destroy.Action("Delete_ContraEntityProfile", "ContraEntity", new { area = "DomesticTrading" }))
                  .Create(create => create.Action("Add_ContraEntityProfile", "ContraEntity", new { area = "DomesticTrading" }))
                  .Read(read => read.Action("Read_ContraEntityProfile", "ContraEntity", new { area = "DomesticTrading" }).Data("additionalData"))))
</div>