@using System.ComponentModel
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Enums
@using SLTrader.Tools
@using SLTrader.Models
@using BondFire.Entities

@model SL_ContraEntity

<script type="text/javascript">
    $(document).ready(function () {
        $("input[data-val-length-max]").each(function () {
            var $this = $(this);
            var data = $this.data();
            $this.attr("maxlength", data.valLengthMax);
        });
    });

    function onTradeSavePost() {
        try {
            var form = $("#my-form");

            $.ajax({
                url: "@Url.Action( "Update_ContraEntityDetail", "ContraEntity", new { area = "DomesticTrading" } )",
                data: form.serializeArray(),
                type: "POST",
                success: function () {
                    $("#StatusLabel").text("ContraEntity udpated.");

                    var summaryType = $("#ContraEntityDetailDropdownList").data("kendoDropDownList").value();

                    if (summaryType == '@DetailTypeEnum.Summary') {
                        $('#ContraEntitiesSummaryGrid').data("kendoGrid").dataSource.read();
                    } else {
                        $('#ContraEntitiesDetailGrid').data("kendoGrid").dataSource.read();
                    }

                    $('#LocalDetailWindow').data("kendoWindow").close();
                },
                error: function (e) {
                    $("#StatusLabel").text("ContraEntity update failed.");
                    console.log(e.message);
                }
            });
        }
        catch (e) {
            console.log(e.message);
            console.log(e.message);
        }
    }

    function onRateChangePost(stocktype, tradetype, rate) {
        var entity = $("#EntityIdTextBox").val();
        var contraEntity = $("#ContraEntityTextBox").val();

        $.ajax({
            url: "@Url.Action("Change_ContraEntityBoxRate", "ContraEntity", new { area = "DomesticTrading" })",
            data: JSON.stringify({
                entityId: entity,
                contraEntity: contraEntity,
                stockType: stocktype,
                tradeType: tradetype,
                rate: rate
            }),
            type: "Post",
            contentType: 'application/json;',
            success: function () {
                $("#UpdateBoxStatusLabel").text("Updated " + stocktype + " rate for " + tradetype + " to " + rate);
            },
            error: function (e) {
                LogError(e);
            }
        });
    }

    function onStockBorrow() {
        var rate = $("#StockBorrowRate").data("kendoNumericTextBox").value();

        onRateChangePost('stock', 'StockBorrow', rate);
    }

    function onStockLoan() {
        var rate = $("#StockLoanRate").data("kendoNumericTextBox").value();

        onRateChangePost('stock', 'StockLoan', rate);
    }

    function onBondBorrow() {
        var rate = $("#BondBorrowRate").data("kendoNumericTextBox").value();

        onRateChangePost('bond', 'StockBorrow', rate);
    }

    function onBondLoan() {
        var rate = $("#BondLoanRate").data("kendoNumericTextBox").value();
        onRateChangePost('bond', 'StockLoan', rate);
    }

    function additionalContraData(e) {
        var entityId = '@Model.EntityId.ToString()'

        return {
            entityId: entityId
        }
    }
</script>

<div class="toolbar-clear">
@using (Html.BeginForm("Action", "ControllerName", FormMethod.Post, new { id = "my-form" }))
{
   <table>
            <tr>
                <td>   
                    @if (bool.Parse(DataSystemValues.LoadSystemValue("AllowContraEntityEdit", "false")))
                    {
                        if (Model.ContraEntity.Equals(""))
                        {
                            @LabelHelper.Label("ContraEntity");
                            @Html.TextBoxFor(model => model.ContraEntity, new { @class = "k-textbox", @ID = "ContraEntityTextBox" })

                        }
                        else
                        {
                            @LabelHelper.Label("ContraEntity");
                            @Html.TextBoxFor(model => model.ContraEntity, new { @class = "k-textbox", @readonly = "readonly", @ID = "ContraEntityTextBox" })
                        }         
                    }
                    else
                    {
                        @LabelHelper.Label("ContraEntity");
                        @Html.TextBoxFor(model => model.ContraEntity, new { @class = "k-textbox", @readonly = "readonly", @ID = "ContraEntityTextBox" })
                    }
                </td>
                <td>
                    @LabelHelper.Label("ContraEntityParent")
                    @(Html.Kendo().DropDownListFor(model => model.ContraEntityParent)
                                .DataTextField("ContraEntityName")
                                .DataValueField("SLContraEntityParent")
                                .Events(events => events.Open("onContraEntityAutoCompleteResize"))
                                .Template("<span class=\"k-state-default\">#:data.ContraEntityName# </span>")
                                .DataSource(dataSource => dataSource
                                .Read(read => read.Action("Read_ContraEntityParentDropdown", "ContraEntity", new { area = "DomesticTrading" }).Data("additionalContraData"))))
                </td>                
                <td>@LabelHelper.Label("EnabledForTrading")
                </td>
                <td>@Html.Kendo().CheckBoxFor( x => x.IsEnabled )</td>
            </tr>
            <tr>
                <td colspan="4">
                   
                        @LabelHelper.Label("ContraEntityName")

                        @if ( bool.Parse( DataSystemValues.LoadSystemValue( "AllowContraEntityEdit", "false" ) ) )
                        {
                            @Html.TextBoxFor( model => model.AccountName, new { @class = "k-textbox", @style = "width:100%;" } )                          
                        }
                        else
                        {
                            @Html.TextBoxFor( model => model.AccountName, new { @class = "k-textbox", @readonly = "readonly", @style = "width:100%;" } )
                        }
                </td>
            </tr>
            <tr>
                <td colspan="4">
                   
                        @LabelHelper.Label("Address")

                        @if ( bool.Parse( DataSystemValues.LoadSystemValue( "AllowContraEntityEdit", "false" ) ) )
                        {
                            @Html.TextBoxFor( model => model.AddressLine1, new { @class = "k-textbox", @style = "width:100%;" } )                          
                        }
                        else
                        {
                            @Html.TextBoxFor( model => model.AddressLine1, new { @class = "k-textbox", @readonly = "readonly", @style = "width:100%;" } )
                        }                    
                    
                </td>
            </tr>
       <tr>
           <td>
               @LabelHelper.Label("AlternateContractCompare")
            </td>
           <td>@Html.Kendo().CheckBoxFor(x => x.AlternateContractCompare)</td>
           <td colspan="2">
                @LabelHelper.Label("LEINumber")

                @Html.TextBoxFor(model => model.LEINumber, new { @class = "k-textbox", @style = "width:100%;" })     
           </td>
       </tr>

            <tr>
                <td>@LabelHelper.Label("StockHouseRates")</td>
            </tr>
            <tr>
                <td>
                   
                        @LabelHelper.Label("StockBorrow")

                        @Html.Kendo().NumericTextBoxFor(model => model.STKBorrowRate).Name("StockBorrowRate").Format("00.000")
                    
                </td>
                <td style="vertical-align: bottom">
                    @if ( !bool.Parse( DataSystemValues.LoadSystemValue( "AllowContraEntityEdit", "false" ) ) )
                    {
                        <a href="#" class="k-button" onclick="onStockBorrow()">Update</a>
                    }
                </td>

                <td>
                   
                        @LabelHelper.Label("StockLoan")
                        @Html.Kendo().NumericTextBoxFor(model => model.STKLoanRate).Name("StockLoanRate").Format("00.000")
                    
                </td>
                <td style="vertical-align: bottom">
                    @if ( !bool.Parse( DataSystemValues.LoadSystemValue( "AllowContraEntityEdit", "false" ) ) )
                    {
                        <a href="#" class="k-button" onclick="onStockLoan()">Update</a>
                    }
                </td>
            </tr>
            <tr>
                <td>@LabelHelper.Label("BondHouseRates")</td>
            </tr>
            <tr>
                <td>
                   
                        @LabelHelper.Label("BondBorrow")
                        @Html.Kendo().NumericTextBoxFor(model => model.BNDBorrowRate).Name("BondBorrowRate").Format("00.000")
                    
                </td>
                <td style="vertical-align: bottom">
                    @if ( !bool.Parse( DataSystemValues.LoadSystemValue( "AllowContraEntityEdit", "false" ) ) )
                    {
                        <a href="#" class="k-button" onclick="onBondBorrow()">Update</a>
                    }
                    </td>

                <td>
                   
                        @LabelHelper.Label("BondLoan")
                        @Html.Kendo().NumericTextBoxFor(model => model.BNDLoanRate).Name("BondLoanRate").Format("00.000")
                    
                </td>

                <td style="vertical-align: bottom">
                    @if ( !bool.Parse( DataSystemValues.LoadSystemValue( "AllowContraEntityEdit", "false" ) ) )
                    {
                    <a href="#" class="k-button" onclick="onBondLoan()">Update</a>
                    }
                </td>
            </tr>
            <tr>
                <td>
                   
                        @LabelHelper.Label("MarkRound")

                        @if ( bool.Parse( DataSystemValues.LoadSystemValue( "AllowContraEntityEdit", "false" ) ) )
                        {
                            @Html.Kendo().NumericTextBoxFor( model => model.MarkRndHse ).Format( "00.000" ).Enable( true );
                        }
                        else
                        {
                            @Html.Kendo().NumericTextBoxFor( model => model.MarkRndHse ).Format( "00.000" ).Enable( false );
                        }                  
                </td>
                <td></td>
                <td>
                   
                        @LabelHelper.Label("MarkValue")

                        @if ( bool.Parse( DataSystemValues.LoadSystemValue( "AllowContraEntityEdit", "false" ) ) )
                        {
                            @Html.Kendo().NumericTextBoxFor( model => model.MarkValHse ).Format( "00.000" ).Enable( true );
                        }
                        else
                        {
                           @Html.Kendo().NumericTextBoxFor( model => model.MarkValHse ).Format( "00.000" ).Enable( false );
                        }
                    
                </td>
                <td></td>
            </tr>
       <tr>
           <td>

               @LabelHelper.Label( "MarkBorrow" )

               @if ( bool.Parse( DataSystemValues.LoadSystemValue( "AllowContraEntityEdit", "false" ) ) )
               {                  
                  @Html.TextBoxFor( model => model.BorrowColl, new { @class = "k-textbox", @style = "width:100%;" } );
               }
               else
               {
                   @Html.TextBoxFor( model => model.BorrowColl, new { @class = "k-textbox", @style = "width:100%;", @readonly = "readonly" } );
               }
           </td>
           <td>
               @LabelHelper.Label( "MarkIdBorrow" )
               @if ( bool.Parse( DataSystemValues.LoadSystemValue( "AllowContraEntityEdit", "false" ) ) )
               {                 
                    @Html.TextBoxFor( model => model.BorrowMarkCode, new { @class = "k-textbox", @style = "width:30px;" } );
               }
               else
               {
                @Html.TextBoxFor( model => model.BorrowMarkCode, new { @class = "k-textbox", @style = "width:30px;", @readonly = "readonly" } );
               }
           </td>
           <td>

               @LabelHelper.Label( "MarkLoan" )

               @if ( bool.Parse( DataSystemValues.LoadSystemValue( "AllowContraEntityEdit", "false" ) ) )
               {
                   @Html.TextBoxFor( model => model.LoanColl, new { @class = "k-textbox", @style = "width:100%;" } );
               }
               else
               {
                   @Html.TextBoxFor( model => model.LoanColl, new { @class = "k-textbox", @style = "width:100%;", @readonly = "readonly" } );
               }
           </td>
           <td>
               @LabelHelper.Label( "MarkIdLoan" )
               @if ( bool.Parse( DataSystemValues.LoadSystemValue( "AllowContraEntityEdit", "false" ) ) )
               {
                   @Html.TextBoxFor( model => model.LoanMarkCode, new { @class = "k-textbox", @style = "width:30px;" } );
               }
               else
               {
                   @Html.TextBoxFor( model => model.LoanMarkCode, new { @class = "k-textbox", @style = "width:30px;", @readonly = "readonly" } );
               }
           </td>
       </tr>

            @if ( bool.Parse( DataSystemValues.LoadSystemValue( "AllowContraEntityEdit", "false" ) ) )
            {
                 <tr>
                <td>@LabelHelper.Label("StockBorrowLoanLimits")</td>
            </tr>
       <tr>
           <td>

               @LabelHelper.Label( "BorrowAmount" )

               @if ( bool.Parse( DataSystemValues.LoadSystemValue( "AllowContraEntityEdit", "false" ) ) )
               {
                   @Html.Kendo().NumericTextBoxFor( model => model.BorrowLmt ).Format( "#,##0.00" ).Enable( true );
               }
               else
               {
                   @Html.Kendo().NumericTextBoxFor( model => model.BorrowLmt ).Format( "#,##0.00" ).Enable( false );
               }
           </td>
           <td></td>
           <td>

               @LabelHelper.Label( "LoanAmount" )

               @if ( bool.Parse( DataSystemValues.LoadSystemValue( "AllowContraEntityEdit", "false" ) ) )
               {
                   @Html.Kendo().NumericTextBoxFor( model => model.LoanLmt ).Format( "#,##0.00" ).Enable( true );
               }
               else
               {
                   @Html.Kendo().NumericTextBoxFor( model => model.LoanLmt ).Format( "#,##0.00" ).Enable( false );
               }

           </td>
           <td></td>
       </tr>
            }
       <tr></tr>
       @if ( bool.Parse( DataSystemValues.LoadSystemValue( "AllowContraEntityEdit", "false" ) ) )
       {       
           <tr>
               <td colspan="4">
                   <label id="StatusLabel" class="label-status"></label>
               </td>
           </tr>
           <tr>
               <td colspan="4" style="text-align:right">
                   <a href="#" onclick="onTradeSavePost()" class="k-button">@LabelHelper.Text( "PostContraEntityChange" )</a>
               </td>
           </tr>
       }
    </table>
    
    @Html.HiddenFor( x => x.SLContraEntity );
    @Html.HiddenFor( x => x.EntityId );
}
</div>