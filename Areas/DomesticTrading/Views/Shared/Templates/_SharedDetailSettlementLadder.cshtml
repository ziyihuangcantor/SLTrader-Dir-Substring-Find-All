@using System.ComponentModel
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Enums
@using SLTrader.Tools
@using SLTrader.Models
@using BondFire.Entities.Projections

@model  PartialViewModel
<style scoped>
    #SharedSettlementLadderButton.zeroclipboard-is-hover {
        background-color: #1ba1e2;
    }
</style>
<script type="text/javascript">
    var _originalSharedSettlementLadderGrid = null;

    $(document).ready(function () {
        setTimeout(function () {
            _originalSharedSettlementLadderGrid = $('#SharedDetailSettlementLadderGrid').data('kendoGrid').getOptions();

            LoadGridLayout("#SharedDetailSettlementLadderGrid");

            $(".k-grid-toolbar", "#SharedDetailSettlementLadderGrid").prepend("<label style=\"font-weight:bold;\">Security: [@Model.SecurityNumber] @Model.Ticker For @Model.EffectiveDate.ToString("yyyy-MM-dd")</label>");
            $('#SharedDetailSettlementLadderGrid').data('kendoGrid').dataSource.read();
        }, 3);


        var clientEvent1 = new ZeroClipboard(document.getElementById("SharedSettlementLadderButton"));

        clientEvent1.on("ready", function (readyEvent) {
            clientEvent1.on("copy", function (event) {
                var data1 = KendoGridToText("#SharedDetailSettlementLadderGrid", "SharedDetailSettlementLadderGrid", false);
                clientEvent1.setText(data1);
            });
        });
    });

    function onSharedSettlementLadderLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#SharedDetailSettlementLadderGrid");
        }, 5);
    }

    function onSharedSettlementLadderCheckData() {
        CheckGridData('#SharedDetailSettlementLadderGrid');
    }

    function onSharedSettlementLadderAdditionalData(e) {
        return {
            entityId: '@Model.EntityId',
            effectiveDate: '@Model.EffectiveDate',
            issueId: '@Model.IssueId'
        };
    }

    function onSharedSettlementLadderContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#SharedDetailSettlementLadderGrid");
                break;


            case 'Unsort':
                onSharedSettlementLadderUnsortGrid("#SharedDetailSettlementLadderGrid");
                break;

            case 'Select All':
                onSharedSettlementLadderSelectAll(true);
                break;

            case "Reset Filter":
                ResetFilter("#SharedDetailSettlementLadderGrid");
                break;


            case 'Reset Grid':
                ResetUserLayout("#SharedDetailSettlementLadderGrid");
                $('#SharedDetailSettlementLadderGrid').data('kendoGrid').setOptions(_originalSharedSettlementLadderGrid);
                $(".k-grid-toolbar", "#SharedDetailSettlementLadderGrid").prepend("<label style=\"font-weight:bold;\">Security: [@Model.SecurityNumber] @Model.Ticker For @Model.EffectiveDate.ToString("yyyy-MM-dd")</label>");
                $('#SharedDetailSettlementLadderGrid').data('kendoGrid').dataSource.read();
                break;

            case 'Export To Excel':
                exportToSharedSettlementLadderExcel();
                break;
        }
    }

    function onSharedSettlementLadderSelectAll(e) {
        try {
            var recallGrid = $("#SharedDetailSettlementLadderGrid").data("kendoGrid");
            recallGrid.select(recallGrid.tbody.find(">tr"));
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onSharedSettlementLadderUnsortGrid(e) {
        UnsortGrid(e);
    }

    function exportToSharedSettlementLadderExcel() {
        KendoGridToCSVConvertor("#SharedDetailSettlementLadderGrid", 'SharedDetailSettlementLadderGrid');
    }
</script>


<div id="SharedDetailSettlementLadderDiv" class="grid-div">

    @(
 Html.Kendo().Grid<SL_SettlementLadderExtendedProjection>()
    .Name("SharedDetailSettlementLadderGrid")
               .Navigatable()
            .Scrollable()
            .Sortable()
            .AutoBind(false)
                 .ToolBar(t =>
                 {
                     t.Template("<label></label>");
                 })
                        .Editable(x => x.Enabled(false))
                        .HtmlAttributes(new { @class = "grid" })
                        .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple))
                        .Filterable()
                        .NoRecords()
                        .Events(events =>
                        {
                            events.DataBound("onSharedSettlementLadderCheckData");
                            events.ColumnHide("onSharedSettlementLadderLayoutChange");
                            events.ColumnShow("onSharedSettlementLadderLayoutChange");
                            events.ColumnResize("onSharedSettlementLadderLayoutChange");
                            events.ColumnReorder("onSharedSettlementLadderLayoutChange");
                        })
                        .Resizable(resize => resize.Columns(true))
                        .ColumnMenu(columnMenu =>
                        {
                            columnMenu.Columns(true);
                            columnMenu.Sortable(true);
                            columnMenu.Filterable(true);
                            columnMenu.ComponentType( "modern" );
                        } )
                        .Reorderable(reorder =>
                        {
                            reorder.Columns(true);
                        })
                        .Navigatable()
    .Columns(cols =>
    {
        cols.Bound(x => x.EffectiveDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "").Hidden(true);
        cols.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        cols.Bound(x => x.SettlementDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
        cols.Bound(x => x.NetPosition).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(NetPosition)#", "");
        cols.Bound(x => x.ExcessPosition).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(ExcessPosition)#", "");
        cols.Bound(x => x.FirmLongPosition).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(FirmLongPosition)#", "");
        cols.Bound(x => x.FirmShortPosition).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(FirmShortPosition)#", "");
        cols.Bound(x => x.CustomerLongPosition).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(CustomerLongPosition)#", "");
        cols.Bound(x => x.CustomerShortPosition).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(CustomerShortPosition)#", "");
        cols.Bound(x => x.CnsFailToDeliverPosition).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(CnsFailToDeliverPosition)#", "");
        cols.Bound(x => x.DvpFailToDeliverPosition).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(DvpFailToDeliverPosition)#", "");
        cols.Bound(x => x.BrokerFailToDeliverPosition).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(BrokerFailToDeliverPosition)#", "");
        cols.Bound(x => x.CnsFailToRecievePosition).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(CnsFailToRecievePosition)#", "");
        cols.Bound(x => x.DvpFailToRecievePosition).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(DvpFailToRecievePosition)#", "");
        cols.Bound(x => x.BrokerFailToRecievePosition).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(BrokerFailToRecievePosition)#", "");
        cols.Bound(x => x.StockBorrowPosition).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(StockBorrowPosition)#", "");
        cols.Bound(x => x.StockLoanPosition).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(StockLoanPosition)#", "");
        cols.Bound(x => x.SuggestionBorrow).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(SuggestionBorrow)#", "");
        cols.Bound(x => x.SuggestionLoan).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(SuggestionLoan)#", "");
        cols.Bound(x => x.SuggestionReturn).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(SuggestionReturn)#", "");
        cols.Bound(x => x.SuggestionRecall).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(SuggestionRecall)#", "");
    })
       .DataSource(ds =>
       {
           ds.Ajax()
               .ServerOperation(false)
               .Read(read =>
               {
                   read.Action("Read_SettlementLadderByIssue", "Main", new { area = "DomesticTrading" }).Data("onSharedSettlementLadderAdditionalData");
               });
       }))
</div>
@(Html.Kendo().ContextMenu()
.Name("SharedSettlementLadderContextMenu")
            .Target("#SharedDetailSettlementLadderGrid")
        .Events(events => events.Select("onSharedSettlementLadderContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
        items.Add().Separator(true);
        items.Add().Text("Select All").Enabled(true);
        items.Add().Text("Copy").Enabled(true).HtmlAttributes(new { ID = "SharedSettlementLadderButton" });
        items.Add().Text("Export To Excel").Enabled(true);
    })
)