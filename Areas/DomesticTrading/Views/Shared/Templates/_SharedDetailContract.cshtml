@using System.ComponentModel
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Enums
@using SLTrader.Tools
@using SLTrader.Models
@using BondFire.Entities.Projections

@model PartialViewModel

<style scoped>
     #SharedContractButton.zeroclipboard-is-hover {
        background-color: #1ba1e2;
    }
</style>
<script type="text/javascript">
    var _originalSharedContractGrid = null;

    $(document).ready(function () {
        setTimeout(function () {
            _originalSharedContractGrid = $('#SharedDetailContractGrid').data('kendoGrid').getOptions();

            LoadGridLayout("#SharedDetailContractGrid");

            $(".k-grid-toolbar", "#SharedDetailContractGrid").append("<label style=\"font-weight:bold;\">Security: [@Model.SecurityNumber] @Model.Ticker For @Model.EffectiveDate.ToString("yyyy-MM-dd")</label>");
            $('#SharedDetailContractGrid').data('kendoGrid').dataSource.read();
        }, 3);

        var clientEvent1 = new ZeroClipboard(document.getElementById("SharedContractButton"));

        clientEvent1.on("ready", function (readyEvent) {
            clientEvent1.on("copy", function (event) {
                var data1 = KendoGridToText("#SharedDetailContractGrid", "SharedDetailContractGrid", false);
                clientEvent1.setText(data1);
            });
        });
    });

    function onSharedContractLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#SharedDetailContractGrid");
        }, 5);
    }

    var hiddenColumns = true;

    function onSharedContractCheckData() {
        CheckGridData('#SharedDetailContractGrid');
    }

    function onError(e) {
        console.log(e.message);
    }

    function toggleSharedContractColumns() {
        var entityGrid = $("#SharedDetailContractGrid").data("kendoGrid");

        if (hiddenColumns) {
            entityGrid.hideColumn("QuantityDelta");
            entityGrid.hideColumn("AmountDelta");

            entityGrid.showColumn("CurrencyCode");
            entityGrid.showColumn("SecuritySettleDate");
            entityGrid.showColumn("QuantityOnRecall");

            hiddenColumns = false;

        } else {
            entityGrid.showColumn("QuantityDelta");
            entityGrid.showColumn("AmountDelta");

            entityGrid.hideColumn("CurrencyCode");
            entityGrid.hideColumn("SecuritySettleDate");
            entityGrid.hideColumn("QuantityOnRecall");

            hiddenColumns = true;
        }
    }

    function onSharedReturnContractSelected(e) {
        if (e) {
            var dataItems = [];

            var grid = $('#SharedDetailContractGrid').data('kendoGrid');
            var rows = grid.select();

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });

            HelperPartialWindow(
                 JSON.stringify({
                     items: dataItems
                 }),
                'Book Returns',
                1100,
                450,
                '/DomesticTrading/ContractRelated/Load_ReturnByContract'
                );
        }
    }

    function onSharedActivityContractSelected(e) {
        if (e) {
            var entityGrid = $("#SharedDetailContractGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());


            HelperPartialWindow(
                  JSON.stringify(selectedItem),
                'Activity',
                1100,
                450,
                '/DomesticTrading/Activity/LoadActivityByContract'
                );
        }
    }

    function onSharedProfitIdContractSelected(e) {
        if (e) {
            var dataItems = [];

            var grid = $('#SharedDetailContractGrid').data('kendoGrid');
            var rows = grid.select();

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });

            HelperPartialWindow(
                  JSON.stringify(dataItems),
                'Profit ID Change',
                1100,
                450,
                '/DomesticTrading/ContractRelated/Load_ProfitCenterByContract'
                );
        }
    }

    function onSharedContractRowChange(e) {

        try {
            var entityGrid = $("#SharedDetailContractGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            var entityId = selectedItem["EntityId"];
            var effectiveDate = selectedItem["EffectiveDate"];
            var securityNumber = selectedItem["SecurityNumber"];
            var issueId = selectedItem["IssueId"];

            SidePanelUpdate(effectiveDate, entityId, issueId, securityNumber);


            if (selectedItem["TradeType"] == '@Convert.ToInt32(TradeType.StockBorrow)') {
                EnableContextMenuItem("#SharedContractContextMenu", "Return", true);
                EnableContextMenuItem("#SharedContractContextMenu", "Recall", false);
            }
            else if (selectedItem["TradeType"] == '@Convert.ToInt32(TradeType.StockLoan)') {
                EnableContextMenuItem("#SharedContractContextMenu", "Return", false);
                EnableContextMenuItem("#SharedContractContextMenu", "Recall", true);
            }
        }
        catch (e) {
            console.log(e.message);
            console.log(e.message);
        }
    }


    function onSharedRecallContractSelected(e) {

        if (e) {
            var dataItems = [];

            var grid = $('#SharedDetailContractGrid').data('kendoGrid');
            var rows = grid.select();

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });

            HelperPartialWindow(
                  JSON.stringify(dataItems),
                'Book Recalls',
                1100,
                450,
                '/DomesticTrading/ContractRelated/Load_RecallByContract'
                );
        }
    }

    function onSharedContractAdditionalData(e) {
        return {
            entityId: '@Model.EntityId',
            effectiveDate: '@Model.EffectiveDate',
            issueId: '@Model.IssueId'
        };
    }

    function onSharedRateChangeContractSelected(e) {
        if (e) {
            var dataItems = [];

            var grid = $('#SharedDetailContractGrid').data('kendoGrid');
            var rows = grid.select();

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });

            HelperPartialWindow(
              JSON.stringify(dataItems),
             'Rate Change Contracts',
             1200,
             450,
             '/DomesticTrading/ContractRelated/Load_RateChangeByContract'
         );
        }
    }

    function onSharedContractContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'Return':
                onSharedReturnContractSelected(true);
                break;

            case 'Recall':
                onSharedRecallContractSelected(true);
                break;

            case 'Rate Change':
                onSharedRateChangeContractSelected(true);
                break;

            case 'Profit ID Chg':
                onSharedProfitIdContractSelected(true);
                break;

            case 'Activity':
                onSharedActivityContractSelected(true);
                break;

            case 'Deltas':
                toggleSharedContractColumns();
                break;

            case 'AutoFit Columns':
                resizeGridColumns("#SharedDetailContractGrid");
                break;

            case 'Unsort':
                onSharedContractUnsortGrid("#SharedDetailContractGrid");
                break;

            case 'Select All':
                onSharedContractSelectAll(true);
                break;

            case "Reset Filter":
                ResetFilter("#SharedDetailContractGrid");
                break;


            case 'Reset Grid':
                ResetUserLayout("#SharedDetailContractGrid");
                $('#SharedDetailContractGrid').data('kendoGrid').setOptions(_originalSharedContractGrid);
                $(".k-grid-toolbar", "#SharedDetailContractGrid").append("<label style=\"font-weight:bold;\">Security: [@Model.SecurityNumber] @Model.Ticker For @Model.EffectiveDate.ToString("yyyy-MM-dd")</label>");
                $('#SharedDetailContractGrid').data('kendoGrid').dataSource.read();
                break;

            case 'Export To Excel':
                exportToSharedContractExcel();
                break;
        }
    }
    function onSharedContractSelectAll(e) {
        try {
            var recallGrid = $("#SharedDetailContractGrid").data("kendoGrid");
            recallGrid.select(recallGrid.tbody.find(">tr"));
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onSharedContractUnsortGrid(e) {
        UnsortGrid(e);
    }

    function exportToSharedContractExcel() {
        KendoGridToCSVConvertor("#SharedDetailContractGrid", 'SharedDetailContractGrid');
    }
</script>

<div id="SharedDetailContractDiv" class="grid-div">
    @(Html.Kendo().Grid<SL_ContractExtendedProjection>()
          .Name("SharedDetailContractGrid")
             .Navigatable()
            .Scrollable()
            .Sortable()
            .AutoBind(false)
                 .ToolBar(t =>
                 {
                     t.Template("<label></label>");
                 })
                        .Editable(x => x.Enabled(false))
                        .HtmlAttributes(new { @class = "grid" })
                        .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple))
                        .Filterable()
                        .NoRecords()
                        .Events(events =>
                        {
                            events.DataBound("onSharedContractCheckData");
                            events.ColumnHide("onSharedContractLayoutChange");
                            events.ColumnShow("onSharedContractLayoutChange");
                            events.ColumnResize("onSharedContractLayoutChange");
                            events.ColumnReorder("onSharedContractLayoutChange");
                        })
                        .Resizable(resize => resize.Columns(true))
                        .ColumnMenu(columnMenu =>
                        {
                            columnMenu.Columns(true);
                            columnMenu.Sortable(true);
                            columnMenu.Filterable(true);
                            columnMenu.ComponentType( "modern" );
                        } )
                        .Reorderable(reorder =>
                        {
                            reorder.Columns(true);
                        })
                        .Navigatable()
          .Columns(columns =>
          {
              columns.Bound(x => x.EffectiveDate).Hidden(true).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
              columns.Bound(x => x.SLContract).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
              columns.Bound(x => x.EntityId).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.ClearingId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.ContraEntity).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.AccountName).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
              columns.Bound(x => x.ContractNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(p => p.TradeType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.Classification).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.RecordDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "").Hidden(true);
              columns.Bound(x => x.MktPrice).GetColumnFormat(ColumnTypeEnum.Money, false, "", "").Hidden();
              columns.Bound(x => x.CollateralPrice).GetColumnFormat(ColumnTypeEnum.Rate, false, "", "").Hidden();
              columns.Bound(x => x.IssueId).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.QuantityCallback).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(QuantityCallback)#", "").Hidden(true);
              columns.Bound(x => x.QuantityDelta).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDeltaDirection(QuantityDelta)#", "").Hidden(true);
              columns.Bound(x => x.QuantityFullSettled).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(QuantityFullSettled)#", "").Hidden(true);
              columns.Bound(x => x.QuantityStartOfDay).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(QuantityStartOfDay)#", "").Hidden(true);
              columns.Bound(x => x.Quantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(Quantity)#", "");
              columns.Bound(x => x.QuantityOnRecallStartOfDay).GetColumnFormat(ColumnTypeEnum.Position, false, "", "");
              columns.Bound(x => x.QuantityOnRecallOpen).GetColumnFormat(ColumnTypeEnum.Position, false, "", "");
              columns.Bound(x => x.RecallDueDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
              columns.Bound(x => x.AmountFullSettled).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(AmountFullSettled)#", "").Hidden(true);
              columns.Bound(x => x.AmountDelta).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDeltaDirection(AmountDelta)#", "").Hidden(true);
              columns.Bound(x => x.Amount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(Amount)#", "");
              columns.Bound(x => x.AmountStartOfDay).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(AmountStartOfDay)#", "").Hidden(true);
              columns.Bound(x => x.ExcessNetExposureAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(ExcessNetExposureAmount)#", "").Hidden(true);
              columns.Bound(x => x.DepositoryStatus).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
              columns.Bound(x => x.CollateralFlag).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.ProfitId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.RebateRate).GetColumnFormat(ColumnTypeEnum.Rate, true, "#=GetRateDirection(RebateRate)#", "");
              columns.Bound(x => x.RebateRateId).Hidden(true);
              columns.Bound(x => x.Mark).GetColumnFormat(ColumnTypeEnum.Margin, false, "#=GetRateDirection(Mark)#", "");
              columns.Bound(x => x.MarkParameterId).Hidden(true);
              columns.Bound(x => x.CostOfFunds).GetColumnFormat(ColumnTypeEnum.Margin, false, "#=GetRateDirection(CostOfFunds)#", "");
              columns.Bound(x => x.FeeType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.FeeOffset).GetColumnFormat(ColumnTypeEnum.Rate, true, "#=GetRateDirection(FeeOffset)#", "");
              columns.Bound(x => x.CashSettleDate).Hidden(true).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
              columns.Bound(x => x.SecuritySettleDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
              columns.Bound( x => x.TermDate ).GetColumnFormat( ColumnTypeEnum.Date, false, "", "" );
              columns.Bound(x => x.TradeDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
              columns.Bound(x => x.CurrencyCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.Comment).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.BookRebateRateIntraday).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(BookRebateRateIntraday)#", "");
              columns.Bound(x => x.BookRebateRateEndOfDay).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(BookRebateRateEndOfDay)#", "");
              columns.Bound(x => x.DividendRate).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.DividendCallable).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.SecurityLoc).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.CashLoc).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
              columns.Bound(x => x.ActivityItemCount).GetColumnFormat(ColumnTypeEnum.Position, false, "# if (ActivityItemCount > 0) { #<i class='fa fa-bars' style='color:green;'></i># }# ", "").Title("").HtmlAttributes(new { title = "Actions - #= ActivityItemCount # " }).Filterable(false);
              columns.Bound(X => X.ContractFlag).GetColumnFormat(ColumnTypeEnum.String, false, "# if (ContractFlag == 'Pending') { #<i class='fa  fa-info-circle' style='color:blue;'></i># } else if (ContractFlag == 'Success') { #<i class='fa  fa-exclamation-circle' style='color:green;'></i># } else if (ContractFlag != ''){ #<i class='fa  fa-exclamation-triangle' style='color:red;'></i># } #", "").Title("").HtmlAttributes(new { title = "Status - #= ContractFlag # " }).Filterable(false);
              columns.Bound(x => x.IncomeAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(IncomeAmount)#", "");
              columns.Bound(x => x.Spread).GetColumnFormat(ColumnTypeEnum.Money, false, "#=GetRateDirection(Spread)#", "");
              columns.Bound(x => x.DateTimeId).GetColumnFormat(ColumnTypeEnum.Time, false, "", "");
          })
          .DataSource(dataSource => dataSource
              .Ajax()
              .Sort(sort => sort.Add(x => x.TradeType).Order(ListSortDirection.Descending))
                       .Read(read =>
                       {
                           read.Action("Read_ContractByIssue", "Main", new { area = "DomesticTrading" }).Data("onSharedContractAdditionalData");
                       })
              .ServerOperation(false)
              .Aggregates(s =>
              {
                  s.Add(x => x.QuantityCallback).Sum();
                  s.Add(x => x.QuantityFullSettled).Sum();
                  s.Add(x => x.QuantityDelta).Sum();
                  s.Add(x => x.Quantity).Sum();
                  s.Add(x => x.QuantityStartOfDay).Sum();
                  s.Add(x => x.AmountFullSettled).Sum();
                  s.Add(x => x.AmountDelta).Sum();
                  s.Add(x => x.Amount).Sum();
                  s.Add(x => x.AmountStartOfDay).Sum();
                  s.Add(x => x.IncomeAmount).Sum();
                  s.Add(x => x.ExcessNetExposureAmount).Sum();
                  s.Add(x => x.RebateRate).Average();
              })))
 </div>

@(
 Html.Kendo().ContextMenu()
    .Name("SharedContractContextMenu")
        .Target("#SharedDetailContractGrid")
    .Events(events => events.Select("onSharedContractContextMenuSelect"))
.Items(items =>
{
    items.Add().Text("Return").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLContract));
    items.Add().Text("Recall").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLContract));
    items.Add().Text("Rate Change").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLContract));
    items.Add().Text("Profit ID Chg").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLContract));
    items.Add().Text("Activity").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLContract));
    items.Add().Text("Deltas").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLContract));
    items.Add().Separator(true);
    items.Add().Text("AutoFit Columns");
    items.Add().Text("Unsort").Enabled(true);
    items.Add().Text("Reset Filter").Enabled(true);
    items.Add().Text("Reset Grid").Enabled(true);
    items.Add().Separator(true);
    items.Add().Text("Select All").Enabled(true);
    items.Add().Text("Copy").Enabled(true).HtmlAttributes(new { ID = "SharedContractButton" });
    items.Add().Text("Export To Excel").Enabled(true);
})
)
