@using System.ComponentModel
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Enums
@using SLTrader.Tools
@using SLTrader.Models
@using BondFire.Entities.Projections

@model PartialViewModel

<style scoped>
     #SharedFailHistoryButton.zeroclipboard-is-hover {
        background-color: #1ba1e2;
    }
</style>
<script type="text/javascript">
    var _originalSharedFailHistoryGrid = null;

    $(document).ready(function () {
        setTimeout(function () {
            _originalSharedFailHistoryGrid = $('#SharedDetailFailHistoryGrid').data('kendoGrid').getOptions();

            LoadGridLayout("#SharedDetailFailHistoryGrid");

            $(".k-grid-toolbar", "#SharedDetailFailHistoryGrid").append("<label style=\"font-weight:bold;\">Security: [@Model.SecurityNumber] @Model.Ticker For @Model.EffectiveDate.ToString("yyyy-MM-dd")</label>");
            $('#SharedDetailFailHistoryGrid').data('kendoGrid').dataSource.read();
        }, 3);

        var clientEvent1 = new ZeroClipboard(document.getElementById("SharedFailHistoryButton"));

        clientEvent1.on("ready", function (readyEvent) {
            clientEvent1.on("copy", function (event) {
                var data1 = KendoGridToText("#SharedDetailFailHistoryGrid", "SharedDetailFailHistoryGrid", false);
                clientEvent1.setText(data1);
            });
        });
    });

    function onSharedFailHistoryLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#SharedDetailFailHistoryGrid");
        }, 5);
    }

    var hiddenColumns = true;

    function onSharedFailHistoryCheckData() {
        CheckGridData('#SharedDetailFailHistoryGrid');
    }

    function onError(e) {
        console.log(e.message);
    }

    function onSharedFailHistoryAdditionalData(e) {
        return {
            entityId: '@Model.EntityId',
            effectiveDate: '@Model.EffectiveDate',
            issueId: '@Model.IssueId'
        };
    }

 
    function onSharedFailHistoryContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#SharedDetailFailHistoryGrid");
                break;

            case 'Unsort':
                onSharedFailHistoryUnsortGrid("#SharedDetailFailHistoryGrid");
                break;

            case 'Select All':
                onSharedFailHistorySelectAll(true);
                break;

            case "Reset Filter":
                ResetFilter("#SharedDetailFailHistoryGrid");
                break;


            case 'Reset Grid':
                ResetUserLayout("#SharedDetailFailHistoryGrid");
                $('#SharedDetailFailHistoryGrid').data('kendoGrid').setOptions(_originalSharedFailHistoryGrid);
                $(".k-grid-toolbar", "#SharedDetailFailHistoryGrid").append("<label style=\"font-weight:bold;\">Security: [@Model.SecurityNumber] @Model.Ticker For @Model.EffectiveDate.ToString("yyyy-MM-dd")</label>");
                $('#SharedDetailFailHistoryGrid').data('kendoGrid').dataSource.read();
                break;

            case 'Export To Excel':
                exportToSharedFailHistoryExcel();
                break;
        }
    }

    function onSharedFailHistorySelectAll(e) {
        try {
            var failHistoryGrid = $("#SharedDetailFailHistoryGrid").data("kendoGrid");
            failHistoryGrid.select(failHistoryGrid.tbody.find(">tr"));
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onSharedFailHistoryUnsortGrid(e) {
        UnsortGrid(e);
    }

    function exportToSharedFailHistoryExcel() {
        KendoGridToCSVConvertor("#SharedDetailFailHistoryGrid", 'SharedDetailFailHistoryGrid');
    }
</script>

<div id="SharedDetailContractDiv" class="grid-div">
    @(Html.Kendo().Grid<SL_BoxCalculationFailProjection>()
          .Name("SharedDetailFailHistoryGrid")
             .Navigatable()
            .Scrollable()
            .Sortable()
            .AutoBind(false)
                 .ToolBar(t =>
                 {
                     t.Template("<label></label>");
                 })
                        .Editable(x => x.Enabled(false))
                        .HtmlAttributes(new { @class = "grid" })
                        .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple))
                        .Filterable()
                        .NoRecords()
                        .Events(events =>
                        {
                            events.DataBound("onSharedFailHistoryCheckData");
                            events.ColumnHide("onSharedFailHistoryLayoutChange");
                            events.ColumnShow( "onSharedFailHistoryLayoutChange" );
                            events.ColumnResize( "onSharedFailHistoryLayoutChange" );
                            events.ColumnReorder( "onSharedFailHistoryLayoutChange" );
                        })
                        .Resizable(resize => resize.Columns(true))
                        .ColumnMenu(columnMenu =>
                        {
                            columnMenu.Columns(true);
                            columnMenu.Sortable(true);
                            columnMenu.Filterable(true);
                            columnMenu.ComponentType( "modern" );
                        } )
                        .Reorderable(reorder =>
                        {
                            reorder.Columns(true);
                        })
                        .Navigatable()
          .Columns(columns =>
          {
              columns.Bound(x => x.EffectiveDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");

              columns.Bound( x => x.CnsFailToDeliverPositionSettled ).GetColumnFormat( ColumnTypeEnum.Position, false, "#=GetPositionDirection(CnsFailToDeliverPositionSettled)#", "" );
              columns.Bound( x => x.CnsFailToDeliverPositionSettledDayCount ).GetColumnFormat( ColumnTypeEnum.Position, false, "#=GetPositionDirection(CnsFailToDeliverPositionSettledDayCount)#", "" );
              columns.Bound( x => x.CnsFailToRecievePositionSettled ).GetColumnFormat( ColumnTypeEnum.Position, false, "#=GetPositionDirection(CnsFailToRecievePositionSettled)#", "" );
              columns.Bound( x => x.CnsFailToRecievePositionSettledDayCount ).GetColumnFormat( ColumnTypeEnum.Position, false, "#=GetPositionDirection(CnsFailToRecievePositionSettledDayCount)#", "" );


              columns.Bound( x => x.DvpFailToDeliverPositionSettled ).GetColumnFormat( ColumnTypeEnum.Position, false, "#=GetPositionDirection(DvpFailToDeliverPositionSettled)#", "" );
              columns.Bound( x => x.DvpFailToDeliverPositionSettledDayCount ).GetColumnFormat( ColumnTypeEnum.Position, false, "#=GetPositionDirection(DvpFailToDeliverPositionSettledDayCount)#", "" );
              columns.Bound( x => x.DvpFailToRecievePositionSettled ).GetColumnFormat( ColumnTypeEnum.Position, false, "#=GetPositionDirection(DvpFailToRecievePositionSettled)#", "" );
              columns.Bound( x => x.DvpFailToRecievePositionSettledDayCount ).GetColumnFormat( ColumnTypeEnum.Position, false, "#=GetPositionDirection(DvpFailToRecievePositionSettledDayCount)#", "" );

              columns.Bound( x => x.BrokerFailToDeliverPositionSettled ).GetColumnFormat( ColumnTypeEnum.Position, false, "#=GetPositionDirection(BrokerFailToDeliverPositionSettled)#", "" );
              columns.Bound( x => x.BrokerFailToDeliverPositionSettledDayCount ).GetColumnFormat( ColumnTypeEnum.Position, false, "#=GetPositionDirection(BrokerFailToDeliverPositionSettledDayCount)#", "" );
              columns.Bound( x => x.BrokerFailToRecievePositionSettled ).GetColumnFormat( ColumnTypeEnum.Position, false, "#=GetPositionDirection(BrokerFailToRecievePositionSettled)#", "" );
              columns.Bound( x => x.BrokerFailToRecievePositionSettledDayCount ).GetColumnFormat( ColumnTypeEnum.Position, false, "#=GetPositionDirection(BrokerFailToRecievePositionSettledDayCount)#", "" );

          })
          .DataSource(dataSource => dataSource
              .Ajax()
              .Read(read =>
              {
                  read.Action("Read_FailHistoryByIssue", "Main", new { area = "DomesticTrading" }).Data("onSharedFailHistoryAdditionalData");
              })
              .ServerOperation(false)))
 </div>

@(
 Html.Kendo().ContextMenu()
    .Name("SharedFailHistoryContextMenu")
        .Target("#SharedDetailFailHistoryGrid")
    .Events(events => events.Select("onSharedFailHistoryContextMenuSelect"))
.Items(items =>
{
    items.Add().Text("AutoFit Columns");
    items.Add().Text("Unsort").Enabled(true);
    items.Add().Text("Reset Filter").Enabled(true);
    items.Add().Text("Reset Grid").Enabled(true);
    items.Add().Separator(true);
    items.Add().Text("Select All").Enabled(true);
    items.Add().Text( "Copy" ).Enabled( true ).HtmlAttributes( new { ID = "SharedFailHistoryButton" } );
    items.Add().Text("Export To Excel").Enabled(true);
})
)
