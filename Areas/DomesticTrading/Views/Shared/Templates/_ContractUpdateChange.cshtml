@using System.ComponentModel
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Enums
@using SLTrader.Tools
@using SLTrader.Models
@using BondFire.Entities.Projections
@using SLTrader.Models.ContractRelatedModels

@model IEnumerable<ContractUpdateModel>


<style scoped>

    #ContractUpdateGrid {
        border-collapse: collapse;
        margin: 0;
    }

    #ContractUpdateSingleChangeDiv {
        border-collapse: collapse;
        width: 100%;
    }

    #ContractUpdateSingleChangeDiv td .k-checkbox-label {
    }

    #ContractUpdateSingleChangeDiv td,
    #ContractUpdateSingleChangeDiv th {
        min-height: 50px;
        padding: 5px 0px 0px 5px;
    }

    #ProgressSingleLabel {
        width: 100%;
        font-style: normal;
        white-space: pre-wrap;
        border: 1px solid #ccc;
        height: 50px;
    }
</style>


<script type="text/javascript">
    $(document).ready(function () {
        setTimeout(function () {
            if (@Model.Count() > 1) {
                resizeGridColumns("#ContractUpdateGrid");
            }

            $('#LocalDetailWindow').data("kendoWindow").center();
        }, 5);
    });

    $(function() {
        $('#ContractUpdateGrid').on('click', '.chkbx', function() {
            var checked = $(this).is(':checked');
            var grid = $('#ContractUpdateGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));
            grid.select($(this).closest('tr'));

            var entityGrid = $("#ContractUpdateGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            if (selectedItem.SubmissionType != '@Convert.ToInt32(StatusDetail.Approved)') {
                dataItem['Enabled'] = checked;
            }

            var grid = $("#ContractUpdateGrid").data("kendoGrid");
            var data = grid.dataSource.data();

            $("#UpdateContractContractUpdateButton").data("kendoButton").enable(false);

            $.each(data, function (i, row) {
                if (row.Enabled)
                {
                    $("#UpdateContractContractUpdateButton").data("kendoButton").enable(true);
                }
            });
        });
    });

    $(function () {
        $('#ContractUpdateGrid').on('click', '.chkbxIncomeTracked', function () {
            var checked = $(this).is(':checked');
            var grid = $('#ContractUpdateGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));
            grid.select($(this).closest('tr'));

            var entityGrid = $("#ContractUpdateGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            if (selectedItem.SubmissionType != '@Convert.ToInt32(StatusDetail.Approved)') {
                dataItem['NewIncomeTracked'] = checked;
                dataItem['Enabled'] = checked;
                dataItem['SubmissionType'] = '@StatusDetail.HeldLocal';
                dataItem.dirty = true;
                grid.dataSource.sync();
            }
        });
    })

    $(function () {
        $('#ContractUpdateGrid').on('click', '.chkbxCallable', function () {
            var checked = $(this).is(':checked');
            var grid = $('#ContractUpdateGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));
            grid.select($(this).closest('tr'));

            var entityGrid = $("#ContractUpdateGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            if (selectedItem.SubmissionType != '@Convert.ToInt32(StatusDetail.Approved)') {
                dataItem['NewCallable'] = checked;
                dataItem['Enabled'] = checked;
                dataItem['SubmissionType'] = '@StatusDetail.HeldLocal';
                dataItem.dirty = true;
                grid.dataSource.sync();
            }
        });
    })

    

    function onContractUpdateEdit(e) {
        e.container.find("input[name='BatchCode']").attr('maxlength', '1');
        e.container.find("input[name='NewMarkParameterId']").attr('maxlength', '1');

        var entityGrid = $("#ContractUpdateGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        if (selectedItem.SubmissionType == '@Convert.ToInt32(StatusDetail.Approved)') {
            $('#ContractUpdateGrid').data("kendoGrid").closeCell();
        }
        else {
            var input = e.container.find("input");
            setTimeout(function () { input.select(); });
        }
    }

    $(document).bind('keydown', 'alt+s', function (e) {
        if (e.altkey && (e.which == 83)) {

            e.preventDefault();
            onContractUpdateChange();
            return false;
        }
    });

    $(document).bind('keydown', 'alt+e', function (e) {
        if (e.altkey && (e.which == 69)) {
            e.preventDefault();
            onContractUpdateSelectAll();
            return false;
        }
    });


    function onSelectAllContractUpdate() {
        var grid = $('#ContractUpdateGrid').data('kendoGrid');
        var rows = grid.dataSource.data();
        var processedRowCount = 0;

        UpdateContractSelectAllButton
        $("#UpdateContractContractUpdateButton").data("kendoButton").enable(false);

        $('#ProgressLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing items...');

        for (var index = 0; index < rows.length; index++) {
            grid.dataSource.data()[index].Enabled = true;

            processedRowCount = processedRowCount + 1;
        }

        grid.dataSource.sync();

        $("#UpdateContractContractUpdateButton").data("kendoButton").enable(true);

        $('#ProgressLabel').html('Selected ' + processedRowCount + ' items.');
    }

    function onContractUpdateChange() {
        var grid = $('#ContractUpdateGrid').data('kendoGrid');
        var rows = grid.dataSource.data();

        var rowCount = 0;
        var processedRowCount = 0;

        $("#UpdateContractContractUpdateButton").data("kendoButton").enable(false);

        $.each(rows, function (i, row) {
            if (row.Enabled) {

                rowCount++;
            }
        });

        $('#ProgressLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing ' + rowCount + ' items.');
        $("#UpdateContractContractUpdateButton").data("kendoButton").enable(false);

        $.ajax({
            url: "@Url.Action( "ProcessContractUpdates", "ContractRelated", new { area = "DomesticTrading" } )",
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify({ items: rows }),
            success: function(valid) {

                $.each(valid, function (i, obj) {
                    var NewSettlementDate = kendo.parseDate(obj['NewSettlementDate']);
                    var NewTermDate = kendo.parseDate(obj['NewTermDate']);

                    obj['NewSettlementDate'] = NewSettlementDate;
                    obj['NewTermDate'] = NewTermDate;
                });

                grid.dataSource.data(valid);
                grid.refresh();

                var _grid = $("#ContractUpdateGrid").data("kendoGrid");
                var _data = _grid.dataSource.data();

                $("#UpdateContractContractUpdateButton").data("kendoButton").enable(false);

                $.each(_data, function (i, row) {
                  if (row.Enabled) {
                      $("#UpdateContractContractUpdateButton").data("kendoButton").enable(true);

                        processedRowCount++;
                    }
                });

                $('#ProgressLabel').html('Processed ' + processedRowCount + ' out of ' + rowCount + ' items.');

                if (processedRowCount == rowCount) {
                    $('#LocalDetailWindow').data("kendoWindow").close();
                }
            },
            error: function(valid) {
                LogError(valid);
                console.log(valid);
                $('#ProgressLabel').html('<i class="fa fa-times"></i> Error Processing!');
                $("#UpdateContractContractUpdateButton").data("kendoButton").enable(true);
            }
        });
    }

    function getFormData($form) {
        var unindexed_array = $form.serializeArray();
        var indexed_array = {};

        $.map(unindexed_array, function (n, i) {
            indexed_array[n['name']] = n['value'];
        });

        indexed_array['Enabled'] = "true";
        indexed_array['NewCallable'] = $('#NewCallableCheckBox').is(':checked');
        indexed_array['SubmissionType'] = "@Convert.ToInt32(StatusDetail.HeldLocal)";
        return indexed_array;
    }

    function onProcessSingleContractUpdate() {
        var form = $("#my-form");
        var formJSON = getFormData(form);

        $('#ProgressSingleLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing 1 item.');        
        $('#ContractUpdateSingleButton').data("kendoButton").enable(false);


        $.ajax({
            url: "@Url.Action("ProcessContractUpdates", "ContractRelated", new { area = "DomesticTrading" })",
            type: 'POST',
            contentType: 'application/json;',
            data: '[' + JSON.stringify(formJSON) + ']',
            success: function (valid) {
                $('#ContractUpdateSingleButton').data("kendoButton").enable(true);
                $('#LocalDetailWindow').data("kendoWindow").close();
            },
            error: function (valid) {
                $("#ReturnAllButton").data("kendoButton").enable(true);
            }
        });
    }


        function onContractUpdateDataBound(e) {
            try {
                var grid = $("#ContractUpdateGrid").data("kendoGrid");
                var data = grid.dataSource.data();

                $("#ContractUpdateButton").data("kendoButton").enable(false);

                $.each(data, function (i, row) {
                    if (row.Enabled) {
                        $("#ContractUpdateButton").data("kendoButton").enable(true);
                    }
                });
            }
            catch (e) {
                console.log(e.message);
            }
        }

        function onBulkTermDateApply() {
            var grid = $("#ContractUpdateGrid").data("kendoGrid");
            var dataSource = $("#ContractUpdateGrid").data("kendoGrid").dataSource;
            var data = dataSource.data();

            var rowCount = 0;
            var processedRowCount = 0;

            $("#UpdateContractContractUpdateButton").data("kendoButton").enable(false);
            $("#UpdateContractBulkApplyButton").data("kendoButton").enable(false);

            var grid = $('#ContractUpdateGrid').data('kendoGrid');
            var rows = grid.dataSource.data();

            $.each(rows, function (i, row) {
                if (row.Enabled) {
                    rowCount++;
                }
            });

            $('#ProgressLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing ' + rowCount + ' items.');

            var termDatePicker = $("#UpdateContractTermDateCalander").data("kendoDatePicker");
            var termDateValue = kendo.toString(termDatePicker.value(), 'yyyy-MM-dd');

            var totalNumber = dataSource.total();

            try {
                for (var i = 0; i < totalNumber; i++) {
                    var currentDataItem = data[i];

                    if (currentDataItem.Enabled == 1) {

                        currentDataItem.set('NewTermDate', termDateValue);
                        currentDataItem.set('SubmissionType', '@StatusDetail.HeldLocal');
                    }
                }

                var _grid = $("#ContractUpdateGrid").data("kendoGrid");
                var _data = _grid.dataSource.data();

                $("#UpdateContractContractUpdateButton").data("kendoButton").enable(false);
                $("#UpdateContractBulkApplyButton").data("kendoButton").enable(false);


                $.each(_data, function (i, row) {
                    if (row.Enabled) {
                        $("#UpdateContractContractUpdateButton").data("kendoButton").enable(true);
                        $("#UpdateContractBulkApplyButton").data("kendoButton").enable(true);

                        processedRowCount++;
                    }
                });

                $('#ProgressLabel').html('Processed ' + processedRowCount + ' out of ' + rowCount + ' items.');

            }
            catch (e) {
                console.log(e.message);
            }
            $("#UpdateContractContractUpdateButton").data("kendoButton").enable(true);
            $("#UpdateContractBulkApplyButton").data("kendoButton").enable(true);
        }




        $('#NewMarkIdTextBox').on('focus', function () {
            var input = $(this);
            setTimeout(function () { input.select(); });
        });

        $('#NewSettlementDateTextBox').on('focus', function () {
            var input = $(this);
            setTimeout(function () { input.select(); });
        });

        $('#NewTermDateTextBox').on('focus', function () {
            var input = $(this);
            setTimeout(function () { input.select(); });
        });

        $('#NewDivRateNumericBox').on('focus', function () {
            var input = $(this);
            setTimeout(function () { input.select(); });
        });

        $('#NewDivRateNumericBox').on('focus', function () {
            var input = $(this);
            setTimeout(function () { input.select(); });
        });

        $('#NewMarkTextBox').on('focus', function () {
            var input = $(this);
            setTimeout(function () { input.select(); });
        });

        $('#NewCommentTextBox').on('focus', function () {
            var input = $(this);
            setTimeout(function () { input.select(); });
        });

        function onExecutingTypeContractUpdateEditable(dataItem) {            
            return !(dataItem.ExecutingSystem == '@Convert.ToInt32(SL_ExecutionSystemType.GLOBALONE)');
        }
</script>

@if (!Model.Any())
{
    <div style="padding:20px;font-size:small;">
        <h2>No Data Selected / Processed</h2>
    </div>
}
else if (Model.Count() == 1)
{
    using (Html.BeginForm("Action", "ControllerName", FormMethod.Post, new { id = "my-form" }))
    {
        <table id="ContractUpdateSingleChangeDiv">
            <tr>
                <td>@LabelHelper.Label("ContraEntity")</td>
                <td>@Html.Kendo().TextBoxFor(x => x.First().ContraEntity).HtmlAttributes(new { @readonly = "readonly", style = "width:75px;", @class = "k-widget k-textbox" })</td>
                <td style="display:none">@Html.Kendo().CheckBoxFor(x => x.First().Enabled).HtmlAttributes(new { ID = "EnabledCheckBox" }).Checked(true).Label(LabelHelper.Text("Enabled"))</td>     
            </tr>
            <tr>
                <td>@LabelHelper.Label("SecurityNumber")</td>
                <td>@Html.Kendo().TextBoxFor(x => x.First().SecurityNumber  ).HtmlAttributes(new { @readonly = "readonly", style = "width:75px;", @class = "k-widget k-textbox" }) @Html.Kendo().TextBoxFor(x => x.First().Ticker).HtmlAttributes(new { @readonly = "readonly", style = "width:60px;" })</td>
            </tr> 
            <tr>
                <td>@LabelHelper.Label("NewSettlementDate")</td>
                <td>@Html.Kendo().DatePickerFor(x => x.First().NewSettlementDate).HtmlAttributes(new { ID = "NewSettlementDateTextBox", style = "width:85px;" }).Enable((Model.First().ExecutingSystem == SL_ExecutionSystemType.LOANET))</td>
            </tr>
            <tr>
                <td>@LabelHelper.Label("NewTermDate")</td>
                <td>@Html.Kendo().DatePickerFor(x => x.First().NewTermDate).HtmlAttributes(new { ID = "NewTermDateTextBox", style = "width:85px;" }).Enable((Model.First().ExecutingSystem == SL_ExecutionSystemType.LOANET))</td>
            </tr>
            <tr>
                <td>@LabelHelper.Label("NewMark")</td>
                <td>@Html.Kendo().NumericTextBoxFor(x => x.First().NewMark).HtmlAttributes(new { ID = "NewMarkTextBox", style = "width:65px;" }).Spinners(false) @Html.Kendo().TextBoxFor(x => x.First().NewMarkParameterId).HtmlAttributes(new { ID = "NewMarkIdTextBox" ,style = "width:45px;" }).Enable((Model.First().ExecutingSystem == SL_ExecutionSystemType.LOANET))</td>
            </tr>
            <tr>
                <td>@LabelHelper.Label("NewIncomeTrackedCheckBox")</td>
                <td>@Html.Kendo().CheckBoxFor(x => x.First().NewIncomeTracked).HtmlAttributes(new { ID = "NewIncomeTrackedCheckBox" }).Label(" ").Enable((Model.First().ExecutingSystem == SL_ExecutionSystemType.LOANET))</td>
            </tr>
            <tr>
                <td>@LabelHelper.Label("NewDivRate")</td>
                <td>@Html.Kendo().NumericTextBoxFor(x => x.First().NewDivRate).HtmlAttributes(new { ID = "NewDivRateNumericBox",style = "width:65px;" }).Spinners(false).Enable((Model.First().ExecutingSystem == SL_ExecutionSystemType.LOANET))</td>
            </tr>
            <tr>
                <td>@LabelHelper.Label("NewComment")</td>
                <td>@Html.Kendo().TextBoxFor(x => x.First().NewComment).HtmlAttributes(new { ID = "NewCommentTextBox", style = "width:85px;" }).Enable((Model.First().ExecutingSystem == SL_ExecutionSystemType.LOANET))</td>
            </tr>
            <tr>
                <td>@LabelHelper.Label("NewExpectedEndDate")</td>
                <td>@Html.Kendo().DatePickerFor(x => x.First().NewExpectedEndDate).HtmlAttributes(new { ID = "NewExpectedEndDateTextBox", style = "width:85px;" })</td>
            </tr>
            <tr>
                <td>@LabelHelper.Label("NewCallableCheckBox")</td>
                <td>@Html.Kendo().CheckBoxFor(x => x.First().NewCallable).HtmlAttributes(new { ID = "NewCallableCheckBox" }).Label(" ")</td>
            </tr>
            <tr>
                <td colspan="2" align="left">
                    <label id='ProgressSingleLabel'></label>
                </td>
            </tr>
            <tr>
                <td colspan="2" align="right">                    
                    @Html.Kendo().Button().Name("ContractUpdateSingleButton").Content(LabelHelper.Text("SendSingleUpdate")).Events(e => e.Click("onProcessSingleContractUpdate"))                    
                </td>
            </tr>
        </table>

        @Html.HiddenFor(x => x.First().ModelId)        
        @Html.HiddenFor(x => x.First().SLContract)
        @Html.HiddenFor(x => x.First().EntityId)
        @Html.HiddenFor(x => x.First().ContraEntity)
        @Html.HiddenFor(x => x.First().SecurityNumber)
        @Html.HiddenFor(x => x.First().Ticker)
        @Html.HiddenFor(x => x.First().ContractNumber)
        @Html.HiddenFor(x => x.First().TradeType)
        @Html.HiddenFor(x => x.First().BatchCode)                
        @Html.HiddenFor(x => x.First().MemoInfo)
        @Html.HiddenFor(x => x.First().NewCallable)
        @Html.HiddenFor(x => x.First().NewIncomeTracked)
    }
}
else
{

@(
 Html.Kendo().ToolBar()
    .Name("SharedContractUpdateToolBar")
    .Items(items =>
    {
        items.Add().Template(Html.Kendo().Button().Name("UpdateContractSelectAllButton").Content("Select All").Events(e => e.Click("onSelectAllContractUpdate")).ToHtmlString());
        items.Add().Template( Html.Kendo().Button().Name("UpdateContractContractUpdateButton").Content( "Send Update" ).Events( e => e.Click( "onContractUpdateChange" ) ).Enable( false ).ToHtmlString() );
        items.Add().Template(Html.Kendo().Button().Name("UpdateContractBulkApplyButton").Content("Apply Term Date").Events(e => e.Click("onBulkTermDateApply")).Enable(true).ToHtmlString());

        items.Add().Template(Html.Kendo().DatePicker().Name("UpdateContractTermDateCalander").Format("yyyy-MM-dd").Enable(true).Value(DateTime.Now).HtmlAttributes(new { @style = "width:90px;" }).ToHtmlString()) ;

        items.Add().Template("<label id='ProgressLabel'></label>");
    })
)
    <hr class="hr-white">
    <div>
        @(Html.Kendo().Grid( Model )
    .Name( "ContractUpdateGrid" )
    .HtmlAttributes( new { @class = "grid" } )
    .Scrollable()
    .Selectable()
    .NoRecords()
    .Resizable( cols => cols.Columns( bool.Parse( DataSystemValues.LoadSystemValue( "ResizeableGrid", "true" ) ) ) )
    .Editable( editable => editable.Mode( GridEditMode.InCell ).Enabled( true ) )
        .Events( e => e.Edit( "onContractUpdateEdit" ).DataBound( "onContractUpdateDataBound" ) )
    .Columns( columns =>
    {
        columns.Bound( x => x.SubmissionType ).GetColumnFormat( ColumnTypeEnum.String, false, "# if (SubmissionType == " + Convert.ToInt32( StatusDetail.Approved ).ToString() + ") { #" +
"<div style='text-align:center;' class='k-widget k-notification k-notification-success'><i class='fa  fa-check'></i></div>" +
"# } else if (SubmissionType == " + Convert.ToInt32( StatusDetail.Rejected ).ToString() + "){ #" +
"<div style='text-align:center;' class='k-widget k-notification k-notification-error'><i class='fa fa-times' ></i></div>" +
"# } else if (SubmissionType == " + Convert.ToInt32( StatusDetail.HeldLocal ).ToString() + "){ #" +
"<div style='text-align:center;' class='k-widget k-notification k-notification-warning'><i class='fa fa-pencil'></i></i></div>" +
"# }#", "" );

        columns.Bound(x => x.ExecutingSystem).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound( x => x.ModelId ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
        columns.Bound( x => x.Enabled ).GetColumnFormat( ColumnTypeEnum.String, false, "<input type='checkbox'  class='chkbx' #= (Enabled) ? checked ='checked' : '' #/>", "" );

        columns.Bound( x => x.ContraEntity ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.ContractNumber ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.SecurityNumber ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.Ticker ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.TradeType ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.NewSettlementDate ).GetColumnFormat( ColumnTypeEnum.Date, false, "", "Date" ).Editable("onExecutingTypeContractUpdateEditable");
        columns.Bound( x => x.NewTermDate ).GetColumnFormat( ColumnTypeEnum.Date, false, "", "Date" ).Editable("onExecutingTypeContractUpdateEditable");
        columns.Bound( x => x.NewMark ).GetColumnFormat( ColumnTypeEnum.Margin, false, "#=GetRateDirection(NewMark)#", "RebateRateDecimalNumber").Editable("onExecutingTypeContractUpdateEditable");
        columns.Bound( x => x.NewMarkParameterId ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Editable("onExecutingTypeContractUpdateEditable");
        columns.Bound( x => x.NewDivRate ).GetColumnFormat( ColumnTypeEnum.Margin, false, "", "" ).Editable("onExecutingTypeContractUpdateEditable");
        columns.Bound( x => x.NewIncomeTracked ).GetColumnFormat( ColumnTypeEnum.String, false, "<input type='checkbox'  class='chkbxIncomeTracked' #= (NewIncomeTracked) ? checked ='checked' : '' #/>", "" ).Editable("onExecutingTypeContractUpdateEditable");
        columns.Bound( x => x.NewComment ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Editable("onExecutingTypeContractUpdateEditable");

        columns.Bound(x => x.NewExpectedEndDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "Date");
        columns.Bound(x => x.NewCallable).GetColumnFormat(ColumnTypeEnum.Date, false, "<input type='checkbox'  class='chkbxCallable' #= (NewCallable) ? checked ='checked' : '' #/>", "");

        columns.Bound( x => x.SubmissionType ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.MemoInfo ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
    } )
        .DataSource( read => read.Ajax()
        .ServerOperation( false )
        .AutoSync( true )
        .Update( update => update.Action( "ContractUpdateModel_Update", "ContractRelated", new { area = "DomesticTrading" } ) )
        .Model( model =>
        {
            model.Id(x => x.ModelId);
            model.Field(x => x.Enabled).Editable(false);
            model.Field(x => x.ContraEntity).Editable(false);
            model.Field(x => x.ContractNumber).Editable(false);
            model.Field(x => x.SecurityNumber).Editable(false);
            model.Field(x => x.Ticker).Editable(false);
            model.Field(x => x.TradeType).Editable(false);

            model.Field(x => x.NewSettlementDate).Editable(true);
            model.Field(x => x.NewTermDate).Editable(true);
            model.Field(x => x.NewMark).Editable(true);
            model.Field(x => x.NewMarkParameterId).Editable(true);
            model.Field(x => x.NewDivRate).Editable(true);
            model.Field(x => x.NewComment).Editable(true);
            model.Field(x => x.NewIncomeTracked).Editable(false);
            model.Field(x => x.NewCallable).Editable(true);
            model.Field(x => x.NewExpectedEndDate).Editable(true);
            model.Field(x => x.SubmissionType).Editable(false);
            model.Field(x => x.MemoInfo).Editable(false);
        } ) ))
    </div>
}