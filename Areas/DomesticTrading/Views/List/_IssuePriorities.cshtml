@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools


<script type="text/javascript">
    var _originalIssuePriorityGrid = null;
    var _originalIssuePriorityGridToolBar = null;

    $('#SharedLabelCheckBox').change(function () {
        RefreshGrid("#IssuePriorityGrid");
    });

    $(document).ready(function () {
        setTimeout(function () {
            _originalIssuePriorityGrid = $("#IssuePriorityGrid").data('kendoGrid').getOptions();
            _originalIssuePriorityGridToolBar = $("#IssuePriorityGrid .k-grid-toolbar").html();

            LoadGridLayout("#IssuePriorityGrid");

            $("#IssuePriorityGrid .k-grid-toolbar").html(_originalIssuePriorityGridToolBar);
            $("#IssuePriorityGrid .k-grid-toolbar").addClass("k-grid-top");
        }, 5);
    });

    function onIssuePriorityListLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#IssuePriorityGrid");
        }, 5);
    }

    function onIssuePriorityCheckData() {
        CheckGridData('#IssuePriorityGrid');
    }

    function createPCMatrixData() {
        var entity = $("#PCMatrixDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity,
            operatorId: '@Convert.ToInt32(SL_Operator.gte)'
        };
    }

    function additionalPCMatrixData() {
        var entity = $("#PCMatrixDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity
        };
    }

    function onIssuePriorityEdit(e) {
        var input = e.container.find("input");
        setTimeout(function () {
            input.select();
        }, 25);
    }

    function onIssuePriorityDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function(valid) {
                    userPreference = valid;

                    var dropdownList = $('#PCMatrixDropdownList').data("kendoDropDownList");

                    dropdownList.select(function(dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $('#IssuePriorityGrid').data("kendoGrid").dataSource.read();
                },
                error: function(valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onIssuePriorityError(e) {
        DisplayControllerError(e);
    }

    function onIssuePriorityChange() {
        $("#IssuePriorityGrid").data("kendoGrid").dataSource.read();
    }

     function onIssuePriorityListContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#IssuePriorityGrid");
                break;

            case "Reset Filter":
                ResetFilter("#IssuePriorityGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#IssuePriorityGrid");

                $("#IssuePriorityGrid").data('kendoGrid').setOptions(_originalIssuePriorityGrid);
                $("#IssuePriorityGrid .k-grid-toolbar").html(_originalIssuePriorityGridToolBar);
                $("#IssuePriorityGrid .k-grid-toolbar").addClass("k-grid-top");
                $('#IssuePriorityGrid').data("kendoGrid").dataSource.read();
                break;
            case 'Unsort':
                UnsortGrid("#IssuePriorityGrid");
                break;
        }
    }

     function onAdditionalIssuePriorityData(e) {
         var datepicker = $("#IssuePriorityCalander").data("kendoDatePicker");
         var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

         return {
             effectiveDate: value,
         }
    }


    function onIssueRateSubmit() {
        var issue = document.getElementById("SecurityMasterIssueIdTextBox").value;
        var entity = $("#SecMasterDropdownList").data("kendoDropDownList").value();


        HelperPartialWindow(
            JSON.stringify({
                entityId: entity
            }),
            'Add Issue Rates',
            480,
            480,
            '/DomesticTrading/Issue/LoadIssueRateAdd'
        );
    }
</script>

@(
     Html.Kendo().ToolBar()
        .Name("IssuePriorityToolBar")
        .Resizable(true)
        .Items(items =>
        {
        items.Add().Template(LabelHelper.Label("EffectiveDate").ToHtmlString());

        items.Add().Template(Html.Kendo().DatePicker()
                                .Name("IssuePriorityCalander")
                                .Format("yyyy-MM-dd")
                                .Value(DateTime.Now)
                                .HtmlAttributes(new { @class = "width90" })
                                .Events(events => events.Change("onIssuePriorityChange")).ToHtmlString());

        items.Add().Template(Html.Kendo().Button().Name("ListRegIssueRateButton").Events(e => e.Click("onIssueRateSubmit")).HtmlAttributes(new { @title = "Add Issue Rates (Alt-R)" }).Enable(true).Content(@<text><i class='fa fa-heartbeat'>Add Rate</i></text>).ToHtmlString());

            items.Add().Template(Html.Kendo().Button().Name("ListRegIssueRateRefreshnButton").Content("<i class='fa fa-refresh fa-1x'></i>").Events(ev => ev.Click("onIssuePriorityChange")).ToHtmlString());
        }))

<hr class="hr-white">

<div id="IssuePriorityContent" class="grid-div">
    @(
         Html.Kendo().Grid<IssuePriorityModel>()
                .Name("IssuePriorityGrid")
                .Sortable()
                .HtmlAttributes(new { @class = "grid" })
                .Scrollable(x => x.Virtual(true))
                .Filterable()
                .NoRecords()
                .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
                .Navigatable()
                .Resizable(resize => resize.Columns(true))
                  .Pageable(pagable =>
                  {
                      pagable.Numeric(false);
                      pagable.PreviousNext(false);
                      pagable.Messages(config =>
                      {
                          config.Display("Showing {2} item(s)");
                      });
                  })
                .Events(events =>
                {
                    events.DataBound("onIssuePriorityCheckData");
                    events.ColumnHide("onIssuePriorityListLayoutChange");
                    events.ColumnShow("onIssuePriorityListLayoutChange");
                    events.ColumnResize("onIssuePriorityListLayoutChange");
                    events.ColumnReorder("onIssuePriorityListLayoutChange");
                })
                .Columns(columns =>
                {
                    columns.Bound(x => x.EffectiveDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "").Hidden(true);
                    columns.Bound(x => x.Cusip).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                    columns.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                    columns.Bound(x => x.ISIN).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                    columns.Bound(x => x.IntradayRate).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(IntradayRate)#", "");
                })
               .ColumnMenu( menu =>
               {
                   menu.Columns( true );
                   menu.Filterable( true );
                   menu.Sortable( true );
                   menu.ComponentType( "modern" );
               } )
                .DataSource(dataSource => dataSource
                .Ajax()
                .ServerOperation(false)
                .PageSize(50)
                    .Events(events => events.Error("onIssuePriorityError"))
                    .Read(read => read.Action("Read_IssuePriority", "FeeType", new { area = "DomesticTrading" }).Data("onAdditionalIssuePriorityData")))
    )
</div>


@(Html.Kendo().ContextMenu()
    .Name("PListContextMenu")
        .Target("#IssuePriorityGrid")
        .Events(events => events.Select("onIssuePriorityListContextMenuSelect"))
        .Items(items =>
        {
            items.Add().Text("AutoFit Columns");
            items.Add().Text("Unsort").Enabled(true);
            items.Add().Text("Reset Filter").Enabled(true);
            items.Add().Text("Reset Grid").Enabled(true);
        }))