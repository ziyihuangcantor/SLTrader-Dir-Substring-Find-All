@using BondFire.Entities.Projections
@using SLTrader.Tools
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Enums

<script type="text/javascript">
    var _ListRegulatoryGridSelectAll = false;

    $('#SharedLabelCheckBox').change(function() {
        try {
            $("#ListRegulatoryGrid").data("kendoGrid").refresh();
        } catch (e) {
            console.log(e.message);
        }
    });

    function additionalData() {

        var datepicker = $("#RegulatoryCalander").data("kendoDatePicker");
        var effectiveDate = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entity = $("#RegulatoryDropdownList").data("kendoDropDownList").value();
        var regkey = $("#RegulatoryKeyDropdown").data("kendoDropDownList").value();

        return {
            effectiveDate: effectiveDate,
            entityId: entity,
            regList: regkey
        };
    }

    function onDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function(valid) {
                    userPreference = valid;

                    var dropdownList = $('#RegulatoryDropdownList').data("kendoDropDownList");

                    dropdownList.select(function(dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $('#ListRegulatoryGrid').data("kendoGrid").dataSource.read();
                },
                error: function() {
                    userPreference = null;
                }
            });
        }
        catch (e) { }
    }

    function onCheckData() {
        CheckGridData('#ListRegulatoryGrid');
    }

    function onError(e) {
        alert(e.message);
    }

    function onRegulatoryChange() {
        $("#ListRegulatoryGrid").data("kendoGrid").dataSource.read();
    }

    function onListRegRowChange() {
        try
        {
            var entityGrid = $("#ListRegulatoryGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            var entityId = selectedItem["EntityId"];
            var issueId = selectedItem["IssueId"];
            var securityNumber = selectedItem["SecurityNumber"];
            var effectiveDate = selectedItem["EffectiveDate"];

            SidePanelUpdate(effectiveDate, entityId, issueId, securityNumber);

            _ListRegulatoryGridSelectAll = false;
        }
        catch (e)
        {
        }
    }

    function onDeleteRegulatoryListItems(e) {
        var dataItems = [];
        var grid = $('#ListRegulatoryGrid').data('kendoGrid');
        var rows = getCSVDataItems('#ListRegulatoryGrid', _ListRegulatoryGridSelectAll);
        
        HelperPartialLocateWindow(
            JSON.stringify({
                list: rows
            }),
            "Delete Reg Item(s)",
            0,
            0,
            "/DomesticTrading/List/LoadDeleteRegulatoryList");
    }

    function onRegulatoryFileUplaod() {
        var entity = $("#RegulatoryDropdownList").data("kendoDropDownList").value();
        var regkey = $("#RegulatoryKeyDropdown").data("kendoDropDownList").value();

        HelperPartialWindow(
           JSON.stringify({
               _entityId: entity,
               _regType: regkey
           }),
           "Upload RegulatoryList For " + regkey,
          525,
          325,
          "/DomesticTrading/List/UploadRegulatoryListUpload");
    }


    function onListRegulatoryGridContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'Remove Item(s)':
                onDeleteRegulatoryListItems(e);
                break;

            case 'AutoFit Columns':
                resizeGridColumns("#ListRegulatoryGrid");
                break;
            case "Select All":
                ListRegulatoryGridSelectAll(true);
                break;

            case "Reset Filter":
                ResetFilter("#ListRegulatoryGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#ListRegulatoryGrid");

                $("#ListRegulatoryGrid").data('kendoGrid').setOptions(_originalRuleGrid);
                $("#ListRegulatoryGrid .k-grid-toolbar").html(_originalRuleToolBar);
                $("#ListRegulatoryGrid .k-grid-toolbar").addClass("k-grid-top");
                $('#ListRegulatoryGrid').data("kendoGrid").dataSource.read();
                break;

            case "Export To Excel":
                KendoGridToCSVConvertor("#ListRegulatoryGrid", 'ListRegulatoryGrid', _ListRegulatoryGridSelectAll);
                break;

            case 'Unsort':
                UnsortGrid("#ListRegulatoryGrid");
                break;
        }
    }

    function ListRegulatoryGridSelectAll(e) {
        try {
            var listReg = $("#ListRegulatoryGrid").data("kendoGrid");
            listReg.select(listReg.tbody.find(">tr"));

            _ListRegulatoryGridSelectAll = true;
        }
        catch (e) {
            console.log(e.message);
        }
    }
</script>



@(
 Html.Kendo().ToolBar()
    .Name( "RegToolBar" )
    .Resizable( true )
    .HtmlAttributes( new { @class = "tBar" } )
    .Items( items =>
    {
        items.Add().Template( LabelHelper.Label( "EffectiveDate" ).ToHtmlString() );
        items.Add().Template(
        ( Html.Kendo().DatePicker()
        .Name( "RegulatoryCalander" )
        .Format( "yyyy-MM-dd" )
        .Value( DateTime.Now )
                                .HtmlAttributes( new { @class = "width90" } )
        .Events( events => events.Change( "onRegulatoryChange" ) ) ).ToHtmlString() );

        items.Add().Template( LabelHelper.Label( "Entity" ).ToHtmlString() );
        items.Add().Template(
            ( Html.Kendo().DropDownList()
        .Name( "RegulatoryDropdownList" )
                                .HtmlAttributes( new { @class = "width90" } )
        .Animation( true )
        .DataTextField( "Custodian" )
        .DataValueField( "CompanyId" )
        .OptionLabel( "Empty List" )
        .AutoBind( true )
        .Template( "#if(data.Custodian == \"" + LabelHelper.Text( "OptionLabel" ) + "\")" +
                                           "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                           "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#" )
        .Events( events => events.Change( "onRegulatoryChange" ).DataBound( "onDefaultLoad" ).Open( "onContraEntityAutoCompleteResize" ) )
        .DataSource( dataSource => dataSource
        .Read( read => read
        .Action( "Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" } ) ) )
        .SelectedIndex( 0 ) ).ToHtmlString() );

        items.Add().Template( LabelHelper.Label( "RegulatoryKey" ).ToHtmlString() );

        items.Add().Template(
                      ( Html.Kendo().DropDownList()
                               .Name( "RegulatoryKeyDropdown" )
                               .BindTo( Enum.GetNames( typeof( SLRegulatoryType ) ).ToList() )
                               .Events( events => events.Change( "onRegulatoryChange" ) )
                               .Value( SLRegulatoryType.EASYBORROW.ToString() ) ).ToHtmlString() );

        items.Add().Template( Html.Kendo().Button().Name( "UploadWindowButton" ).Content( "Upload RegulatoryFile" ).Events( e => e.Click( "onRegulatoryFileUplaod" ) ).Enable( SessionSecurityService.IsEditable( ManagerTask.EditSLRegList ) ).ToHtmlString() );
    } ))
<hr class="hr-white">
<div id="RegListContent"  class="grid-div">
    @{   Html.Kendo().Grid<SL_RegulatoryListProjection>()
        .Name("ListRegulatoryGrid")
        .Sortable()
        .HtmlAttributes(new { @class = "grid" })
        .Scrollable(scrollable => scrollable.Virtual(true))
        .Filterable()
        .ColumnMenu(menu =>
        {
            menu.Columns(true);
            menu.Filterable(true);
            menu.Sortable(true);
            menu.ComponentType( "modern" );
        } )
        .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple))
        .Navigatable()
        .NoRecords()
         .Events(events => events.Change("onListRegRowChange").DataBound("onCheckData"))
        .Columns(columns =>
        {
            columns.Bound(p => p.SLRegulatoryList).Hidden(true);
            columns.Bound(p => p.EffectiveDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
            columns.Bound(p => p.IssueId).Hidden(true);
            columns.Bound(p => p.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(p => p.Isin).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(p => p.Sedol).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(p => p.SecNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(p => p.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(p => p.Quantity).GetColumnFormat(ColumnTypeEnum.Position, false, "", "");
            columns.Bound(p => p.StartDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
            columns.Bound(p => p.StopDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
            columns.Bound(p => p.Source).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        })
            .Resizable(resize => resize.Columns(true))
            .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(250)
            .Read(read => read
                .Action("Read_RegulatoryList", "List", new { area = "DomesticTrading" })
                .Data("additionalData"))
                .Events(events => events
                .Error("onError"))
            ).Render();
               }
</div>

@(Html.Kendo().ContextMenu()
.Name("ListRegulatoryGridContextMenu")
    .Target("#ListRegulatoryGrid")
    .Events(events => events.Select("onListRegulatoryGridContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("Remove Item(s)").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLRegList));
        items.Add().Separator(true);
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
        items.Add().Separator(true);
        items.Add().Text("Select All");
        items.Add().Text("Export To Excel").Enabled(true);

    }))