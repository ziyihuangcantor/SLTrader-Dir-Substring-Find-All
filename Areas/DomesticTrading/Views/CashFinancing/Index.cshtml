@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools

<script type="text/javascript">
    var _cashFinancingSelectedRows = [];

    var _cashFinancingSelectAll = false;
   
    var _originalCashFinancingGrid = null;    

    var lastRefresh = null;
    var scrolling = true;

    var _cashFinancingSuspendRefresh = false;
    var cashFinancingInterval;

    $(document).ready(function () {
        setTimeout(function () {
            _originalCashFinancingGrid = $('#CashFinancingGrid').data('kendoGrid').getOptions();

            LoadGridLayout("#CashFinancingGrid");            
        }, 5);

        var clientEvent1 = new ZeroClipboard(document.getElementById("CashFinancingButton"));

        clientEvent1.on("ready", function (readyEvent) {
            clientEvent1.on("copy", function (event) {
                var data1 = KendoGridToText("#CashFinancingGrid", "CashFinancingGrid", _cashFinancingSelectAll);
                clientEvent1.setText(data1);
            });
        });

    });

    $('#CashFinancingButton').hover(
    function () { $(this).addClass('k-state-hover') },
    function () { $(this).removeClass('k-state-hover') }
    )

    $('#BoxCalcButton').hover(
    function () { $(this).addClass('k-state-hover') },
    function () { $(this).removeClass('k-state-hover') }
    )

    function onCashFinancingLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#CashFinancingGrid");
        }, 5);
    }
    
    function BackupCashFinancingRowSelection() {
        var grid = $("#CashFinancingGrid").data("kendoGrid");

        var rows = grid.select();

        rows.each(function (index, row) {
            var selectedItem = grid.dataItem(row);
            _cashFinancingSelectedRows.push(selectedItem);
        });
    }

    function RestoreCashFinancingRowSelection() {
        if (_cashFinancingSelectedRows.length !== 0) {
            try {
                for (var i = 0; i < _cashFinancingSelectedRows.length; i++) {
                    var currId = _cashFinancingSelectedRows[i].uid;

                    $('#CashFinancingGrid').data("kendoGrid").tbody.find("tr[data-uid='" + currId + "']").addClass("k-state-selected");
                }
            }
            catch (e) {
                console.log(e.message);
            }
        }
    }

    function onCashFinancingRequestEnd(e) {
        _cashFinancingSuspendRefresh = false;

        lastRefresh = new Date(Date.now());

        if (lastRefresh.getHours() > 12) {
            var hours = lastRefresh.getHours() - 12;
            var ampm = "PM";
        }
        else {
            var hours = lastRefresh.getHours();
            var ampm = "AM";
        }

        if (lastRefresh.getMinutes() < 10) {
            var minutes = "0" + lastRefresh.getMinutes();
        }
        else {
            var minutes = lastRefresh.getMinutes();
        }

        if (lastRefresh.getSeconds() < 10) {
            var seconds = "0" + lastRefresh.getSeconds();
        }
        else {
            var seconds = lastRefresh.getSeconds();
        }

        $("#CashFinancingUpdateLastTime").text("Last Update: " + hours + ":" + minutes + ":" + seconds + ampm);

        try {
            $("#CashFinancingRefreshButton").data("kendoButton").enable(true);
        } catch (e) { }
    }

    function onCashFinancingRequestStart(e) {
        _cashFinancingSuspendRefresh = true;

        try {
            $("#CashFinancingRefreshButton").data("kendoButton").enable(false);
        } catch (e) { }
    }

    function onCashFinancingContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case "Refresh Data":
                onCashFinancingChange();
                break;

            case 'AutoFit Columns':
                resizeGridColumns("#CashFinancingGrid");
                break;

            case "Unsort":
                onCashFinancingUnsortGrid("#CashFinancingGrid");
                break;

            case "Select All":
                cashFinancingSelectAll(true);
                break;

            case "Reset Filter":
                $("#CashFinancingSecuritySearchTextBox").val("");
                ResetFilter("#CashFinancingGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#CashFinancingGrid");
                $('#CashFinancingGrid').data('kendoGrid').setOptions(_originalCashFinancingGrid);
                break;

            case "Export To Excel":
                exportToBoxExcel();
                break;

            default:
                console.log($(e.item).children(".k-link").text());
                break;
        }
    }

    $('#SharedLabelCheckBox').change(function () {
        try {  
                RefreshGrid("#CashFinancingGrid");
            }
         catch (e) { }
    });

    $(document).bind('keydown', 'ctrl+a', function (e) {
        if (e.altKey && (e.which == 65)) {
            e.preventDefault();

            cashFinancingSelectAll(true);
        }
    });

    function onCashFinancingUnsortGrid(e) {
        UnsortGrid(e);
    }

    function exportToBoxExcel() {
        try {
            KendoGridToCSVConvertor("#CashFinancingGrid", 'CashFinancingGrid', _cashFinancingSelectAll);

            _cashFinancingSelectAll = false;
            _cashFinancingSelectedRows = [];
            RestoreCashFinancingRowSelection();
        }
        catch (e) {
            console.log(e.message);
            console.log(e.message);
        }
    }

    function cashFinancingSelectAll(e) {
        try {
            var boxGrid = $("#CashFinancingGrid").data("kendoGrid");
            boxGrid.select(boxGrid.tbody.find(">tr"));

            _cashFinancingSelectAll = true;
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onCashFinancingRowChange(e) {
 
        _cashFinancingSelectAll = false;
        _cashFinancingSelectedRows = [];

        try {
            var entityGrid = $("#CashFinancingGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            var entityId = selectedItem["EntityId"];
            var effectiveDate = selectedItem["EffectiveDate"];
            var securityNumber = selectedItem["SecurityNumber"];
            var issueId = selectedItem["IssueId"];

            SidePanelUpdate(effectiveDate, entityId, issueId, securityNumber);
        }
        catch (error) {
            console.log(error);
        }

        BackupCashFinancingRowSelection();
    }

    function onCashFinancingDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    userPreference = valid;

                    var dropdownList = $('#CashFinancingDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $('#CashFinancingGrid').data("kendoGrid").dataSource.read();
                },
                error: function (valid) {
                    userPreference = null;
                }
            })
        }
        catch (e) {
            console.log(e.message);
        }
    }

   
    function sleep(delay) {
        var start = new Date().getTime();
        while (new Date().getTime() < start + delay);
    }

 
    function onCashFinancingCheckData(e) {
        CheckGridData('#CashFinancingGrid');
        _cashFinancingSelectedRows = [];
    }

    function onCashFinancingGridCheckData(e) {
        CheckGridData('#CashFinancingGrid');
    }

    function additionalCashSourcingData() {
        var datepicker = $("#CashFinancingCalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entity = $("#CashFinancingDropdownList").data("kendoDropDownList");

        console.log(entity.value());

        return {
            entityId: entity.value(),
            effectiveDate: value
        };
    }

    function onBoxCalculationFilterLoad() {
        var entity = $("#CashFinancingDropdownList").data("kendoDropDownList");

        return {
            entityId: entity.value(),
            gridName: 'CashFinancingGrid'
        }
    }

    function onCashFinancingGridError(e) {
        ErrorGridData("#CashFinancingGrid");
    }

    function oCashFinancingError(e) {
        console.log(e.message);
    }

    function onCashFinancingChange() {
        $("#CashFinancingGrid").data("kendoGrid").dataSource.read();

        $('#CashFinancingFilterDropdownList').data("kendoDropDownList").dataSource.read();
    }

    function onCashFinancingFilterChange() {
        try {
            var grid = $("#CashFinancingGrid").data("kendoGrid");
            var entityId = $("#CashFinancingDropdownList").data("kendoDropDownList").value();;
            var filterDropDown = $('#CashFinancingFilterDropdownList').data("kendoDropDownList").value();

            $.ajax({
                url: '/DomesticTrading/BoxCalculation/QuickFilterLookup',
                type: 'POST',
                data: JSON.stringify({
                    entityId: entityId,
                    gridName: 'CashFinancingGrid',
                    filterName: filterDropDown
                }),
                contentType: 'application/json;',
                success: function (valid) {
                    if ((valid != null) && (valid.length > 0)) {
                        $("#CashFinancingSecuritySearchTextBox").val("");

                        var filterInital = { logic: "and", filters: [] };
                        var filterAnd = { logic: "and", filters: [] };
                        var filterOr = { logic: "or", filters: [] };

                        for (i = 0; i < valid.length; i++) {

                            var quickFilter = valid[i];
                            console.log(quickFilter.Logic);

                            if (quickFilter.Logic == "and") {
                                var ops = null;

                                if (quickFilter.OperatorId == 1) {
                                    ops = '@SL_Operator.gte';
                                }
                                else if (quickFilter.OperatorId == 2) {
                                    ops = '@SL_Operator.gt';
                                }
                                else if (quickFilter.OperatorId == 3) {
                                    ops = '@SL_Operator.lt';
                                }
                                else if (quickFilter.OperatorId == 4) {
                                    ops = '@SL_Operator.lte';
                                }
                                else if (quickFilter.OperatorId == 5) {
                                    ops = '@SL_Operator.eq';
                                }
                                else if (quickFilter.OperatorId == 6) {
                                    ops = '@SL_Operator.neq';
                                }
                                else if (quickFilter.OperatorId == 8) {
                                    ops = '@SL_Operator.contains'
                                }
                                else if (quickFilter.OperatorId == 9) {
                                    ops = '@SL_Operator.startswith'
                                }


                                var valueAnd = null;

                                try {
                                    var columnType = getFieldType(grid.dataSource, quickFilter.Field);


                                    if (columnType == 'string') {
                                        valueOr = quickFilter.Value.toString();
                                    }
                                    else if (columnType == 'number') {
                                        valueAnd = getNumber(quickFilter.Value, '0');
                                    }
                                    else {
                                        valueOr = quickFilter.Value;
                                    }
                                }
                                catch (e) {
                                    valueAnd = quickFilter.Value;
                                }
                                console.log({ field: quickFilter.Field, operator: ops, value: valueAnd });

                                filterAnd.filters.push({ field: quickFilter.Field, operator: ops, value: valueAnd });
                            }

                            if (quickFilter.Logic == "or") {
                                var ops = null;

                                if (quickFilter.OperatorId == 1) {
                                    ops = '@SL_Operator.gte';
                                }
                                else if (quickFilter.OperatorId == 2) {
                                    ops = '@SL_Operator.gt';
                                }
                                else if (quickFilter.OperatorId == 3) {
                                    ops = '@SL_Operator.lt';
                                }
                                else if (quickFilter.OperatorId == 4) {
                                    ops = '@SL_Operator.lte';
                                }
                                else if (quickFilter.OperatorId == 5) {
                                    ops = '@SL_Operator.eq';
                                }
                                else if (quickFilter.OperatorId == 6) {
                                    ops = '@SL_Operator.neq';
                                }
                                else if (quickFilter.OperatorId == 8) {
                                    ops = '@SL_Operator.contains'
                                }
                                else if (quickFilter.OperatorId == 9) {
                                    ops = '@SL_Operator.startswith'
                                }

                                var valueOr = null;

                                try {
                                    var columnType = getFieldType(grid.dataSource, quickFilter.Field);

                                    if (columnType == 'string') {
                                        valueOr = quickFilter.Value.toString();
                                    }
                                    else if (columnType == 'number') {
                                        valueOr = getNumber(quickFilter.Value, '0');
                                    }
                                    else
                                    {
                                        valueOr = quickFilter.Value;
                                    }
                                }
                                catch (e) {
                                    valueOr = quickFilter.Value;
                                }
                                console.log({ field: quickFilter.Field, operator: ops, value: valueOr });

                                filterOr.filters.push({ field: quickFilter.Field, operator: ops, value: valueOr });
                            }
                        }

                        if (filterAnd.filters.length > 0 && filterOr.filters.length == 0) {
                            grid.dataSource.filter(filterAnd);
                        }
                        else if (filterAnd.filters.length == 0 && filterOr.filters.length > 0) {
                            grid.dataSource.filter(filterOr);
                        }
                        else if (filterOr.filters.length > 0 && filterAnd.filters.length > 0) {
                            filterInital.filters.push(filterAnd);
                            filterInital.filters.push(filterOr);
                            grid.dataSource.filter(filterInital);
                        }
                    }
                    else {
                        grid.dataSource.filter({});
                    }
                },
                error: function (valid) {
                    grid.dataSource.filter({});
                }
            })
        }
        catch (e) {
            console.log(e);
            grid.dataSource.filter({});
        }
    }

    function getNumber(number, defaultNumber) {
        return isNaN(parseFloat(number)) ? defaultNumber : parseFloat(number);
    }

    function getFieldType(dataSource, field) {
        return dataSource.options.schema.model.fields[field].type;
    }

    function onQuickFilterDataBound(e) {
        $("#CashFinancingFilterDropdownList").data("kendoDropDownList").text('@LabelHelper.Text("OptionLabel")');
    }

    function onCashFinancingSearchChange(e) {
        e.preventDefault();

        try {        
            var cusipTextBox = document.getElementById("CashFinancingSecuritySearchTextBox").value;

            QuickColumnGrid("#CashFinancingGrid", cusipTextBox);
        }
        catch (e) {
            console.log(e.message);
        }
    }


    function onCashFinancingDataBinding(e) {
        if (_cashFinancingSuspendRefresh == true) {
            e.preventDefault();
        }
    }
</script>

@(
 Html.Kendo().ToolBar()
    .Name("CashFinancingToolBar")    
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("EffectiveDate").ToHtmlString());
    
        items.Add().Template(Html.Kendo().DatePicker()
                                .Name("CashFinancingCalander")
                                .Format("yyyy-MM-dd")
                                .HtmlAttributes(new { @class="width90" })
                                .Value(DateTime.Now)    
                                .Events(events => events.Change("onCashFinancingChange")).ToHtmlString());
        
            items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
            items.Add().Template(Html.Kendo().DropDownList()
                                .Name("CashFinancingDropdownList")                                
                                .DataTextField("Custodian")
                                .DataValueField("CompanyId")
                                .OptionLabel(LabelHelper.Text("OptionLabel"))
                                .AutoBind(true)
                                    .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                                .Events(events => events.Change("onCashFinancingChange").DataBound("onCashFinancingDefaultLoad").Open("onContraEntityAutoCompleteResize"))
                                .DataSource(dataSource => dataSource
                                .Events(events => events.Error("oCashFinancingError"))
                                .Read(read => read
                                .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                                .SelectedIndex(0).ToHtmlString());


            items.Add().Template(LabelHelper.Label("QuickFilter").ToHtmlString());

            items.Add().Template(Html.Kendo().DropDownList()
                        .Name("CashFinancingFilterDropdownList")
                        .HtmlAttributes(new { @class="width90" })       
                        .OptionLabel(LabelHelper.Text("OptionLabel"))
                        .Value(LabelHelper.Text("OptionLabel"))                        
                        .AutoBind(false)
                        .Events(e => e.Change("onCashFinancingFilterChange").DataBound("onQuickFilterDataBound").Open("onContraEntityAutoCompleteResize"))
                        .DataSource(dataSource => dataSource
                        .Events(events => events.Error("oCashFinancingError"))
                        .Read(read => read.Action("LoadFilters", "BoxCalculation", new { area = "DomesticTrading" }).Data("onBoxCalculationFilterLoad")))
                        .ToHtmlString());            
        
            items.Add().Template(
                "<table><tr><td>"+
                LabelHelper.LabelFor("TickerSearch", "CashFinancingSecuritySearchTextBox").ToHtmlString() + "</td><td>" +
                Html.Kendo().AutoComplete().Name("CashFinancingSecuritySearchTextBox").HtmlAttributes(new { @class = "width90" }).Events(eve => eve.Filtering("onCashFinancingSearchChange")).Suggest(true).ToHtmlString() +"</td></tr></table>"
                ).HtmlAttributes(new { @class= "tickerSearch-Text" });     
    }))


<hr class="hr-white">
<div id="BoxContent" class="grid-div">
   
     @(Html.Kendo().Grid<SL_CashFinancingExtendedProjection>()
        .Name( "CashFinancingGrid" )
        .HtmlAttributes( new { @class = "grid" } )
        .Sortable()
        .Scrollable( scroll => scroll.Enabled(true).Virtual(true) )
        .Filterable()
        .NoRecords()
        .ColumnMenu( columnMenu =>
        {
            columnMenu.Filterable( true );
            columnMenu.Columns( true );
            columnMenu.Sortable( true );
            columnMenu.ComponentType( "modern" );
        } )
        .Reorderable( reorder =>
        {
            reorder.Columns( true );
        } )
        .Resizable( resize =>
        {
            resize.Columns( true );
        } )
        .AllowCopy( copy =>
        {
            copy.Enabled( true );
        } )
        .Selectable( seclect => seclect.Mode( GridSelectionMode.Multiple ).Type(GridSelectionType.Row ))
        .Events( events =>
        {
            events.DataBinding("onCashFinancingDataBinding");
            events.Change("onCashFinancingRowChange");
            events.DataBound("onCashFinancingCheckData");
            events.ColumnHide("onCashFinancingLayoutChange");
            events.ColumnShow("onCashFinancingLayoutChange");
            events.ColumnResize("onCashFinancingLayoutChange");
            events.ColumnReorder("onCashFinancingLayoutChange");
        } )
        .Columns( columns =>
        {
            columns.Bound( x => x.EntityId ).Hidden( true ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
            columns.Bound( x => x.IssueId ).Hidden( true ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
            columns.Bound( x => x.SecurityNumber ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
            columns.Bound( x => x.Ticker ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
            columns.Bound( x => x.Isin ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
            columns.Bound( x => x.Sedol ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
            columns.Bound(x => x.Quick).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound( x => x.Classification ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
            columns.Bound( x => x.Price ).GetColumnFormat( ColumnTypeEnum.Money, false, "", "" );

            columns.Bound(x => x.DtDtccEligible).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.CountryIssued).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.Classification).GetColumnFormat(ColumnTypeEnum.String, false, "", "");


            columns.Bound(x => x.DepoQuantity).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(DepoQuantity)#", "");
            columns.Bound(x => x.DepoAmount).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetMoneyDirection(DepoAmount)#", "");

            columns.Bound(x => x.FirmFinancedSettled).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(FirmFinancedSettled)#", "");
            columns.Bound(x => x.FirmFinancedSettledAmt).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(FirmFinancedSettledAmt)#", "");
            columns.Bound(x => x.FirmFinancedGeneratedSettledAmt).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(FirmFinancedGeneratedSettledAmt)#", "");
            columns.Bound(x => x.FirmLongPositionCostToCarrySettledAmt).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(FirmLongPositionCostToCarrySettledAmt)#", "");


            columns.Bound(x => x.FirmLongPositionNextDaySettled).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(FirmLongPositionNextDaySettled)#", "");
            columns.Bound(x => x.FirmLongPositionNextDaySettledAmt).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(FirmLongPositionNextDaySettledAmt)#", "");
            columns.Bound(x => x.FirmLongPositionNextDayCostToCarrySettledAmt).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(FirmLongPositionNextDayCostToCarrySettledAmt)#", "");

            columns.Bound(x => x.FirmLongPositionNextNextDaySettled).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(FirmLongPositionNextNextDaySettled)#", "");
            columns.Bound(x => x.FirmLongPositionNextNextDaySettledAmt).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(FirmLongPositionNextNextDaySettledAmt)#", "");
            columns.Bound(x => x.FirmLongPositionNextNextDayCostToCarySettledAmt).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(FirmLongPositionNextNextDayCostToCarySettledAmt)#", "");

            columns.Bound(x => x.FirmLongPositionNextNextNextDaySettled).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(FirmLongPositionNextNextNextDaySettled)#", "");
            columns.Bound(x => x.FirmLongPositionNextNextNextDaySettledAmt).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(FirmLongPositionNextNextNextDaySettledAmt)#", "");
            columns.Bound(x => x.FirmLongPositionNextNextNextDayCostToCarySettledAmt).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(FirmLongPositionNextNextNextDayCostToCarySettledAmt)#", "");

            columns.Bound(x => x.CostToCarry).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetMoneyDirection(CostToCarry)#", "");

        } )
        .DataSource( dataSource => dataSource
        .Ajax()
        .ServerOperation( false )
        .PageSize(25)
        .Read( read => read
            .Action("Read_CashFinancing", "BoxCalculation", new { area = "DomesticTrading" } )
                 .Data( "additionalCashSourcingData" ).Type( HttpVerbs.Post ) )
            .Events( events =>
            {
                events.Error("onCashFinancingGridError");
                events.RequestStart( "onCashFinancingRequestStart" );
                events.RequestEnd( "onCashFinancingRequestEnd" );
            } )
            .Aggregates(agg =>
            {
                agg.Add(x => x.FirmFinancedSettledAmt).Sum();
                agg.Add(x => x.FirmFinancedGeneratedSettledAmt).Sum();
                agg.Add(x => x.FirmLongPositionCostToCarrySettledAmt).Sum();

                agg.Add(x => x.FirmLongPositionNextDaySettledAmt).Sum();
                agg.Add(x => x.FirmLongPositionNextDayCostToCarrySettledAmt).Sum();

                agg.Add(x => x.FirmLongPositionNextNextNextDaySettledAmt).Sum();
                agg.Add(x => x.FirmLongPositionNextNextNextDayCostToCarySettledAmt).Sum();
            })
                   .Model( model =>
                   {
                       model.Id( x => x.SecurityNumber );
                   } )
           .Events( events => events.Error( "onCashFinancingGridError" ) )
))


@(Html.Kendo().ContextMenu()
.Name( "CashFinancingContextMenu" )
.Orientation( ContextMenuOrientation.Vertical )
    .Target( "#CashFinancingGrid" )
.Events( events => events.Select( "onCashFinancingContextMenuSelect" ) )
.Items( items =>
{
    items.Add().Text( "Refresh Data" );
    items.Add().Separator(true);
    items.Add().Text("AutoFit Columns");
    items.Add().Text( "Unsort" );
    items.Add().Text( "Reset Filter" ).Enabled( true );
    items.Add().Text( "Reset Grid" ).Enabled( true );
    items.Add().Separator( true );
    items.Add().Text("Select All");
    items.Add().Text( "Copy" ).Enabled( true ).HtmlAttributes( new { ID = "BoxCalcButton" } );
    items.Add().Text( "Export To Excel" );
} ))


    <label id='CashFinancingUpdateLastTime' class="k-header width100p text-right" ></label>
   
</div>