@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools

<script type="text/javascript">
    var _originalRuleGrid = null;
    var _originalRuleToolBar = null;

    $('#SharedLabelCheckBox').change(function () {
        RefreshGrid("#RuleListGrid");
    });

    $(document).ready(function () {
        setTimeout(function () {
            _originalRuleGrid = $("#RuleListGrid").data('kendoGrid').getOptions();            
            _originalRuleToolBar = $("#RuleListGrid .k-grid-toolbar").html();

            LoadGridLayout("#RuleListGrid");   

            $("#RuleListGrid .k-grid-toolbar").html(_originalRuleToolBar);
            $("#RuleListGrid .k-grid-toolbar").addClass("k-grid-top");
        }, 5);
    });

    function onRuleLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#RuleListGrid");
        }, 5);
    }

    function onRuleCheckData() {
        CheckGridData('#RuleListGrid');
    }

    function onRuleError(e) {
        DisplayControllerError(e);
    }

    function additionalRuleData() {
        var entity = $("#RuleDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity,
        };
    }

    function additionalCreateRuleData() {
            var entity = $("#RuleDropdownList").data("kendoDropDownList").value();

            return {
                entityId: entity,
                ruleName: "New-Rule",
                query: "New-Query",
                message: "New-Message",
                activityType: '@SL_ActivityType.Activity',
                processType:'@SL_ProcessType.Trade'
            };
    }

    function onRuleEdit(e) {
        var input = e.container.find("input");
        setTimeout(function () {
            input.select();
        }, 25);
    }

    function onRuleDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function(valid) {
                    userPreference = valid;

                    var dropdownList = $('#RuleDropdownList').data("kendoDropDownList");

                    dropdownList.select(function(dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $('#RuleListGrid').data("kendoGrid").dataSource.read();
                },
                error: function(valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onRuleChange() {
        $("#RuleListGrid").data("kendoGrid").dataSource.read();
    }

    $(function () {
        $('#RuleListGrid').on('click', '.enabledRuleChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#RuleListGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('Enabled', checked);
            grid.dataSource.sync();
        });
    });

    function onRuleListContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#RuleListGrid");
                break;

            case "Reset Filter":
                ResetFilter("#RuleListGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#RuleListGrid");

                $("#RuleListGrid").data('kendoGrid').setOptions(_originalRuleGrid);
                $("#RuleListGrid .k-grid-toolbar").html(_originalRuleToolBar);
                $("#RuleListGrid .k-grid-toolbar").addClass("k-grid-top");
                $('#RuleListGrid').data("kendoGrid").dataSource.read();
                break;

            case 'Unsort':
                UnsortGrid("#RuleListGrid");
                break;
        }
    }
</script>

@(
 Html.Kendo().ToolBar()
    .Name("RuleToolBar")
    .Resizable(true)
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
        items.Add().Template(Html.Kendo().DropDownList()
                            .Name("RuleDropdownList")                            
                            .DataTextField("Custodian")
                            .DataValueField("CompanyId")
                            .OptionLabel(LabelHelper.Text("OptionLabel"))
                            .AutoBind(true)
                            .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                            .Events(events => events.Change("onRuleChange").DataBound("onRuleDefaultLoad").Open("onContraEntityAutoCompleteResize"))
                            .DataSource(dataSource => dataSource
                            .Read(read => read
                            .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                            .SelectedIndex(0).ToHtmlString());
    }))

<hr class="hr-white">

<div id="RuleContent"  class="grid-div">
    @(
 Html.Kendo().Grid<SL_Rules>()
        .Name( "RuleListGrid" )
        .Sortable()
        .HtmlAttributes( new { @class = "grid" } )
        .Scrollable()
        .Filterable()
        .NoRecords()
        .Editable( e => e.Mode( GridEditMode.InCell ).Enabled( SessionSecurityService.IsEditable( ManagerTask.EditSLRule ) ) )
        .Selectable( selectable => selectable.Mode( GridSelectionMode.Single ) )
        .Navigatable()
        .Resizable( cols => cols.Columns( bool.Parse( DataSystemValues.LoadSystemValue( "ResizeableGrid", "true" ) ) ) )
               .Events(events =>
               {
                   events.DataBound("onRuleCheckData");
                   events.Edit("onRuleEdit");
                   events.ColumnHide("onRuleLayoutChange");
                   events.ColumnShow("onRuleLayoutChange");
                   events.ColumnResize("onRuleLayoutChange");
                   events.ColumnReorder("onRuleLayoutChange");
               })
        .Columns( columns =>
        {
        columns.Bound(x => x.SLRule).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound(x => x.ContraEntity).GetColumnFormat(ColumnTypeEnum.String, false, "", "_RuleContraEntityAutoComplete");
        columns.Bound(x => x.RuleName).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Query).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.ProcessType).GetColumnFormat(ColumnTypeEnum.String, false, "", "_RuleProcessTypeDropdown");
        columns.Bound(x => x.Message).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.Enabled).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox'  class='enabledRuleChkbx' #= (Enabled) ? checked ='checked' : '' #/>", "");
            columns.Bound(x => x.ActivityType).GetColumnFormat(ColumnTypeEnum.String, false, "", "_RuleActivityTypeDropdown");
            columns.Command(x =>
            {
                x.Destroy();
            });
        } )
        .ColumnMenu(menu =>
        {
            menu.Columns(true);
            menu.Filterable(true);
            menu.Sortable(true);
            menu.ComponentType( "modern" );
        } )
         .ToolBar( toolbar =>
         {
            if ( SessionSecurityService.IsEditable( ManagerTask.EditSLRule ) == true )
            {
                toolbar.Create();
            }
        } )
         .DataSource( dataSource => dataSource
            .Ajax()
            .AutoSync( true )
            .Read( read => read.Action( "GetRules", "Rule", new { area = "DomesticTrading" } ).Data( "additionalRuleData" ) )
            .Update( update => update.Action( "UpdateRule", "Rule", new { area = "DomesticTrading" } ) )
            .Destroy( destroy => destroy.Action( "DeleteRule", "Rule", new { area="DomesticTrading"} ) )
            .Create( update => update.Action( "CreateRule", "Rule", new { area = "DomesticTrading" } ).Data( "additionalCreateRuleData" ) )
            .Model( model =>
            {
    model.Id( x => x.SLRule );
    model.Field( x => x.EntityId ).Editable( false );
    model.Field( x => x.ContraEntity ).Editable( true );
    model.Field( x => x.RuleName ).Editable( true ).DefaultValue( "" );
    model.Field( x => x.Query ).Editable( true );
    model.Field( x => x.ProcessType ).Editable( true );
    model.Field( x => x.Message ).Editable( true );
    model.Field( x => x.Enabled ).Editable( true );
    model.Field( x => x.ActivityType ).Editable( true );
} ) )
     )
</div>

@(Html.Kendo().ContextMenu()
.Name("RuleContextMenu")
    .Target("#RuleListGrid")
    .Events(events => events.Select("onRuleListContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
    }))