@using System.ComponentModel
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Enums
@using SLTrader.Tools
@using SLTrader.Models
@using BondFire.Entities

<script>
    function onContraRateSwingCheckData() {
        CheckGridData('#ContraRateSwingGrid');
    }

    var _ContractRateSwingGridSelectAll = false;
    var _originalContractRateSwingGrid = null;

    $(document).ready(function () {
        setTimeout(function () {
            _originalContractRateSwingGrid = $('#ContraRateSwingGrid').data('kendoGrid').getOptions();

            LoadGridLayout("#ContraRateSwingGrid");
        }, 5);
    });

    function onContraRateSwingGridLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#ContraRateSwingGrid");
        }, 5);
    }

    function onContraRateSwingChange(e) {
        $('#ContraRateSwingGrid').data("kendoGrid").dataSource.read();
    }


    function additionalContraRateSwingEntityData(e) {
        var entityId = $("#ContraRateSwingDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entityId,
        }
    }


    function onContraRateSwingDefaultLoad(e) {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    userPreference = valid;

                    var dropdownList = $('#ContraRateSwingDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $('#ContraRateSwingGrid').data("kendoGrid").dataSource.read();
                },
                error: function (valid) {
                    userPreference = null;
                }
            })
        }
        catch (e) {
            console.log(e.message);
        }
    }

 /*   $(function () {
        $('#ContraRateSwingGrid').on('click', '.enabledContraRateSwingChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#ContraRateSwingGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('Enabled', checked);
        });
    });*/
</script>


@(
 Html.Kendo().ToolBar()
    .Name("ContrRateSwingToolBar")
    .Resizable(true)
    .HtmlAttributes(new { @class = "tBar" })
    .Items(items =>
    { 
        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());

        items.Add().Template(Html.Kendo().DropDownList()
    .Name("ContraRateSwingDropdownList")
    .HtmlAttributes(new { @class="width90" })
    .Animation(true)
    .DataTextField("Custodian")
    .DataValueField("CompanyId")
    .OptionLabel("Empty List")
    .AutoBind(true)
    .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
    .Events(events => events.Change("onContraRateSwingChange").DataBound("onContraRateSwingDefaultLoad").Open("onContraEntityAutoCompleteResize"))
    .DataSource(dataSource => dataSource
    .Read(read => read
    .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
    .SelectedIndex(0).ToHtmlString());
    }))

<hr class="hr-white">
<div id="ContraRateSwingContent" class="grid-div">
    @(
 Html.Kendo().Grid<SL_ContraRateSwing>()
.Name("ContraRateSwingGrid")
.HtmlAttributes(new { @class = "grid" })
.Sortable()
.Filterable()
.NoRecords()
.Selectable()
.Editable(edit => edit.Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLContract)))
.Events(events =>
{
    events.DataBound("onContraRateSwingCheckData");
    events.ColumnHide("onContraRateSwingGridLayoutChange");
    events.ColumnShow("onContraRateSwingGridLayoutChange");
    events.ColumnResize("onContraRateSwingGridLayoutChange");
    events.ColumnReorder("onContraRateSwingGridLayoutChange");
})
    .ToolBar(tBar =>
    {
        tBar.Create();
    })
    .Columns(cols =>
    {
        cols.Bound(x => x.SLContraRateSwing).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        cols.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        cols.Bound(x => x.Enabled).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox' class='enabledContraRateSwingChkbx' value='#= Enabled #' " + "# if (Enabled) { #" + "checked='checked'" + "# } #" + "/>", "");
        cols.Bound(x => x.ContraEntity).GetColumnFormat(ColumnTypeEnum.String, false, "", "_ContraRateSwingContraEntityAutoComplete");
        cols.Bound(x => x.SwingEntity).GetColumnFormat(ColumnTypeEnum.String, false, "", "_ContraRateSwingEntityAutoComplete");
        cols.Bound(x => x.Spread).GetColumnFormat(ColumnTypeEnum.Rate, false, "", "");
        cols.Command(x => x.Edit()).Width(80);
    })
        .ColumnMenu( menu =>
        {
            menu.Columns( false );
            menu.Filterable( true );
            menu.Sortable( false );
            menu.ComponentType( "modern" );
        } )
     .Scrollable()
     .Navigatable()
     .Resizable(resize => resize.Columns(true))
     .DataSource(ds => ds.Ajax()
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(x => x.SLContraRateSwing);
            model.Field(x => x.SLContraRateSwing).Editable(false);
            model.Field(x => x.EntityId).Editable(false);
            model.Field(x => x.Enabled).Editable(true);
            model.Field(x => x.ContraEntity).Editable(true);
            model.Field(x => x.SwingEntity).Editable(true);
            model.Field(x => x.Spread).Editable(true);
        })
        .Read(read => read.Action("Read_ContraRateSwing", "ContraRateSwing", new { area = "DomesticTrading" }).Data("additionalContraRateSwingEntityData"))
        .Create(create => create.Action("Add_ContraRateSwing", "ContraRateSwing", new { area = "DomesticTrading" }).Data("additionalContraRateSwingEntityData"))
        .Update(update => update.Action("Update_ContraRateSwing", "ContraRateSwing", new { area = "DomesticTrading" })))
    )
</div>

