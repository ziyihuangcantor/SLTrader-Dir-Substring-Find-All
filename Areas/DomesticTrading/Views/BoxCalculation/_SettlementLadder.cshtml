@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools

<script type="text/javascript">
    var _boxSelectedRows = [];
    var _boxSelectAll = false;

    $(document).ready(function () {
        setTimeout(function () {
            LoadGridLayout("#SettlementLadderRangeDetails");
        }, 5);
    });
    
    function onSettlementLadderRangeGridLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#SettlementLadderRangeDetails");
        }, 5);
    }

    function onSettlementLadderRangeContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case "Refresh Data":
                onSettlementLadderRangeChange();
                break;

            case "Unsort":
                onSettlementLadderRangeUnsortGrid("#SettlementLadderRangeDetails");
                break;

            case "Select All":
                settlementLadderRangeSelectAll(true);
                break;

            case "Reset Grid":
                ResetUserLayout("#SettlementLadderRangeDetails");
                break;

            case "Export To Excel":
                exportToSettlementLadderRangeExcel();
                break;
        }
    }

    $('#SharedLabelCheckBox').change(function() {
        RefreshGrid("#SettlementLadderRangeDetails");
    });

    $(document).bind('keydown', 'ctrl+a', function (e) {
        if (e.altKey && (e.which == 65)) {
            e.preventDefault();

            settlementLadderRangeSelectAll(true);
            return false;
        }
    });

    function onSettlementLadderRangeUnsortGrid(e) {
        UnsortGrid(e);
    }

    function exportToSettlementLadderRangeExcel() {
        try {
            KendoGridToCSVConvertor("#SettlementLadderRangeDetails", 'SettlementLadderRangeDetails', _boxSelectAll);

            _boxSelectAll = false;
            _boxSelectedRows = [];
        }
        catch (e) {
            console.log(e.message);
            console.log(e.message);
        }
    }

    function settlementLadderRangeSelectAll(e) {
        try
        {
            var boxGrid = $("#SettlementLadderRangeDetails").data("kendoGrid");
            boxGrid.select(boxGrid.tbody.find(">tr"));
            _boxSelectAll = true;
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onSettlementLadderRangeRowChange(e) {
        e.preventDefault();

        try
        {
            var entityGrid = $("#SettlementLadderRangeDetails").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            var entityId = selectedItem["EntityId"];
            var effectiveDate = selectedItem["EffectiveDate"];
            var securityNumber = selectedItem["SecurityNumber"];
            var issueId = selectedItem["IssueId"];


            UpdateIssue(entityId, securityNumber);
            UpdateBox(effectiveDate, entityId, issueId);
            UpdateTrading(entityId, issueId);
            UpdateSharedView(entityId, securityNumber);
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onSettlementLadderRangeDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    userPreference = valid;

                    var dropdownList = $('#SettlementLadderRangeDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $('#SettlementLadderRangeDetails').data("kendoGrid").dataSource.read();
                },
                error: function (valid) {
                    userPreference = null;
                }
            })
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onSettlementLadderRangeCheckData(e) {
        CheckGridData('#SettlementLadderRangeDetails');
    }

    function additionalSettlementLadderRangeData() {
        var datepicker = $("#SettlementLadderRangeCalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entity = $("#SettlementLadderRangeDropdownList").data("kendoDropDownList");
      
        return {
            entityId: entity.value(),
            effectiveDate: value
        };
    }

    function onSettlementLadderRangeGridError(e) {
        ErrorGridData("#SettlementLadderRangeDetails");
    }

    function onSettlementLadderRangeCalculationError(e) {
        console.log(e.message);
    }

    function onSettlementLadderRangeChange() {
        $("#SettlementLadderRangeDetails").data("kendoGrid").dataSource.read();
    }
</script>

@(
 Html.Kendo().ToolBar()
    .Name("SettlementLadderRangeToolBar")
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("EffectiveDate").ToHtmlString());

        items.Add().Template(Html.Kendo().DatePicker()
                                .Name("SettlementLadderRangeCalander")
                                .Format("yyyy-MM-dd")
                                .Value(DateTime.Now)
                                .HtmlAttributes(new { @class = "Toolbar-Cell" })
                                .Events(events => events.Change("onSettlementLadderRangeChange")).ToHtmlString());

        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
        items.Add().Template(Html.Kendo().DropDownList()
                            .Name("SettlementLadderRangeDropdownList")
                            .HtmlAttributes(new { @class="width100" })
                            .DataTextField("Custodian")
                            .DataValueField("CompanyId")
                            .OptionLabel(LabelHelper.Text("OptionLabel"))
                            .AutoBind(true)
                            .Events(events => events.Change("onSettlementLadderRangeChange").DataBound("onSettlementLadderRangeDefaultLoad"))
                            .DataSource(dataSource => dataSource
                            .Events(events => events.Error("onSettlementLadderRangeCalculationError"))
                            .Read(read => read
                            .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                            .SelectedIndex(0).ToHtmlString());

    }))


<hr class="hr-white">
<div id="SettlementLadderRangeContent" class="grid-div">

    @(Html.Kendo().Grid<SL_SettlementLadderRangeProjection>()
        .Name("SettlementLadderRangeDetails")
        .HtmlAttributes(new { @class = "grid" })
        .Sortable(sort =>
               {
                   sort.AllowUnsort(true);
                   sort.Enabled(true);
                   sort.SortMode(GridSortMode.MultipleColumn);
               })
        .Scrollable(scrollable => scrollable.Virtual(true))
        .Filterable()
        .Navigatable()
        .ColumnMenu(colMenu =>
        {
            colMenu.Sortable(true);
            colMenu.Columns(true);
            colMenu.Filterable(true);
        })
        .Selectable(seclect => seclect.Mode(GridSelectionMode.Multiple))
        .Events(events =>
        {
            events.Change("onSettlementLadderRangeRowChange");
            events.DataBound("onSettlementLadderRangeCheckData");
            events.ColumnHide("onSettlementLadderRangeGridLayoutChange");
            events.ColumnShow("onSettlementLadderRangeGridLayoutChange");
            events.ColumnResize("onSettlementLadderRangeGridLayoutChange");
            events.ColumnReorder("onSettlementLadderRangeGridLayoutChange");
        })
        .Columns(columns =>
        {
            columns.Bound(x => x.SLSettlementLadder).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.EntityId).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.EffectiveDate).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.IssueId).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.Classification).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.Price).GetColumnFormat(ColumnTypeEnum.Money, false, "", "");
            columns.Bound(x => x.Today).GetColumnFormat(ColumnTypeEnum.Money, false, "#=GetPositionDirection(Today)#", "");
            columns.Bound(x => x.TodayPlusOne).GetColumnFormat(ColumnTypeEnum.Money, false, "#=GetPositionDirection(TodayPlusOne)#", "");
            columns.Bound(x => x.TodayPlusTwo).GetColumnFormat(ColumnTypeEnum.Money, false, "#=GetPositionDirection(TodayPlusTwo)#", "");
            columns.Bound(x => x.TodayPlusThree).GetColumnFormat(ColumnTypeEnum.Money, false, "#=GetPositionDirection(TodayPlusThree)#", "");
            columns.Bound(x => x.TodayPlusFour).GetColumnFormat(ColumnTypeEnum.Money, false, "#=GetPositionDirection(TodayPlusFour)#", "");
            columns.Bound(x => x.TodayPlusFive).GetColumnFormat(ColumnTypeEnum.Money, false, "#=GetPositionDirection(TodayPlusFive)#", "");
            columns.Bound(x => x.TodayPlusSix).GetColumnFormat(ColumnTypeEnum.Money, false, "#=GetPositionDirection(TodayPlusSix)#", "");
            columns.Bound(x => x.TodayPlusSeven).GetColumnFormat(ColumnTypeEnum.Money, false, "#=GetPositionDirection(TodayPlusSeven)#", "");
            columns.Bound(x => x.TodayPlusEight).GetColumnFormat(ColumnTypeEnum.Money, false, "#=GetPositionDirection(TodayPlusEight)#", "");
        })
        .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
        .Pageable(page =>
            {
                page.PageSizes(false);
                page.Enabled(true);
                page.Numeric(false);
                page.PreviousNext(false);
                page.Info(false);
            })
        .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(100)
        .ServerOperation(false)
        .Read(read => read
                 .Action("Read_SettlementLadderRange", "BoxCalculation", new { area = "DomesticTrading" })
                 .Data("additionalSettlementLadderRangeData").Type(HttpVerbs.Post))
           .Events(events => events.Error("onSettlementLadderRangeGridError"))
))

    @(Html.Kendo().ContextMenu()
.Name("SettlementladderRangeContextMenu")
.Orientation(ContextMenuOrientation.Vertical)
    .Target("#SettlementLadderRangeDetails")
.Events(events => events.Select("onSettlementLadderRangeContextMenuSelect"))
.Items(items =>
{
    items.Add().Text("Refresh Data");
    items.Add().Text("Unsort");
    items.Add().Text("Select All");
    items.Add().Text("Export To Excel");
})


    )
</div>
