@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools
@using BondFire.Entities.Projections

<script type="text/javascript">
    var _originalFPLendingAccountAccrualGridSelectAll = false;
    var _originalFPLendingAccountAccrualGrid = null;
    var _originalFPLendingAccountAccrualToolBar = null;

    $('#SharedLabelCheckBox').change(function () {
        RefreshGrid("#FPLendingAccountAccrualGrid");
    });

    $(document).ready(function () {
        setTimeout(function () {
            _originalFPLendingAccountAccrualGrid = $("#FPLendingAccountAccrualGrid").data('kendoGrid').getOptions();
            _originalFPLendingAccountAccrualToolBar = $("#FPLendingAccountAccrualGrid .k-grid-toolbar").html();

            LoadGridLayout("#FPLendingAccountAccrualGrid");

            $("#FPLendingAccountAccrualGrid .k-grid-toolbar").html(_originalFPLendingAccountAccrualToolBar);
            $("#FPLendingAccountAccrualGrid .k-grid-toolbar").addClass("k-grid-top");
        }, 5);
    });

    function onFPLendingAccountAccrualLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#FPLendingAccountAccrualGrid");
        }, 5);
    }

    function onFPLendingAccountAccrualSumamryLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#FPLendingAccountAccrualSummaryGrid");
        }, 5);
    }


    function onFPLendingAccountAccrualCheckData() {
        CheckGridData('#FPLendingAccountAccrualGrid');
    }

    function createFPLendingAccountAccrualData() {
        var entity = $("#FPLendingAccountAccrualDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity,
            operatorId: '@Convert.ToInt32(SL_Operator.gte)'
        };
    }

    function additionalFPLendingAccountAccrualData() {
        var startdatedatepicker = $("#FPLendingAccountAccrualStartDateCalander").data("kendoDatePicker");
        var startdatevalue = kendo.toString(startdatedatepicker.value(), 'yyyy-MM-dd');

        var stopdatedatepicker = $("#FPLendingAccountAccrualStopDateCalander").data("kendoDatePicker");
        var stopdatevalue = kendo.toString(stopdatedatepicker.value(), 'yyyy-MM-dd');


        var entity = $("#FPLendingAccountAccrualDropdownList").data("kendoDropDownList").value();

        return {
            startDate: startdatevalue,
            stopDate: stopdatevalue,
            entityId: entity
        };
    }

    function onFPLendingAccountAccrualEdit(e) {
        var input = e.container.find("input");
        setTimeout(function () {
            input.select();
        }, 25);
    }

    function onFPLendingAccountAccrualDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function(valid) {
                    userPreference = valid;

                    var dropdownList = $('#FPLendingAccountAccrualDropdownList').data("kendoDropDownList");

                    dropdownList.select(function(dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $('#FPLendingAccountAccrualGrid').data("kendoGrid").dataSource.read();
                },
                error: function(valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onFPLendingAccountAccrualChange() {
        $("#FPLendingAccountAccrualGrid").data("kendoGrid").dataSource.read();
    }

    function onFPLendingAccountAccrualSelectAll(e) {
        try {
            var FPLendingAccountAccrualGrid = $("#FPLendingAccountAccrualGrid").data("kendoGrid");
            FPLendingAccountAccrualGrid.select(FPLendingAccountAccrualGrid.tbody.find(">tr"));

            _originalFPLendingAccountAccrualGridSelectAll = true;
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onFPLendingAccountAccrualContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#FPLendingAccountAccrualGrid");
                break;

            case "Reset Filter":
                ResetFilter("#FPLendingAccountAccrualGrid");
                break;

            case 'Select All':
                onFPLendingAccountAccrualSelectAll(true);
                break;

            case 'Export To Excel':
                KendoGridToCSVConvertor("#FPLendingAccountAccrualGrid", 'FPLendingAccountAccrualGrid', _originalFPLAccountConfigGridSelectAll);
                break;

            case "Reset Grid":
                ResetUserLayout("#FPLendingAccountAccrualGrid");

                $("#FPLendingAccountAccrualGrid").data('kendoGrid').setOptions(_originalFPLendingAccountAccrualGrid);
                $("#FPLendingAccountAccrualGrid .k-grid-toolbar").html(_originalFPLendingAccountAccrualToolBar);
                $("#FPLendingAccountAccrualGrid .k-grid-toolbar").addClass("k-grid-top");
                $('#FPLendingAccountAccrualGrid').data("kendoGrid").dataSource.read();
                break;

            case 'Unsort':
                UnsortGrid("#FPLendingAccountAccrualGrid");
                break;
        }
    }


    function onFPLendingAccountAccrualRowChange(e) {
        try {
            var entityGrid = $("#FPLendingAccountAccrualGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());
            var entityId = selectedItem["EntityId"];
            var effectiveDate = selectedItem["EffectiveDate"];
            var securityNumber = selectedItem["SecurityNumber"];

            var issueId = selectedItem["IssueId"];

            SidePanelUpdate(effectiveDate, entityId, issueId, securityNumber);
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onAccountAccrualSearchChange(e) {
        e.preventDefault();

        try {
            var cusipTextBox = document.getElementById("AccountAccrualSecuritySearchTextBox").value;
            console.log(cusipTextBox);

            QuickColumnGrid("#FPLendingAccountAccrualGrid", cusipTextBox);
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onFPLendingAccountAccrualRowChange(e) {
        _originalFPLendingAccountAccrualGridSelectAll = false;
    }
</script>

<style scoped>
    #AccountAcrrualTable td {
        margin: 0px;
        padding: 0px;
    }
</style>
@(
 Html.Kendo().ToolBar()
    .Name("FPLendingAccountAccrualToolBar")
    .Resizable(true)
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("StartDate").ToHtmlString());
        items.Add().Template(Html.Kendo().DatePicker()
                    .Name("FPLendingAccountAccrualStartDateCalander")
                    .Format("yyyy-MM-dd")
                    .Value(DateTime.Now)
                    .Events(events => events.Change("onFPLendingAccountAccrualChange"))
                    .ToHtmlString());

        items.Add().Template(LabelHelper.Label("StopDate").ToHtmlString());
        items.Add().Template(Html.Kendo().DatePicker()
                    .Name("FPLendingAccountAccrualStopDateCalander")
                    .Format("yyyy-MM-dd")
                    .Events(events => events.Change("onFPLendingAccountAccrualChange"))
                    .Value(DateTime.Now)
                    .ToHtmlString());

        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
        items.Add().Template(Html.Kendo().DropDownList()
                            .Name("FPLendingAccountAccrualDropdownList")
                            .HtmlAttributes(new { @class = "width90" })
                            .DataTextField("Custodian")
                            .DataValueField("CompanyId")
                            .OptionLabel(LabelHelper.Text("OptionLabel"))
                            .AutoBind(true)
                                .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                            .Events(events => events.Change("onFPLendingAccountAccrualChange").DataBound("onFPLendingAccountAccrualDefaultLoad").Open("onContraEntityAutoCompleteResize"))
                            .DataSource(dataSource => dataSource
                            .Read(read => read
                            .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                            .SelectedIndex(0).ToHtmlString());


        items.Add().Template(
  "<table ID='AccountAcrrualTable'><tr><td>" +
  LabelHelper.LabelFor("AccountAccrualTickerSearch", "AccountAccrualSecuritySearchTextBox").ToHtmlString() + "</td><td>" +
  Html.Kendo().AutoComplete().Name("AccountAccrualSecuritySearchTextBox").HtmlAttributes(new { @class = "width90" }).Events(eve => eve.Filtering("onAccountAccrualSearchChange")).Suggest(false).ToHtmlString() + "</td></tr></table>"
  ).HtmlAttributes(new { @class = "float-right" });
    }))

<hr class="hr-white">

<div id="FPLendingAccountAccrualContent" class="grid-div">
    @(
 Html.Kendo().Grid<SL_FPLendingAccountAccrualProjection>()
        .Name("FPLendingAccountAccrualGrid")
        .Sortable()
        .HtmlAttributes(new { @class = "grid" })
        .Scrollable()
        .Filterable()
        .NoRecords()
        .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple))
        .Navigatable()
            .Reorderable(re =>
            {
                re.Columns(true);
            })
        .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
        .Events(events =>
        {
            events.DataBound("onFPLendingAccountAccrualCheckData");
            events.Change("onFPLendingAccountAccrualRowChange");
            events.ColumnHide("onFPLendingAccountAccrualLayoutChange");
            events.ColumnShow("onFPLendingAccountAccrualLayoutChange");
            events.ColumnResize("onFPLendingAccountAccrualLayoutChange");
            events.ColumnReorder("onFPLendingAccountAccrualLayoutChange");
            events.Change("onFPLendingAccountAccrualRowChange");
        })
        .Columns(columns =>
        {
            columns.Bound(x => x.SLAccountAccrual).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.EffectiveDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
            columns.Bound(x => x.AccountNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.IssueId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.SecNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "Date");
            columns.Bound(x => x.ISIN).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.Sedol).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.ShareQty).GetColumnFormat(ColumnTypeEnum.Position, false, "", "");
            columns.Bound(x => x.ShareQtyAllocated).GetColumnFormat(ColumnTypeEnum.Position, false, "", "");
            columns.Bound(x => x.AccrualRate).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(AccrualRate)#", "");
            columns.Bound(x => x.Accrual).GetColumnFormat(ColumnTypeEnum.Money, true, "", "");
            columns.Bound(x => x.AccrualBroker).GetColumnFormat(ColumnTypeEnum.Money, true, "", "");
            columns.Bound(x => x.AccrualMarked).GetColumnFormat(ColumnTypeEnum.Money, true, "", "");
        })
        .ColumnMenu( menu =>
        {
            menu.Columns( true );
            menu.Filterable( true );
            menu.Sortable( true );
            menu.ComponentType( "modern" );
        } )
         .DataSource(dataSource => dataSource
            .Ajax()
            .Aggregates(agg =>
            {
                agg.Add(x => x.Accrual).Sum();
                agg.Add(x => x.AccrualBroker).Sum();
                agg.Add(x => x.AccrualMarked).Sum();
            })
            .Model(model =>
            {
                model.Id(x => x.IssueId);
            })
            .Read(read => read.Action("LoadFPLAccountPayoutByDateRangeAndEntity", "FPLending", new { area = "DomesticTrading" }).Data("additionalFPLendingAccountAccrualData")))
    )
</div>

@(Html.Kendo().ContextMenu()
.Name("FPLendingAccountAccrualContextMenu")
    .Target("#FPLendingAccountAccrualGrid")
    .Events(events => events.Select("onFPLendingAccountAccrualContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
        items.Add().Separator(true);
        items.Add().Text("Select All");
        items.Add().Text("Export To Excel");
    }))