@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools
@using BondFire.Entities.Projections

<script type="text/javascript">
    var _originalFPLCollateralSubstitutionConfigGridSelectAll = false;
    var _originalFPLCollateralSubstitutionConfigGrid = null;
    var _originalFPLCollateralSubstitutionConfigToolBar = null;

    $('#SharedLabelCheckBox').change(function () {
        RefreshGrid("#FPLCollateralSubstitutionConfigGrid");
    });

    $(document).ready(function () {
        setTimeout(function () {
            _originalFPLCollateralSubstitutionConfigGrid = $("#FPLCollateralSubstitutionConfigGrid").data('kendoGrid').getOptions();
            _originalFPLCollateralSubstitutionConfigToolBar = $("#FPLCollateralSubstitutionConfigGrid .k-grid-toolbar").html();

            LoadGridLayout("#FPLCollateralSubstitutionConfigGrid");

            $("#FPLCollateralSubstitutionConfigGrid .k-grid-toolbar").html(_originalFPLCollateralSubstitutionConfigToolBar);
            $("#FPLCollateralSubstitutionConfigGrid .k-grid-toolbar").addClass("k-grid-top");
        }, 5);
    });

    function onFPLCollateralSubstitutionConfigLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#FPLCollateralSubstitutionConfigGrid");
        }, 5);
    }

    function onFPLCollateralSubstitutionConfigCheckData() {
        CheckGridData('#FPLCollateralSubstitutionConfigGrid');
    }

    function createFPLCollateralSubstitutionConfigData() {
        var entity = $("#FPLCollateralSubstitutionConfigDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity,
            entityToDisplay: entity
        };
    }

    function additionalFPLCollateralSubstitutionConfigData() {
        var entity = $("#FPLCollateralSubstitutionConfigDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity
        };
    }

    function onFPLCollateralSubstitutionConfigEdit(e) {
        var input = e.container.find("input");
        setTimeout(function () {
            input.select();
        }, 25);
    }

    function onFPLCollateralSubstitutionConfigDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    userPreference = valid;

                    var dropdownList = $('#FPLCollateralSubstitutionConfigDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $('#FPLCollateralSubstitutionConfigGrid').data("kendoGrid").dataSource.read();
                },
                error: function (valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onFPLCollateralSubstitutionConfigChange() {
        $("#FPLCollateralSubstitutionConfigGrid").data("kendoGrid").dataSource.read();
    }

    function onFPLCollateralSubstitutionConfigSelectAll(e) {
        try {
            var FPLCollateralSubstitutionConfigGrid = $("#FPLCollateralSubstitutionConfigGrid").data("kendoGrid");
            FPLCollateralSubstitutionConfigGrid.select(FPLCollateralSubstitutionConfigGrid.tbody.find(">tr"));

            _originalFPLCollateralSubstitutionConfigGridSelectAll = true;
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onFPLCollateralSubstitutionConfigContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#FPLCollateralSubstitutionConfigGrid");
                break;

            case "Reset Filter":
                ResetFilter("#FPLCollateralSubstitutionConfigGrid");
                break;


            case 'Select All':
                onFPLCollateralSubstitutionConfigSelectAll(true);
                break;

            case 'Export To Excel':
                KendoGridToCSVConvertor("#FPLCollateralSubstitutionConfigGrid", 'FPLCollateralSubstitutionConfigGrid', _originalFPLCollateralSubstitutionConfigGridSelectAll);
                break;

            case "Reset Grid":
                ResetUserLayout("#FPLCollateralSubstitutionConfigGrid");

                $("#FPLCollateralSubstitutionConfigGrid").data('kendoGrid').setOptions(_originalFPLCollateralSubstitutionConfigGrid);
                $("#FPLCollateralSubstitutionConfigGrid .k-grid-toolbar").html(_originalFPLCollateralSubstitutionConfigToolBar);
                $("#FPLCollateralSubstitutionConfigGrid .k-grid-toolbar").addClass("k-grid-top");
                $('#FPLCollateralSubstitutionConfigGrid').data("kendoGrid").dataSource.read();
                break;

            case 'Unsort':
                UnsortGrid("#FPLCollateralSubstitutionConfigGrid");
                break;
        }
    }

    $(function () {
        $('#FPLCollateralSubstitutionConfigGrid').on('click', '.IsOptedChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#FPLCollateralSubstitutionConfigGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('IsOpted', checked);
            dataSource.sync();
        });

        $('#FPLCollateralSubstitutionConfigGrid').on('click', '.AllowSendConfirmChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#FPLCollateralSubstitutionConfigGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('AllowSendConfirm', checked);
            dataSource.sync();
        });
    });

    function onFPLendingDefaultOption() {
        try {
            HelperPartialWindow(
                null,
                'FPLending Defaults',
                490,
                490,
                '/DomesticTrading/FPLending/LoadFPLendingDefaultOptionsPartial'
            );
        }
        catch (e) {
            DisplayControllerByStringError("Info", e.message);
        }
    }

    function onFPLCollateralSubstitutionConfigRowChange(e) {
        _originalFPLCollateralSubstitutionConfigGridSelectAll = false;
    }
</script>

@(
     Html.Kendo().ToolBar()
        .Name("FPLCollateralSubstitutionConfigToolBar")
        .Resizable(true)
        .Items(items =>
        {
            items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
            items.Add().Template(Html.Kendo().DropDownList()
                                .Name("FPLCollateralSubstitutionConfigDropdownList")
                                .HtmlAttributes(new { @class = "width90" })
                                .DataTextField("Custodian")
                                .DataValueField("CompanyId")
                                .OptionLabel(LabelHelper.Text("OptionLabel"))
                                .AutoBind(true)
                                    .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                           "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                           "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                                .Events(events => events.Change("onFPLCollateralSubstitutionConfigChange").DataBound("onFPLCollateralSubstitutionConfigDefaultLoad").Open("onContraEntityAutoCompleteResize"))
                                .DataSource(dataSource => dataSource
                                .Read(read => read
                                .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                                .SelectedIndex(0).ToHtmlString());
        }))

<hr class="hr-white">

<div id="FPLCollateralSubstitutionConfigContent" class="grid-div">
    @(
         Html.Kendo().Grid<SL_FPLCollateralSubstitution>()
                .Name("FPLCollateralSubstitutionConfigGrid")
                .Sortable()
                .HtmlAttributes(new { @class = "grid" })
                .Scrollable()
                .Filterable()
                .NoRecords()
                .Editable(e => e.Mode(GridEditMode.InLine).Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLFPLAccountConfig)).DisplayDeleteConfirmation(false))
                .Scrollable(scroll =>
                {
                    scroll.Enabled(true);
                    scroll.Virtual(true);
                })
                .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple))
                .Navigatable()
                    .Reorderable(re =>
                    {
                        re.Columns(true);
                    })
                .ColumnMenu(menu =>
                {
                    menu.Columns(true);
                    menu.Enabled(true);
                    menu.Filterable(true);
                    menu.Sortable(true);
                    menu.ComponentType( "modern" );
                } )
                .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
                .Pageable(pagable =>
                {
                    pagable.Numeric(false);
                    pagable.PreviousNext(false);
                    pagable.Messages(config =>
                    {
                        config.Display("Showing {2} record(s)");
                    });
                })
                .Events(events =>
                {
                    events.DataBound("onFPLCollateralSubstitutionConfigCheckData");
                    events.Edit("onFPLCollateralSubstitutionConfigEdit");
                    events.ColumnHide("onFPLCollateralSubstitutionConfigLayoutChange");
                    events.ColumnShow("onFPLCollateralSubstitutionConfigLayoutChange");
                    events.ColumnResize("onFPLCollateralSubstitutionConfigLayoutChange");
                    events.ColumnReorder("onFPLCollateralSubstitutionConfigLayoutChange");
                    events.Change("onFPLCollateralSubstitutionConfigRowChange");
                })
                .ToolBar(toolbar => toolbar.Create())
                .Columns(columns =>
                {
                    columns.Bound(x => x.SLFPLCollateralSubstitution).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                    columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                    columns.Bound(x => x.AccountNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                    columns.Bound(x => x.AccountType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                    columns.Bound(x => x.AssociatedAccount).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                    columns.Bound(x => x.AssociatedAccountType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                    columns.Bound(x => x.CustomerWashAccount).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                    columns.Bound(x => x.CustomerWashAccountType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                    columns.Bound(x => x.CustomerCashAccount).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                    columns.Bound(x => x.CustomerCashAccountType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                    columns.Bound(x => x.BankControlAccount).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                    columns.Bound(x => x.BankControlAccountType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                    columns.Bound(x => x.ShortName).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                    columns.Bound(x => x.PercentCollateralization).GetColumnFormat(ColumnTypeEnum.Rate, false, "", "");
                    columns.Bound(x => x.IsOpted).GetColumnFormat(ColumnTypeEnum.String, false, "<input class='IsOptedChkbx' type='checkbox' #=(IsOpted) ? checked='checked' : '' # />", "");
                    columns.Bound(x => x.Comment).GetColumnFormat(ColumnTypeEnum.String, false, "", "");

                    columns.Command(x =>
                    {
                        if (SessionSecurityService.IsEditable(ManagerTask.EditSLFPLAccountConfig))
                        {
                            x.Edit();
                            x.Destroy();
                        }
                    });
                })
                 .DataSource(dataSource => dataSource
                    .Ajax()
                    .ServerOperation(false)
                    .PageSize(50)
                    .Read(read => read.Action("Read_FPLCollateralSubstitutionConfig", "FPLending", new { area = "DomesticTrading" }).Data("additionalFPLCollateralSubstitutionConfigData"))
                    .Update(update => update.Action("Update_FPLCollateralSubstitutionConfig", "FPLending", new { area = "DomesticTrading" }))
                    .Create(create => create.Action("Create_FPLCollateralSubstitutionConfig", "FPLending", new { area = "DomesticTrading" }).Data("additionalFPLCollateralSubstitutionConfigData"))
                    .Destroy(destroy => destroy.Action("Delete_FPLCollateralSubstitutionConfig", "FPLending", new { area = "DomesticTrading" }))
                    .Model(model =>
                    {
                        model.Id(x => x.SLFPLCollateralSubstitution);
                        model.Field(x => x.EntityId).Editable(false);
                        model.Field(x => x.AccountNumber).Editable(SessionSecurityService.IsEditable(ManagerTask.EditSLFPLAccountConfig));

                        model.Field(x => x.AssociatedAccount).Editable(SessionSecurityService.IsEditable(ManagerTask.EditSLFPLAccountConfig));
                        model.Field(x => x.AssociatedAccountType).Editable(SessionSecurityService.IsEditable(ManagerTask.EditSLFPLAccountConfig));

                        model.Field(x => x.CustomerWashAccount).Editable(SessionSecurityService.IsEditable(ManagerTask.EditSLFPLAccountConfig));
                        model.Field(x => x.CustomerWashAccountType).Editable(SessionSecurityService.IsEditable(ManagerTask.EditSLFPLAccountConfig));

                        model.Field(x => x.CustomerCashAccount).Editable(SessionSecurityService.IsEditable(ManagerTask.EditSLFPLAccountConfig));
                        model.Field(x => x.CustomerCashAccountType).Editable(SessionSecurityService.IsEditable(ManagerTask.EditSLFPLAccountConfig));

                        model.Field(x => x.BankControlAccount).Editable(SessionSecurityService.IsEditable(ManagerTask.EditSLFPLAccountConfig));
                        model.Field(x => x.BankControlAccountType).Editable(SessionSecurityService.IsEditable(ManagerTask.EditSLFPLAccountConfig));

                        model.Field(x => x.AccountType).Editable(SessionSecurityService.IsEditable(ManagerTask.EditSLFPLAccountConfig));
                        model.Field(x => x.ShortName).Editable(SessionSecurityService.IsEditable(ManagerTask.EditSLFPLAccountConfig));
                        model.Field(x => x.PercentCollateralization).Editable(SessionSecurityService.IsEditable(ManagerTask.EditSLFPLAccountConfig));
                        model.Field(x => x.IsOpted).Editable(SessionSecurityService.IsEditable(ManagerTask.EditSLFPLAccountConfig));
                        model.Field(x => x.Comment).Editable(SessionSecurityService.IsEditable(ManagerTask.EditSLFPLAccountConfig));
                    }))
    )
</div>

@(Html.Kendo().ContextMenu()
    .Name("FPLCollateralSubstitutionConfigContextMenu")
        .Target("#FPLCollateralSubstitutionConfigGrid")
        .Events(events => events.Select("onFPLCollateralSubstitutionConfigContextMenuSelect"))
        .Items(items =>
        {
            items.Add().Text("AutoFit Columns");
            items.Add().Text("Unsort").Enabled(true);
            items.Add().Text("Reset Filter").Enabled(true);
            items.Add().Text("Reset Grid").Enabled(true);
            items.Add().Separator(true);
            items.Add().Text("Select All");
            items.Add().Text("Export To Excel");
        }))