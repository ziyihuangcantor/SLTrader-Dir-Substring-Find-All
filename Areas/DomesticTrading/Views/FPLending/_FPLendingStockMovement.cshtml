@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools
@using BondFire.Entities.Projections

<script type="text/javascript">
    var _originalFPLStockMovementGridSelectAll = false;
    var _originalFPLStockMovementGrid = null;
    var _originalFPLStockMovementConfigToolBar = null;

    $('#SharedLabelCheckBox').change(function () {
        RefreshGrid("#FPLStockMovementGrid");
    });

    $(document).ready(function () {
        setTimeout(function () {
            _originalFPLStockMovementGrid = $("#FPLStockMovementGrid").data('kendoGrid').getOptions();
            _originalFPLStockMovementConfigToolBar = $("#FPLStockMovementGrid .k-grid-toolbar").html();

            LoadGridLayout("#FPLStockMovementGrid");

            $("#FPLStockMovementGrid .k-grid-toolbar").html(_originalFPLStockMovementConfigToolBar);
            $("#FPLStockMovementGrid .k-grid-toolbar").addClass("k-grid-top");
        }, 5);
    });

    function onFPLStockMovementConfigLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#FPLStockMovementGrid");
        }, 5);
    }

    function onFPLStockMovementConfigCheckData() {
        CheckGridData('#FPLStockMovementGrid');
    }

    function createFPLStockMovementConfigData() {
        var entity = $("#FPLStockMovementConfigDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity,
            entityToDisplay: entity
        };
    }

    function additionalFPLStockMovementConfigData() {
        var effectiveDatePicker = $("#FPLStockMovementConfigCalander").data("kendoDatePicker");
        var effectiveDateValue = kendo.toString(effectiveDatePicker.value(), 'yyyy-MM-dd');

        var entity = $("#FPLStockMovementConfigDropdownList").data("kendoDropDownList").value();

        return {
            effectiveDate: effectiveDateValue,
            entityId: entity
        };
    }

    function onFPLStockMovementConfigEdit(e) {
        var input = e.container.find("input");
        setTimeout(function () {
            input.select();
        }, 25);
    }

    function onFPLStockMovementConfigDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function(valid) {
                    userPreference = valid;

                    var dropdownList = $('#FPLStockMovementConfigDropdownList').data("kendoDropDownList");

                    dropdownList.select(function(dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $('#FPLStockMovementGrid').data("kendoGrid").dataSource.read();
                },
                error: function(valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onFPLStockMovementConfigChange() {
        $("#FPLStockMovementGrid").data("kendoGrid").dataSource.read();
    }


    function onFPLStockMovementConfiSelectAll(e) {
        try {
            var FPLStockMovementGrid = $("#FPLStockMovementGrid").data("kendoGrid");
            FPLStockMovementGrid.select(FPLStockMovementGrid.tbody.find(">tr"));

            _originalFPLStockMovementGridSelectAll = true;
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onFPLStockMovementConfigContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#FPLStockMovementGrid");
                break;

            case "Reset Filter":
                ResetFilter("#FPLStockMovementGrid");
                break;

            case 'Select All':
                onFPLStockMovementConfiSelectAll(true);
                break;

            case 'Export To Excel':
                KendoGridToCSVConvertor("#FPLStockMovementGrid", 'FPLStockMovementGrid', _originalFPLStockMovementGridSelectAll);
                break;


            case "Reset Grid":
                ResetUserLayout("#FPLStockMovementGrid");

                $("#FPLStockMovementGrid").data('kendoGrid').setOptions(_originalFPLStockMovementGrid);
                $("#FPLStockMovementGrid .k-grid-toolbar").html(_originalFPLStockMovementConfigToolBar);
                $("#FPLStockMovementGrid .k-grid-toolbar").addClass("k-grid-top");
                $('#FPLStockMovementGrid').data("kendoGrid").dataSource.read();
                break;

            case 'Unsort':
                UnsortGrid("#FPLStockMovementGrid");
                break;
        }
    }

    $(function () {
        $('#FPLStockMovementGrid').on('click', '.IsOptedChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#FPLStockMovementGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('IsOpted', checked);
            dataSource.sync();
        });

        $('#FPLStockMovementGrid').on('click', '.AllowSendConfirmChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#FPLStockMovementGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('AllowSendConfirm', checked);
            dataSource.sync();
        });
    });

    function onFPLendingDefaultOption() {
        try {
            HelperPartialWindow(
                null,
                'FPLending Defaults',
                490,
                490,
                '/DomesticTrading/FPLending/LoadFPLendingDefaultOptionsPartial'
            );
        }
        catch (e) {
            DisplayControllerByStringError("Info", e.message);
        }
    }

    function onFPLStockMovementRowChange(e) {
        _originalFPLStockMovementGridSelectAll = false;
    }
</script>

@(
 Html.Kendo().ToolBar()
    .Name("FPLStockMovementConfigToolBar")
    .Resizable(true)
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("EffectiveDate").ToHtmlString());
        items.Add().Template(Html.Kendo().DatePicker()
                    .Name("FPLStockMovementConfigCalander")
                    .Format("yyyy-MM-dd")
                    .Value(DateTime.Now)
                    .Events(events => events.Change("onFPLStockMovementConfigChange"))
                    .ToHtmlString());

        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
        items.Add().Template(Html.Kendo().DropDownList()
                            .Name("FPLStockMovementConfigDropdownList")
                            .HtmlAttributes(new { @class = "width90" })
                            .DataTextField("Custodian")
                            .DataValueField("CompanyId")
                            .OptionLabel(LabelHelper.Text("OptionLabel"))
                            .AutoBind(true)
                                .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                            .Events(events => events.Change("onFPLStockMovementConfigChange").DataBound("onFPLStockMovementConfigDefaultLoad").Open("onContraEntityAutoCompleteResize"))
                            .DataSource(dataSource => dataSource
                            .Read(read => read
                            .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                            .SelectedIndex(0).ToHtmlString());

        items.Add().Template(Html.Kendo().Button().Name("FPLStockMovementRefreshButton").Content("<i class='fa fa-refresh fa-1x'></i>").Events(ev => ev.Click("onFPLStockMovementConfigChange")).ToHtmlString());
    }))

<hr class="hr-white">

<div id="FPLStockMovementConfigContent" class="grid-div">
    @(
 Html.Kendo().Grid<SL_FPLendingStockMovementProjection>()
        .Name("FPLStockMovementGrid")
        .Sortable()
        .HtmlAttributes(new { @class = "grid" })
        .Scrollable()
        .Filterable()
        .NoRecords()
            .Reorderable(re =>
            {
                re.Columns(true);
            })
        .Scrollable(scroll =>
        {
            scroll.Enabled(true);
            scroll.Virtual(true);
        })
        .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple))
        .Navigatable()
        .ColumnMenu(menu =>
        {
            menu.Columns(true);
            menu.Enabled(true);
            menu.Filterable(true);
            menu.Sortable(true);
            menu.ComponentType( "modern" );
        } )
        .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
        .Pageable(pagable =>
        {
            pagable.Numeric(false);
            pagable.PreviousNext(false);
            pagable.Messages(config =>
            {
                config.Display("Showing {2} record(s)");
            });
        })
        .Events(events =>
        {
            events.DataBound("onFPLStockMovementConfigCheckData");
            events.ColumnHide("onFPLStockMovementConfigLayoutChange");
            events.ColumnShow("onFPLStockMovementConfigLayoutChange");
            events.ColumnResize("onFPLStockMovementConfigLayoutChange");
            events.ColumnReorder("onFPLStockMovementConfigLayoutChange");
            events.Change("onFPLStockMovementRowChange");
        })
        .Columns(columns =>
        {
            columns.Bound(x => x.EffectiveDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "").Hidden(true);
            columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);

            columns.Bound(x => x.AccountNumberFrom).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.AccountTypeFrom).GetColumnFormat(ColumnTypeEnum.String, false, "", "");

            columns.Bound(x => x.AccountNumberTo).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.AccountTypeTo).GetColumnFormat(ColumnTypeEnum.String, false, "", "");

            columns.Bound(x => x.IssueId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.SecNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "Date");
            columns.Bound(x => x.ISIN).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.Sedol).GetColumnFormat(ColumnTypeEnum.String, false, "", "");


            columns.Bound(x => x.Quantity).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(Quantity)#", "");
            columns.Bound(x => x.Amount).GetColumnFormat(ColumnTypeEnum.Money, false, "#=GetMoneyDirection(Amount)#", "");
            columns.Bound(x => x.StatusMain).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.Comment).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.MemoInfo).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        })
         .DataSource(dataSource => dataSource
            .Ajax()
            .ServerOperation(false)
            .PageSize(50)
            .Sort(sort =>
            {
                sort.Add(x => x.Comment).Ascending();
            })
            .Read(read => read.Action("Read_FPLStockMovement", "FPLending", new { area = "DomesticTrading" }).Data("additionalFPLStockMovementConfigData"))
            .Model(model =>
            {
                model.Id(x => x.IssueId);
            })))
</div>

@(Html.Kendo().ContextMenu()
.Name("FPLStockMovementConfigContextMenu")
    .Target("#FPLStockMovementGrid")
    .Events(events => events.Select("onFPLStockMovementConfigContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
        items.Add().Separator(true);
        items.Add().Text("Select All");
        items.Add().Text("Export To Excel");
    }))