@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools

@model IEnumerable<FileDownloadConfig>


<style scoped>
    #ClientFileImportDiv {
        max-width:600px;
    }
</style>
<script>
    function onFileDownloadConfigCheckData(e) {
        CheckGridData("#FileDownloadConfigGrid");
    }

    function onFileDownloadConfigLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#FileDownloadConfigGrid");
        }, 5);
    }

    function onFileDownloadConfigCreateData(e) {

    }
</script>
<div id="ClientFileImportDiv" class="grid-div">
    @(Html.Kendo().Grid(Model)
                                           .Name("FileDownloadConfigGrid")                                           
                                           .NoRecords()
                                              .ColumnMenu(columnMenu =>
                                              {
                                                  columnMenu.Filterable(true);
                                                  columnMenu.Columns(true);
                                                  columnMenu.Sortable(true);
                                                  columnMenu.ComponentType( "modern" );
                                              })
                                    .Reorderable(reorder =>
                                    {
                                        reorder.Columns(true);
                                    })
                                    .Resizable(resize =>
                                    {
                                        resize.Columns(true);
                                    })
                                        .AllowCopy(copy =>
                                        {
                                            copy.Enabled(true);
                                        })
                                               .HtmlAttributes(new { @class = "grid" })
                                               .Selectable(select =>
                                               {
                                                   select.Enabled(true);
                                                   select.Mode(GridSelectionMode.Single);
                                                   select.Type(GridSelectionType.Row);
                                               })
                                               .Editable(x =>
                                               {
                                                   x.Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLInventory));
                                                   x.Mode(GridEditMode.InLine);
                                               })
                                               .ToolBar(t =>
                                               {
                                                   t.Create();
                                               })
                                               .Events(events =>
                                               {                                                   
                                                   events.DataBound("onFileDownloadConfigCheckData");
                                                   events.ColumnHide("onFileDownloadConfigLayoutChange");
                                                   events.ColumnShow("onFileDownloadConfigLayoutChange");
                                                   events.ColumnResize("onFileDownloadConfigLayoutChange");
                                                   events.ColumnReorder("onFileDownloadConfigLayoutChange");
                                               })
                                               .Columns(cols =>
                                               {
                                                   cols.Bound(x => x.DateTimeId).GetColumnFormat(ColumnTypeEnum.DateTime, false, "", "").Hidden(true);
                                                   cols.Bound(x => x.SLFileDownloadConfigId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                                   cols.Bound(x => x.SLFileDownloadType).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                                   cols.Bound(x => x.RemoteHost).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                                   cols.Bound(x => x.UserName).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                                   cols.Bound(x => x.Password).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                                   cols.Bound(x => x.Domain).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                                   cols.Command(x => x.Edit());
                                               })
                                               .Scrollable(scroll =>
                                               {
                                                   scroll.Enabled(true);
                                                   scroll.Virtual(true);
                                               })
                                               .DataSource(ds =>
                                               {
                                                   ds.Ajax()
               .ServerOperation(false)
               .Model(x =>
               {
                   x.Id(q => q.SLFileDownloadConfigId);
                   x.Field(q => q.SLFileDownloadConfigId).Editable(false);
                   x.Field(q => q.DateTimeId).Editable(false);
               })
               .Update(update => update.Action("Update_FileDownloadConfig", "FileImport", new { area = "DomesticTrading" }))
               .Create(create => create.Action("Add_FileDownloadConfig", "FileImport", new { area = "DomesticTrading" }).Data("onFileDownloadConfigCreateData"));
                                               }))