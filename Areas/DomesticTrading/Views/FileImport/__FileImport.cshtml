@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools

<script>
    $('#SharedLabelCheckBox').change(function () {
        $("#ClientGrid").data("kendoGrid").refresh();
        $("#ClientFileGrid").data("kendoGrid").refresh();
        $("#ClientFileLayoutGrid").data("kendoGrid").refresh();
    })

    var _originalClientGrid = null;
    var _originalClientFileLayoutGrid = null;
    var _originalClientFileGrid = null;

    var _originalClientGridToolBar = null;
    var _originalClientFileLayoutGridToolBar = null;
    var _originalClientFileGridToolBar = null;


    $(document).ready(function () {
        setTimeout(function () {

            _originalClientGrid = $("#ClientGrid").data('kendoGrid').getOptions();
            _originalClientFileLayoutGrid = $("#ClientFileLayoutGrid").data('kendoGrid').getOptions();
            _originalClientFileGrid = $("#ClientFileGrid").data('kendoGrid').getOptions();

            _originalClientGridToolBar = $("#ClientGrid .k-grid-toolbar").html();
            _originalClientFileLayoutGridToolBar = $("#ClientFileLayoutGrid .k-grid-toolbar").html();
            _originalClientFileGridToolBar = $("#ClientFileGrid .k-grid-toolbar").html();

            LoadGridLayout("#ClientGrid");
            LoadGridLayout("#ClientFileLayoutGrid");
            LoadGridLayout("#ClientFileGrid");

            $("#ClientGrid .k-grid-toolbar").html(_originalClientGridToolBar);
            $("#ClientGrid .k-grid-toolbar").addClass("k-grid-top");

            $("#ClientFileLayoutGrid .k-grid-toolbar").html(_originalClientFileLayoutGridToolBar);
            $("#ClientFileLayoutGrid .k-grid-toolbar").addClass("k-grid-top");

            $("#ClientFileGrid .k-grid-toolbar").html(_originalClientFileGridToolBar);
            $("#ClientFileGrid .k-grid-toolbar").addClass("k-grid-top");
        }, 5);
    });


    function onClientLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#ClientGrid");
        }, 5);
    }


    function onClientFileLayoutLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#ClientFileLayoutGrid");
        }, 5);
    }


    function onClientFileLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#ClientFileGrid");
        }, 5);
    }

    function onClientFileCreateData(e) {

    }


    function onClientFileLayoutData(e) {
        var entityGrid = $("#ClientFileGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        var clientFileId = selectedItem["Item.SLClientFileID"]

        return {            
            clientFileId: clientFileId
        }
    }

    function onClientDefaultLoad() {
        try {
            var UserPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    UserPreference = valid;

                    var dropdownList = $('#FileImportDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == UserPreference.DefaultFirm;
                    });

                    $('#ClientGrid').data("kendoGrid").dataSource.read();
                },
                error: function (valid) {
                    UserPreference = null;
                }
            })
        }
        catch (e) { }
    }

    function onClientError(e) {
        DisplayError(e);
    }

    function onClientFileRowChange(e) {
        try {
            $('#ClientFileLayoutGrid').data('kendoGrid').dataSource.read();
        }
        catch (e) { }
    }

    function onClientCreateData(e) {
        var entityId = $("#BankLoanDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entityId,
        }
    }

    function onClientChange(e) {
        try {
            $('#ClientGrid').data('kendoGrid').dataSource.read();
        }
        catch (e) { }
    }

    function onClientRowChange(e) {
        try {
            $('#ClientFileGrid').data('kendoGrid').dataSource.read();
        }
        catch (e) { }    
    }

    function onClientImportData(e) {
        var entityId = $("#FileImportDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entityId,
        }
    }


    function onClientFileImportData(e) {
        var entityId = $("#FileImportDropdownList").data("kendoDropDownList").value();

        var entityGrid = $("#ClientGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        var clientId = selectedItem["SLClientID"]        

        return {
            entityId: entityId,
            clientId: clientId
        }
    }


    function onClientFileLayoutContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#ClientFileLayoutGrid");
                break;

            case "Reset Filter":
                ResetFilter("#ClientFileLayoutGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#ClientFileLayoutGrid");

                $("#ClientFileLayoutGrid").data('kendoGrid').setOptions(_originalClientFileLayoutGrid);
                $("#ClientFileLayoutGrid .k-grid-toolbar").html(_originalClientFileLayoutGridToolBar);
                $("#ClientFileLayoutGrid .k-grid-toolbar").addClass("k-grid-top");

                $('#ClientFileLayoutGrid').data("kendoGrid").dataSource.read();
                break;
        }
    }

    function onClientContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#ClientGrid");
                break;

            case "Reset Filter":
                ResetFilter("#ClientGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#ClientGrid");

                $("#ClientGrid").data('kendoGrid').setOptions(_originalClientGrid);
                $("#ClientGrid .k-grid-toolbar").html(_originalClientGridToolBar);
                $("#ClientGrid .k-grid-toolbar").addClass("k-grid-top");

                $('#ClientGrid').data("kendoGrid").dataSource.read();
                break;
        }
    }

    function onClientFileContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#ClientFileGrid");
                break;

            case "Reset Filter":
                ResetFilter("#ClientFileGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#ClientFileGrid");

                $("#ClientFileGrid").data('kendoGrid').setOptions(_originalClientFileGrid);
                $("#ClientFileGrid .k-grid-toolbar").html(_originalClientFileGridToolBar);
                $("#ClientFileGrid .k-grid-toolbar").addClass("k-grid-top");
                $('#ClientFileGrid').data("kendoGrid").dataSource.read();
                break;
        }
    }

    function onClientFileCheckData(e) {
        CheckGridData("#ClientFileGrid");
    }

    function onClientFileLayoutCheckData(e) {
        CheckGridData("#ClientFileLayoutGrid");
    }

    function onClientCheckData(e) {
        CheckGridData("#ClientGrid");
    }


    function onFileDownloadConfig() {                   
        try {          
            HelperPartialWindow(
                null,
                'FileDownLoadConfig',
                1100,
                450,
                '/DomesticTrading/FileImport/LoadFileDownloadConfigPartial'
                );
        }
        catch (e) {
            console.log(e.message);
        }
    }
</script>

@(
 Html.Kendo().ToolBar()
        .Name("ClientFileImportToolBar")
    .Resizable(true)
    .HtmlAttributes(new { @class = "tBar" })
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
        items.Add().Template(Html.Kendo().DropDownList()
                    .Name("FileImportDropdownList")
                    .HtmlAttributes(new { @class = "Toolbar-Cell" })
                    .Animation(true)
                    .DataTextField("Custodian")
                    .DataValueField("CompanyId")
                    .OptionLabel(LabelHelper.Text("OptionLabel"))
                    .AutoBind(true)
                    .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                    .Events(e => e.Change("onClientChange").DataBound("onClientDefaultLoad").Open("onContraEntityAutoCompleteResize"))
                    .DataSource(dataSource => dataSource
                    .Read(read => read
                   .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                    .SelectedIndex(0).ToHtmlString());


        items.Add().Template(Html.Kendo().Button().Name("FileDownloadConfigButton").Content(LabelHelper.Text("FileDownloadConfig")).Events(events => events.Click("onFileDownloadConfig")).ToHtmlString());

    }))

<hr class="hr-white">

<div id="ClientFileImportDiv" class="grid-div">
    @(Html.Kendo().Grid<Client>()
        .Name("ClientGrid")
        .AutoBind(false)
        .NoRecords()
        .ColumnMenu(columnMenu =>
        {
                    @<text>
                @(Html.Kendo().Splitter()
        .Name("ClientTopSplitter")
.Orientation(SplitterOrientation.Horizontal)
.HtmlAttributes(new { @class = "grid" })
.Panes(childPanes =>
{
    childPanes.Add()
         .Scrollable(false)
         .Content(
           (Html.Kendo().Grid<Client>()
           .Name("ClientGrid")
           .AutoBind(false)
           .NoRecords()
              .ColumnMenu(columnMenu =>
              {
                  columnMenu.Filterable(true);
                  columnMenu.Columns(true);
                  columnMenu.Sortable(true);
                  columnMenu.ComponentType( "modern" );
              } )
    .Reorderable(reorder =>
    {
        reorder.Columns(true);
    })
    .Resizable(resize =>
    {
        resize.Columns(true);
    })
        .AllowCopy(copy =>
        {
            copy.Enabled(true);
        })
               .HtmlAttributes(new { @class = "grid" })
               .Selectable(select =>
               {
                   select.Enabled(true);
                   select.Mode(GridSelectionMode.Single);
                   select.Type(GridSelectionType.Row);
               })
               .Editable(x =>
               {
                   x.Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLInventory));
                   x.Mode(GridEditMode.InLine);
               })
               .ToolBar(t =>
               {
                   t.Create();
               })
               .Events(events =>
               {
                   events.Change("onClientRowChange");
                   events.DataBound("onClientCheckData");
                   events.ColumnHide("onClientLayoutChange");
                   events.ColumnShow("onClientLayoutChange");
                   events.ColumnResize("onClientLayoutChange");
                   events.ColumnReorder("onClientLayoutChange");
               })
               .Columns(cols =>
               {
                   cols.Bound(x => x.SLClientID).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                   cols.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                   cols.Bound(x => x.DateTimeId).GetColumnFormat(ColumnTypeEnum.DateTime, false, "", "").Hidden(true);
                   cols.Bound(x => x.SourceId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                   cols.Bound(x => x.Description).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                   cols.Bound(x => x.AssignedUser).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                   cols.Bound(x => x.EMail).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                   cols.Bound(x => x.EnterDateTimeID).GetColumnFormat(ColumnTypeEnum.DateTime, false, "", "");
                   cols.Bound(x => x.DateTimeId).GetColumnFormat(ColumnTypeEnum.DateTime, false, "", "");
                   cols.Command(x => x.Edit());
               })
               .Scrollable(scroll =>
               {
                   scroll.Enabled(true);
                   scroll.Virtual(true);
               })
               .DataSource(ds =>
               {
                   ds.Ajax()
               .ServerOperation(false)
               .Model(x =>
               {
                   x.Id(q => q.SLClientID);
                   x.Field(q => q.EnterDateTimeID).Editable(false);
                   x.Field(q => q.DateTimeId).Editable(false);
               })
               .Read(read => read.Action("Read_Client", "FileImport", new { area = "DomesticTrading" }).Data("onClientImportData"))
               .Update(update => update.Action("Update_Client", "FileImport", new { area = "DomesticTrading" }))
               .Create(create => create.Action("Add_Client", "FileImport", new { area = "DomesticTrading" }).Data("onClientCreateData"));
               })).ToHtmlString());

    childPanes.Add()
    .Scrollable(false)
    .Content(
    (Html.Kendo().Grid<ClientFileLayout>()
    .Name("ClientFileLayoutGrid")
    .AutoBind(false)
    .NoRecords()
    .ColumnMenu(columnMenu =>
    {
        columnMenu.Filterable(true);
        columnMenu.Columns(true);
        columnMenu.Sortable(true);
        columnMenu.ComponentType( "modern" );
    } )
    .Events(events =>
    {
        events.DataBound("onClientFileLayoutCheckData");
        events.ColumnHide("onClientFileLayoutLayoutChange");
        events.ColumnShow("onClientFileLayoutLayoutChange");
        events.ColumnResize("onClientFileLayoutLayoutChange");
        events.ColumnReorder("onClientFileLayoutLayoutChange");
    })
    .Reorderable(reorder =>
    {
        reorder.Columns(true);
    })
    .Resizable(resize =>
    {
        resize.Columns(true);
    })
    .AllowCopy(copy =>
    {
        copy.Enabled(true);
    })
    .Selectable(select => select.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
    .HtmlAttributes(new { @class = "grid" })
    .ToolBar(t =>
    {
        t.Template(LabelHelper.Label("ClientFile").ToString());
    })
    .Columns(cols =>
    {
        cols.Bound(x => x.SLClientFileID).Hidden(true);
        cols.Bound(x => x.SLClientFileLayoutId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        cols.Bound(x => x.ColumnId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        cols.Bound(x => x.FieldName).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.FieldLength).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
    })
    .Scrollable(scroll =>
    {
        scroll.Enabled(true);
        scroll.Virtual(true);
    })
    .DataSource(ds =>
    {
        ds.Ajax()
    .ServerOperation(false)
    .Read(r => r.Action("Read_ClientFileLayout", "FileImport", new { area = "DomesticTrading" }).Data("onClientFileLayoutData"));
    }).ToHtmlString()));
}))
            </text>);
                columnMenu.Columns(true);
                columnMenu.Sortable(true);
            })
        .Reorderable(reorder =>
        {
                n      reorder.Columns(true);
            })
        .Resizable(resize =>
        {
                resize.Columns(true);
            })
        .AllowCopy(copy =>
        {
                copy.Enabled(true);
            })
        .HtmlAttributes(new { @class = "grid" })
        .Selectable(select =>
        {
            select.Enabled(true);
            select.Mode(GridSelectionMode.Single);
            select.Type(GridSelectionType.Row);
        })
        .Editable(x =>
        {
            x.Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLInventory));
            x.Mode(GridEditMode.InLine);
        })
 n      .ToolBar(t =>
        {
        t.Create();
        })
        .Events(events =>
        {
        events.Change("onClientRowChange");
        events.DataBound("onClientCheckData");
        events.ColumnHide("onClientLayoutChange");
        events.ColumnShow("onClientLayoutChange");
        events.ColumnResize("onClientLayoutChange");
        events.ColumnReorder("onClientLayoutChange");
    })
        .Columns(cols =>
        {
        cols.Bound(x => x.SLClientID).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        cols.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        cols.Bound(x => x.DateTimeId).GetColumnFormat(ColumnTypeEnum.DateTime, false, "", "").Hidden(true);
        cols.Bound(x => x.SourceId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.Description).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.AssignedUser).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.EMail).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.EnterDateTimeID).GetColumnFormat(ColumnTypeEnum.DateTime, false, "", "");
        cols.Bound(x => x.DateTimeId).GetColumnFormat(ColumnTypeEnum.DateTime, false, "", "");
        cols.Command(x => x.Edit());
    })
        .Scrollable(scroll =>
        {
        scroll.Enabled(true);
        scroll.Virtual(true);
    })
        .DataSource(ds =>
        {
        ds.Ajax()
        .ServerOperation(false)
        .Model(x =>
        {
            x.Id(q => q.SLClientID);
            x.Field(q => q.EnterDateTimeID).Editable(false);
            x.Field(q => q.DateTimeId).Editable(false);
        })
        .Read(read => read.Action("Read_Client", "FileImport", new { area = "DomesticTrading" }).Data("onClientImportData"))
        .Update(update => update.Action("Update_Client", "FileImport", new { area = "DomesticTrading" }))
        .Create(create => create.Action("Add_Client", "FileImport", new { area = "DomesticTrading" }).Data("onClientCreateData"));
    }));
</div>


@(Html.Kendo().ContextMenu()
.Name("BankContextMenu")
    .Target("#ClientGrid")
    .Events(events => events.Select("onClientContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
    }))

@(Html.Kendo().ContextMenu()
.Name("BankLoanContextMenu")
    .Target("#ClientFileLayoutGrid")
    .Events(events => events.Select("onClientFileLayoutContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
    }))

@(Html.Kendo().ContextMenu()
.Name("BankLoanActivityContextMenu")
    .Target("#ClientFileGrid")
    .Events(events => events.Select("onClientFileContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
    }))
