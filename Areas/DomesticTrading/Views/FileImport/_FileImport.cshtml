@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools

<script>
    $('#SharedLabelCheckBox').change(function () {
       $("#ClientFileProjectionGrid").data("kendoGrid").refresh();
    })

     var _originalClientFileProjectionGrid = null;
     var _originalClientFileProjectionGridToolBar = null;


    $(document).ready(function () {
        setTimeout(function () {
            _originalClientFileProjectionGrid = $("#ClientFileProjectionGrid").data('kendoGrid').getOptions();
            _originalClientFileProjectionGridToolBar = $("#ClientFileProjectionGrid .k-grid-toolbar").html();

            LoadGridLayout("#ClientFileProjectionGrid");

            $("#ClientFileProjectionGrid .k-grid-toolbar").html(_originalClientFileProjectionGridToolBar);
            $("#ClientFileProjectionGrid .k-grid-toolbar").addClass("k-grid-top");
        }, 5);
    });


    function onClientFileProjectionLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#ClientFileProjectionGrid");
        }, 5);
    }


    function onClientFileLayoutData(e) {
        var entityGrid = $("#ClientFileProjectionGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        var clientFileId = selectedItem["Item.SLClientFileID"]

        return {            
            clientFileId: clientFileId
        }
    }

    function onClientDefaultLoad() {
        try {
            var UserPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    UserPreference = valid;

                    var dropdownList = $('#FileImportDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == UserPreference.DefaultFirm;
                    });

                    $('#ClientFileProjectionGrid').data("kendoGrid").dataSource.read();
                },
                error: function (valid) {
                    UserPreference = null;
                }
            })
        }
        catch (e) { }
    }

    function onClientError(e) {
        DisplayError(e);
    }

    function onClientFileRowChange(e) {
        try {
            $('#ClientFileLayoutGrid').data('kendoGrid').dataSource.read();
        }
        catch (e) { }
    }

    function onClientCreateData(e) {
        var entityId = $("#BankLoanDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entityId,
        }
    }

    function onClientChange(e) {
        try {
            $('#ClientFileProjectionGrid').data('kendoGrid').dataSource.read();
        }
        catch (e) { }
    }

    function onClientFileProjectionRowChange(e) {
        try {
            $('#ClientFileProjectionGrid').data('kendoGrid').dataSource.read();
        }
        catch (e) { }    
    }

    function onClientImportData(e) {
        var entityId = $("#FileImportDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entityId,
        }
    }


    function onClientFileImportData(e) {
        var entityId = $("#FileImportDropdownList").data("kendoDropDownList").value();

        var entityGrid = $("#ClientGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        var clientId = selectedItem["SLClientID"]        

        return {
            entityId: entityId,
            clientId: clientId
        }
    }


    function onClientFileProjectionContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#ClientFileProjectionGrid");
                break;

            case "Reset Filter":
                ResetFilter("#ClientFileProjectionGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#ClientFileProjectionGrid");

                $("#ClientFileProjectionGrid").data('kendoGrid').setOptions(_originalClientFileProjectionGrid);
                $("#ClientFileProjectionGrid .k-grid-toolbar").html(_originalClientFileProjectionGridToolBar);
                $("#ClientFileProjectionGrid .k-grid-toolbar").addClass("k-grid-top");

                $('#ClientFileProjectionGrid').data("kendoGrid").dataSource.read();
                break;


            case "Unsort":
                UnsortGrid("#ClientFileProjectionGrid");
                break;
        }
    }


    function onClientFileProjectionCheckData(e) {
        CheckGridData("#ClientFileProjectionGrid");
    }

    $(function () {
        $('#ClientFileProjectionGrid').on('click', '.UsePriorBusinessDayChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#ClientFileProjectionGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('Item.UsePriorBusinessDay', checked);
            grid.dataSource.sync();
        });

        $('#ClientFileProjectionGrid').on('click', '.IsEasySourceChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#ClientFileProjectionGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('Item.IsEasySource', checked);
            grid.dataSource.sync();
        });
    });
</script>

@(
 Html.Kendo().ToolBar()
        .Name("ClientFileImportToolBar")
    .Resizable(true)
    .HtmlAttributes(new { @class = "tBar" })
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
        items.Add().Template(Html.Kendo().DropDownList()
                    .Name("FileImportDropdownList")
                    .HtmlAttributes(new { @class = "Toolbar-Cell" })
                    .Animation(true)
                    .DataTextField("Custodian")
                    .DataValueField("CompanyId")
                    .OptionLabel(LabelHelper.Text("OptionLabel"))
                    .AutoBind(true)
                    .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                    .Events(e => e.Change("onClientChange").DataBound("onClientDefaultLoad").Open("onContraEntityAutoCompleteResize"))
                    .DataSource(dataSource => dataSource
                    .Read(read => read
                   .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                    .SelectedIndex(0).ToHtmlString());
    }))

<hr class="hr-white">

<div id="ClientFileImportDiv" class="grid-div">
        @(Html.Kendo().Grid<ClientFileProjection>()
    .Name("ClientFileProjectionGrid")
    .Sortable(sort =>
    {
        sort.AllowUnsort(true);
        sort.Enabled(true);
        sort.SortMode(GridSortMode.MultipleColumn);
    })
    .Scrollable()
    .Filterable()
    .AutoBind(true)
    .NoRecords()
   .ColumnMenu(columnMenu =>
   {
       columnMenu.Filterable(true);
       columnMenu.Columns(true);
       columnMenu.Sortable(true);
       columnMenu.ComponentType( "modern" );
   } )
    .Reorderable(reorder =>
    {
        reorder.Columns(true);
    })
    .Resizable(resize =>
    {
        resize.Columns(true);
    })
    .HtmlAttributes(new { @class = "grid" })
    .Selectable(select =>
    {
        select.Enabled(true);
        select.Mode(GridSelectionMode.Single);
        select.Type(GridSelectionType.Row);
    })
    .Editable(x =>
    {
        x.Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLInventory));
        x.Mode(GridEditMode.InLine);
    })
    .Events(events =>
    {
        events.DataBound("onClientFileProjectionCheckData");
        events.ColumnHide("onClientFileProjectionLayoutChange");
        events.ColumnShow("onClientFileProjectionLayoutChange");
        events.ColumnResize("onClientFileProjectionLayoutChange");
        events.ColumnReorder("onClientFileProjectionLayoutChange");
    })
    .Columns(cols =>
    {
        cols.Bound(x => x.clientItem.SLClientID).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        cols.Bound(x => x.clientItem.SourceId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.clientItem.Description).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.Item.UsePriorBusinessDay).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox'  class='UsePriorBusinessDayChkbx' #= (Item.UsePriorBusinessDay) ? checked ='checked' : '' #/>", "");
        cols.Bound(x => x.Item.IsEasySource).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox'  class='IsEasySourceChkbx' #= (Item.IsEasySource) ? checked ='checked' : '' #/>", "");
        cols.Bound(x => x.FileFormatDescription).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.Delimiter.Delimiter).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.DownloadType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.FileTypeDescription).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.Item.Url).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.Item.FileMask).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        cols.Bound(x => x.Item.LastProcessDate).GetColumnFormat(ColumnTypeEnum.Date, false, "#= kendo.toString(kendo.parseDate(Item.LastProcessDate, 'yyyy-MM-dd'), 'MM/dd/yyyy') #", "");
        cols.Command(x => x.Edit());
    })
    .Scrollable(scroll =>
    {
        scroll.Enabled(true);
        scroll.Virtual(true);
    })
    .DataSource(ds =>
    {
        ds.Ajax()
            .ServerOperation(false)
            .Model(x =>
            {
                x.Id(q => q.clientItem.SLClientID);
                x.Field(q => q.clientItem.SourceId).Editable(true);
                x.Field(q => q.clientItem.Description).Editable(true);
                x.Field(q => q.Item.UsePriorBusinessDay).Editable(true);
                x.Field(q => q.Item.IsEasySource).Editable(true);
                x.Field(q => q.Item.Url).Editable(true);
                x.Field(q => q.FileFormatDescription).Editable(false);
                x.Field(q => q.Delimiter.Delimiter).Editable(false);
                x.Field(q => q.DownloadType).Editable(false);
                x.Field(q => q.Item.FileMask).Editable(true);
                x.Field(q => q.Item.LastProcessDate).Editable(true);
            })
            .Read(read => read.Action("Read_ClientFileProjection", "FileImport", new { area = "DomesticTrading" }).Data("onClientImportData"))
            .Update(update => update.Action("Update_ClientFileProjection", "FileImport", new { area = "DomesticTrading" }));
    }))
</div>


@(Html.Kendo().ContextMenu()
.Name("ClientFileProjectionMenu")
    .Target("#ClientFileProjectionGrid")
    .Events(events => events.Select("onClientFileProjectionContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
    }))

