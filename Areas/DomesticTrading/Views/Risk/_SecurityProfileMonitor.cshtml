@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Tools
<script>

    var _SecurityProfileGridSelectAll = false;
    var _originalSecurityProfileGrid = null;

    $(document).ready(function () {
        setTimeout(function () {
            _originalSecurityProfileGrid = $('#SecurityProfileGrid').data('kendoGrid').getOptions();

            LoadGridLayout("#SecurityProfileGrid");
        }, 5);
    });

    function onSecurityProfileGridLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#SecurityProfileGrid");
        }, 5);
    }

    function onSecurityProfileDropdownChange() {
        $('#SecurityProfileGrid').data('kendoGrid').dataSource.read();
    }

    $('#SharedLabelCheckBox').change(function () {
        $("#SecurityProfileGrid").data("kendoGrid").refresh();
    })

    function onSecurityProfileCheckData() {
        CheckGridData('#SecurityProfileGrid');
    }

    function onSecurityProfileeData() {
        var entityId = $("#SecurityProfileDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entityId,
        };
    }

    function onDefaultLoad() {
        try {
            var UserPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    UserPreference = valid;

                    var dropdownList = $('#SecurityProfileDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == UserPreference.DefaultFirm;
                    });

                    $('#SecurityProfileGrid').data("kendoGrid").dataSource.read();
                },
                error: function (valid) {
                    UserPreference = null;
                }
            })
        }
        catch (e) { }
    }

    function onClientInventoryUnsortGrid(e) {
        UnsortGrid(e);
    }

    function onClientInventorySelectAll(e, selectAll) {
        try {
            var contractGrid = $(e).data("kendoGrid");
            contractGrid.select(contractGrid.tbody.find(">tr"));

            selectAll = true;
        } catch (e) {
            console.log(e.message);
        }
    }

    function onClientInventoryExcel(grid, title, selectAll) {
        KendoGridToCSVConvertor(grid, title, selectAll);
    }

    function onSecurityProfileGridContextMenuSelect(e){
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#SecurityProfileGrid");
                break;

            case 'Unsort':
                onClientInventoryUnsortGrid("#SecurityProfileGrid");
                break;

            case "Reset Filter":
                ResetFilter("#SecurityProfileGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#SecurityProfileGrid");
                $('#SecurityProfileGrid').data('kendoGrid').setOptions(_originalSecurityProfileGrid);
                $('#SecurityProfileGrid').data("kendoGrid").dataSource.read();
                break;

            case 'Select All':
                onClientInventorySelectAll("#SecurityProfileGrid", _SecurityProfileGridSelectAll);
                break;

            case 'Export To Excel':
                onClientInventoryExcel("#SecurityProfileGrid", "SecurityProfileGrid", _SecurityProfileGridSelectAll);
                break;
        }
    }


    function onSecurityProfileRefresh() {
        $('#SecurityProfileGrid').data("kendoGrid").dataSource.read();
    }


    function onSecurityProfileRowChange() {
        try
        {
            var entityGrid = $("#SecurityProfileGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            var entityId = selectedItem["EntityId"];
            var effectiveDate = selectedItem["EffectiveDate"];
            var securityNumber = selectedItem["SecurityNumber"];
            var issueId = selectedItem["IssueId"];

            SidePanelUpdate(effectiveDate, entityId, issueId, securityNumber);
        }
        catch (e)
        {

        }
    }
</script>

@(
 Html.Kendo().ToolBar()
    .Name("SecurityProfileToolBar")
    .Resizable(true)
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
        items.Add().Template(Html.Kendo().DropDownList()
                            .Name("SecurityProfileDropdownList")
                            .HtmlAttributes(new { @class = "width90" })
                            .DataTextField("Custodian")
                            .DataValueField("CompanyId")
                            .OptionLabel(LabelHelper.Text("OptionLabel"))
                            .AutoBind(true)
                            .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                            .Events(events => events.Change("onSecurityProfileDropdownChange").DataBound("onDefaultLoad").Open("onContraEntityAutoCompleteResize"))
                            .DataSource(dataSource => dataSource
                            .Read(read => read
                            .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                            .SelectedIndex(0).ToHtmlString());

        items.Add().Template(Html.Kendo().Button().Name("SecurityProfileRefreshButton").Content("<i class='fa fa-refresh fa-1x'></i>").Events(ev => ev.Click("onSecurityProfileRefresh")).ToHtmlString());
    }))

<hr class="hr-white">

<div id="SecurityProfileDiv" class="grid-div">
    @(
Html.Kendo().Grid<SecurityProfileModel>()
.Name("SecurityProfileGrid")
.Filterable()
.Scrollable()
.Selectable(select =>
{
    select.Mode(GridSelectionMode.Multiple);
})
.Sortable()
.Navigatable()
.NoRecords()
.Resizable(cols => cols.Columns(true))
.HtmlAttributes(new { @class = "grid" })
.Columns(cols =>
{
    cols.Bound(x => x.EffectiveDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "").Hidden();
    cols.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.Time, false, "", "").Hidden();
    cols.Bound(x => x.IssueId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden();
    cols.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
    cols.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, true, "", "");
    cols.Bound(x => x.BookHypothication).GetColumnFormat(ColumnTypeEnum.Rate, true, "#=GetMoneyDirection(BookHypothication)#", "");
    cols.Bound(x => x.HedgeBookHypothication).GetColumnFormat(ColumnTypeEnum.Rate, true, "#=GetMoneyDirection(HedgeBookHypothication)#", "");
    cols.Bound(x => x.TotalIncome).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(TotalIncome)#", "");
    cols.Bound(x => x.BorrowAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(BorrowAmount)#", "");
    cols.Bound(x => x.HedgeBorrowAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(HedgeBorrowAmount)#", "");
    cols.Bound(x => x.HedgeBorrowAddonRequirement).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(HedgeBorrowAddonRequirement)#", "");
    cols.Bound(x => x.LoanAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(LoanAmount)#", "");
    cols.Bound(x => x.HedgeLoanAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(HedgeLoanAmount)#", "");
    cols.Bound(x => x.HedgeLoanAddonRequirement).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(HedgeLoanAddonRequirement)#", "");
    cols.Bound(x => x.TotalAddonRequirement).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(TotalAddonRequirement)#", "");
})
.ColumnMenu( menu =>
{
    menu.Columns( true );
    menu.Filterable( true );
    menu.Sortable( true );
    menu.ComponentType( "modern" );
} )
     .Events(events =>
     {
         events.DataBound("onSecurityProfileCheckData");
         events.Change("onSecurityProfileRowChange");
         events.ColumnHide("onSecurityProfileGridLayoutChange");
         events.ColumnShow("onSecurityProfileGridLayoutChange");
         events.ColumnResize("onSecurityProfileGridLayoutChange");
         events.ColumnReorder("onSecurityProfileGridLayoutChange");
     })
    .DataSource(ds =>
    {
        ds.Ajax()
            .ServerOperation(false)
            .Read(read => read.Action("Read_SecurityProfileSummary", "Contract", new { area = "DomesticTrading" }).Data("onSecurityProfileeData"))
            .Aggregates(agg =>
            {
                agg.Add(x => x.TotalIncome).Sum();
                agg.Add(x => x.BorrowAmount).Sum();
                agg.Add(x => x.HedgeBorrowAmount).Sum();
                agg.Add(x => x.HedgeBorrowAddonRequirement).Sum();
                agg.Add(x => x.LoanAmount).Sum();
                agg.Add(x => x.HedgeLoanAmount).Sum();
                agg.Add(x => x.HedgeLoanAddonRequirement).Sum();
                agg.Add(x => x.TotalAddonRequirement).Sum();
            });
    }))
</div>

@(
 Html.Kendo().ContextMenu()
    .Name("#SecurityProfileGridContextMenu")
    .Target("#SecurityProfileGrid")
        .Events(events => events.Select("onSecurityProfileGridContextMenuSelect"))
.Items(items =>
{
    items.Add().Text("AutoFit Columns");
    items.Add().Text("Unsort").Enabled(true);
    items.Add().Text("Reset Filter").Enabled(true);
    items.Add().Text("Reset Grid").Enabled(true);
    items.Add().Separator(true);
    items.Add().Text("Select All").Enabled(true);
    items.Add().Text("Export To Excel").Enabled(true);
}))
