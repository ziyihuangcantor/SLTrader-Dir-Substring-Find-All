@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools
<style scoped>
    #ClientNeedSummaryButton.zeroclipboard-is-hover {
        background-color: #1ba1e2;
    }

    .floatRight {
        float: right;
    }
</style>

<script type="text/javascript">

    var _originalClientNeedGrid = null;

    $(document).ready(function () {
        setTimeout(function () {
            _originalClientNeedGrid = $('#ClientNeedGrid').data('kendoGrid').getOptions();

            LoadGridLayout("#ClientNeedGrid");
        }, 5);


        var clientEvent1 = new ZeroClipboard(document.getElementById("ClientNeedSummaryButton"));

        clientEvent1.on("ready", function (readyEvent) {
            clientEvent1.on("copy", function (event) {
                var data1 = KendoGridToText("#ClientNeedGrid", "ClientNeedGrid", false);
                clientEvent1.setText(data1);
            });
        });

    });

    function onClientNeedSummaryGridLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#ClientNeedGrid");
        }, 5);
    }

    function onClientNeedGridLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#ClientNeedGrid");
        }, 5);
    }

    $('#SharedLabelCheckBox').change(function () {
        RefreshGrid("#ClientNeedGrid");
    });

    function onClientNeedRowChange(e) {
        try {
            var entityGrid = $("#ClientNeedGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            var entityId = selectedItem["EntityId"];
            var effectiveDate = selectedItem["EffectiveDate"];
            var securityNumber = selectedItem["SecurityNumber"];
            var issueId = selectedItem["IssueId"];

            SidePanelUpdate(effectiveDate, entityId, issueId, securityNumber);
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onClientNeedContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#ClientNeedGrid");
                break;

            case 'Unsort':
                onClientNeedUnsortGrid("#ClientNeedGrid");
                break;

            case 'Reset Grid':
                ResetUserLayout("#ClientNeedGrid");
                $('#ClientNeedGrid').data('kendoGrid').setOptions(_originalClientNeedGrid);
                break;

            case "Reset Filter":
                ResetFilter("#ClientNeedGrid");
                break;

            case 'Select All':
                onClientNeedSelectAll();
                break;

            case 'Export To Excel':
                exportToClientNeedExcel();
                break;
        }
    }

    function onClientNeedUnsortGrid(e) {
        UnsortGrid(e);
    }

    function exportToClientNeedExcel() {
        KendoGridToCSVConvertor("#ClientNeedGrid", 'ClientNeedGrid');
    }

    function onClientNeedSelectAll() {
        try {
            var contraGrid = $("#ClientNeedGrid").data("kendoGrid");
            contraGrid.select(contraGrid.tbody.find(">tr"));
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onClientNeedDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    userPreference = valid;

                    var dropdownList = $('#ClientNeedDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });
                    
                    $('#ClientNeedSummaryGrid').data("kendoGrid").dataSource.read();                   
                },
                error: function (valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function additionalClientNeedData() {
        var entityGrid = $("#ClientNeedSummaryGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());


        var effectiveDate = selectedItem["EffectiveDate"];
        var entityId = selectedItem["EntityId"];
        var slClientEmailActionId = selectedItem["SLClientEmailActionId"];

        return {
            entityId: entityId,
            effectiveDate: effectiveDate,
            slClientEmailActionId: slClientEmailActionId
        };
    }

    function onClientNeedError(e) {
        DisplayControllerByStringError("ClientNeedGrid".e);        
    }

    function onClientNeedSummaryError(e) {
        DisplayControllerByStringError("ClientNeedSummaryGrid".e);
    }

    function onClientNeedSummaryCheckData() {
        CheckGridData('#ClientNeedSummaryGrid');
    }

    function onClientNeedCheckData() {
        CheckGridData('#ClientNeedGrid');
    }
    

    function onClientNeedSummaryChange() {
        $('#ClientNeedSummaryGrid').data("kendoGrid").dataSource.read();
        $("#ClientNeedInventorySourceDropdownList").data("kendoAutoComplete").dataSource.read();       
    }

    function onClientNeedSummaryRowChange() {
        $('#ClientNeedGrid').data("kendoGrid").dataSource.read();
    }

    function additionalClientNeedEntity() {
        var entity = $("#ClientNeedDropdownList").data("kendoDropDownList");

        return {
            entityId: entity.value()
        };
    }


    function additionalClientNeedSummaryData() {
        var datepicker = $("#ClientNeedCalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entity = $("#ClientNeedDropdownList").data("kendoDropDownList");

        return {
            entityId: entity.value(),
            effectiveDate: value
        };
    }

    function onClientNeedInventorySourceDropdownDataBound() {

    }

    function onClientInventorySourceRefresh() {
        $("#ClientNeedInventorySourceDropdownList").data("kendoAutoComplete").dataSource.read();              
    }
</script>

@(
 Html.Kendo().ToolBar()
        .Name("ClientNeedToolBar")
    .Resizable(true)
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("EffectiveDate").ToHtmlString());

        items.Add().Template(Html.Kendo().DatePicker()
                                .Name("ClientNeedCalander")
                                .Format("yyyy-MM-dd")
                                .Value(DateTime.Now)
                                .HtmlAttributes(new { @class="width90" })
                                .Events(events => events.Change("onClientNeedSummaryChange")).ToHtmlString());

        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
        items.Add().Template(Html.Kendo().DropDownList()
                            .Name("ClientNeedDropdownList")                            
                            .DataTextField("Custodian")
                            .DataValueField("CompanyId")
                            .OptionLabel(LabelHelper.Text("OptionLabel"))
                            .AutoBind(true)
                            .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                            .Events(events => events.Change("onClientNeedSummaryChange").DataBound("onClientNeedDefaultLoad").Open("onContraEntityAutoCompleteResize"))
                            .DataSource(dataSource => dataSource
                            .Events(events =>
                            {
                                events.Error("onClientNeedError");
                            })
                            .Read(read => read
                            .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                            .SelectedIndex(0).ToHtmlString());

        items.Add().Template(Html.Kendo().Button().Name("ClientNeedRefreshButton").Content("<i class='fa fa-refresh fa-1x'></i>").Events(ev => ev.Click("onClientNeedSummaryChange")).ToHtmlString());

        items.Add().Template(Html.Kendo().Button().Name("ClientNeedAddButton").Content("<i class='fa fa-plus fa-1x'> Add Need</i>").Events(ev => ev.Click("onClientNeedSummaryChange")).Enable(false).ToHtmlString());

    }))

<hr class="hr-white">

<div id="ClientNeedContent" class="grid-div">
    @(Html.Kendo().Splitter()
        .Name("ClientNeedSplitter")
        .HtmlAttributes(new { @class = "grid" })
        .Orientation(SplitterOrientation.Vertical)
        .Panes(panes =>
        { 
            panes.Add()
                .Collapsible(false)
                .Size("30%")
                .Scrollable(false)
                .Content(@<text>
    @(   Html.Kendo().Grid<SL_InventorySummaryFileProjection>()
            .Name("ClientNeedSummaryGrid")
            .HtmlAttributes(new { @class = "grid" })
            .Sortable()
            .Scrollable(scrollable => scrollable.Virtual(true))
            .Filterable()
            .Navigatable()
            .NoRecords()
            .Events(events =>
            {
                events.DataBound("onClientNeedSummaryCheckData");
                events.ColumnHide("onClientNeedSummaryGridLayoutChange");
                events.ColumnShow("onClientNeedSummaryGridLayoutChange");
                events.ColumnResize("onClientNeedSummaryGridLayoutChange");
                events.ColumnReorder("onClientNeedSummaryGridLayoutChange");
                events.Change("onClientNeedSummaryRowChange");
            })
            .ColumnMenu(columnMenu =>
            {
                columnMenu.Filterable(true);
                columnMenu.Columns(true);
                columnMenu.Sortable(true);
                columnMenu.ComponentType( "modern" );
            } )
            .Reorderable(reorder =>
            {
                reorder.Columns(true);
            })
            .Selectable(select => select.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Row))
            .Columns(columns =>
            {
                columns.Bound(p => p.EffectiveDate).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound(p => p.EntityId).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound(p => p.Source).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound(p => p.FileDescription).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound(x => x.ItemCount).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(ItemCount)#", "");
                columns.Bound(x => x.UploadTime).GetColumnFormat(ColumnTypeEnum.Date, true, "", "");
                columns.Bound(x => x.SLClientEmailActionId).GetColumnFormat(ColumnTypeEnum.Date, true, "", "");
            })
                .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
                .DataSource(dataSource => dataSource
                .Ajax()
                        .Read(read => read.Action("Read_ClientNeedSummary", "ClientNeed", new { Area = "DomesticTrading" }).Data("additionalClientNeedSummaryData"))
                    .Events(events =>
                    {
                        events.Error("onClientNeedSummaryError");
                    })
                    .ServerOperation(false)
                    .Aggregates(aggregates =>
                    {
                        aggregates.Add(p => p.ItemCount).Sum();
                    })
                )
    ))
    </text>);

        panes.Add()
    .Collapsible(false)
    .Size("70%")
    .Scrollable(false)
    .Content(@<text>
    @(Html.Kendo().ToolBar()
        .Name("ClientNeedGridToolBar")
        .Items(items =>
        {
            items.Add().Template(Html.Kendo().Button().Name("ClientNeedSearchButton").Enable(true).Content(LabelHelper.Text("Search")).ToHtmlString()).HtmlAttributes(new { @class = "floatRight" });

            items.Add().Template(Html.Kendo().MultiSelect()
                    .Name("ClientNeedInventorySourceDropdownList")
                    .HtmlAttributes(new { @class = "Toolbar-Cell", @style = "width:200px;" })
                    .AutoClose(false)
                    .TagMode(TagMode.Single)
                    .AutoWidth(true)
                    .Enable(true)
                    .Placeholder(LabelHelper.Text("UseAll"))
                    .AutoBind(true)                   
                    .DataSource(ds =>
                    {
                        ds.Read(read => read.Action("Read_OppurtunityInventorySourceDropdown", "Simulator", new { area = "DomesticTrading" }).Data("additionalClientNeedEntity"));
                    }).ToHtmlString()).HtmlAttributes(new { @class = "floatRight" });

            items.Add().Template(LabelHelper.Label("AvailableSources").ToHtmlString()).HtmlAttributes(new { @class = "floatRight", @style = "margin-top: 4px;" });

        }))
    @(   Html.Kendo().Grid<SL_ClientNeedProjection>()
            .Name("ClientNeedGrid")
            .HtmlAttributes(new { @class = "grid" })
            .Sortable()
            .Scrollable(scrollable => scrollable.Virtual(true))
            .Filterable()
            .Navigatable()
            .NoRecords()
            .AutoBind(false)
            .Events(events =>
            {
                events.DataBound("onClientNeedCheckData");
                events.ColumnHide("onClientNeedGridLayoutChange");
                events.ColumnShow("onClientNeedGridLayoutChange");
                events.ColumnResize("onClientNeedGridLayoutChange");
                events.ColumnReorder("onClientNeedGridLayoutChange");
                events.Change("onClientNeedRowChange");
            })
            .ColumnMenu(columnMenu =>
            {
                columnMenu.Filterable(true);
                columnMenu.Columns(true);
                columnMenu.Sortable(true);
                columnMenu.ComponentType( "modern" );
            } )
            .Editable(editable => editable.DisplayDeleteConfirmation(false))
            .Reorderable(reorder =>
            {
                reorder.Columns(true);
            })
            .Selectable(select => select.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Row))
            .Columns(columns =>
            {
                columns.Command(command =>
                {
                    command.Destroy();
                });
                columns.Bound(p => p.SLClientNeed).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound(p => p.EntityId).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound(p => p.Source).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound(p => p.EmailAddress).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound(p => p.NeedQuantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(NeedQuantity)#", "");
                columns.Bound(p => p.AvailQuantity).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetPositionDirection(AvailQuantity)#", "");
                columns.Bound(p => p.DepoQuantity).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetPositionDirection(DepoQuantity)#", "");
                columns.Bound(p => p.InventorySource).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound(p => p.ContractRebateRate).GetColumnFormat(ColumnTypeEnum.Money, false, "#=GetRateDirection(ContractRebateRate)#", "");
                columns.Bound(p => p.InventoryRebateRate).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(InventoryRebateRate)#", "");
                columns.Bound(p => p.IntraDayRebateRate).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetRateDirection(IntraDayRebateRate)#", "");
                columns.Bound(p => p.SLClientEmailActionId).GetColumnFormat(ColumnTypeEnum.Position, false, "", "");
                columns.Bound(x => x.IsOCCEligible).GetColumnFormat(ColumnTypeEnum.String, false, "<input disabled type='checkbox'   #= (IsOCCEligible) ? checked ='checked' : '' #/>", "");
            })
                .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
                .DataSource(dataSource => dataSource
                .Ajax()
                        .Read(read => read.Action("Read_ClientNeed", "ClientNeed", new { Area = "DomesticTrading" }).Data("additionalClientNeedData"))
                        .Destroy(destroy => destroy.Action("Destroy_ClientNeed", "ClientNeed", new { Area = "DomesticTrading" }))
                    .Events(events => events
                            .Error("onClientNeedError"))
                    .ServerOperation(false)
                    .Model(model =>
                    {
                        model.Id(x => x.SLClientNeed);
                    })
                    .Aggregates(aggregates =>
                    {
                        aggregates.Add(p => p.NeedQuantity).Sum();
                        aggregates.Add(p => p.AvailQuantity).Sum();
                        aggregates.Add(p => p.DepoQuantity).Sum();
                    })
                )
    ))
    </text>);
}))
</div>

@(Html.Kendo().ContextMenu()
.Name("ClientNeedContextMenu")
        .Target("#ClientNeedGrid")
    .Events(events => events.Select("onClientNeedContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
        items.Add().Separator(true);
        items.Add().Text("Select All").Enabled(true);
        items.Add().Text("Copy").Enabled(true).HtmlAttributes(new { ID = "ClientNeedSummaryButton" });
        items.Add().Text("Export To Excel").Enabled(true);
    })
)

