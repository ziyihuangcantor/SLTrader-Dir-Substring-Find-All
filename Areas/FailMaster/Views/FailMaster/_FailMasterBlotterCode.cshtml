@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools

<script type="text/javascript">
    $('#SharedLabelCheckBox').change(function () {
        RefreshGrid("#FailMasterBlotterCodeGrid");
    });

    var _originalFailMasterBlotterCodeGrid = null;
    var _failMasterBlotterCodeSelectAll = false;

    $(document).ready(function () {
        setTimeout(function () {
            _originalFailExposureGrid = $("#FailMasterBlotterCodeGrid").data('kendoGrid').getOptions();
            
            LoadGridLayout("#FailMasterBlotterCodeGrid");
        },
            5);

        var clientEvent1 = new ZeroClipboard(document.getElementById("FailMasterBlotterCodeGridButton"));

        clientEvent1.on("ready",
            function (readyEvent) {
                clientEvent1.on("copy",
                    function (event) {
                        var data1 = KendoGridToText("#FailMasterBlotterCodeGrid", "FailMasterBlotterCodeGrid", false);
                        clientEvent1.setText(data1);
                    });
            });
    });


    function onFailMasterBlotterCodeCheckData() {
        CheckGridData('#FailMasterBlotterCodeGrid');
    }

    function createFailMasterBlotterCodeData() {
        var entity = $("#FailMasterBlotterCodeDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity
        };
    }

    function additionalFailMasterBlotterCodeData() {
        var entity = $("#FailMasterBlotterCodeDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity
        };
    }

    function onFailMasterBlotterCodeDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function(valid) {
                    userPreference = valid;

                    var dropdownList = $('#FailMasterBlotterCodeDropdownList').data("kendoDropDownList");

                    dropdownList.select(function(dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $('#FailMasterBlotterCodeGrid').data("kendoGrid").dataSource.read();
                },
                error: function(valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onFailMasterBlotterCodeError(e) {
        DisplayControllerError(e);
    }

    function onFailMasterBlotterCodeChange() {
        $("#FailMasterBlotterCodeGrid").data("kendoGrid").dataSource.read();
    }

    $(document).ready(function () {
        kendo.ui.Grid.fn.options.columnMenuInit = function (e) {
            var menu = e.container.find(".k-menu").data("kendoMenu");
            menu.bind('activate', function (e) {
                if (e.item.is('.k-filter-item')) {
                    // if an element in the submenu is focused first, the issue is not observed
                    e.item.find('span.k-dropdown.k-header').first().focus();
                    // e.item.find('input').first().focus();
                }
            });
        };
    });

    function onFailMasterBlotterCodeLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#FailMasterBlotterCodeGrid");
        },
            5);
    }

    function exportToFailMasterBlotterCodeExcel() {

        try {
            KendoGridToCSVConvertor("#FailMasterBlotterCodeGrid", 'FailMasterBlotterCodeGrid', _failMasterBlotterCodeSelectAll);
            _failMasterBlotterCodeSelectAll = false;
        } catch (e) {
            DisplayControllerByStringError("Error", e.message);
            console.log(e.message);
        }
    }

    function onFailMasterBlotterCodeUnsortGrid(e) {
        UnsortGrid(e);
    }

    function onBlotterCodeSelectAll(e) {
        try {
            var boxGrid = $("#FailMasterBlotterCodeGrid").data("kendoGrid");
            boxGrid.select(boxGrid.tbody.find(">tr"));

            _failMasterBlotterCodeSelectAll = true;
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onFailMasterBlotterCodeContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#FailMasterBlotterCodeGrid");
                break;

            case 'Unsort':
                onFailMasterBlotterCodeUnsortGrid("#FailMasterBlotterCodeGrid");
                break;

            case "Reset Filter":
                ResetFilter("#FailMasterBlotterCodeGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#FailMasterBlotterCodeGrid");

                $("#FailMasterBlotterCodeGrid").data('kendoGrid').setOptions(_originalFailExposureGrid);
                $('#FailMasterBlotterCodeGrid').data("kendoGrid").dataSource.read();
                break;    

            case 'Export To Excel':
                exportToFailMasterBlotterCodeExcel();
                break;

            case "Select All":
                onBlotterCodeSelectAll(true);
                break;
        }
    }
</script>

@(
 Html.Kendo().ToolBar()
    .Name("FailMasterBlotterCodeToolBar")
    .Resizable(true)
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
        items.Add().Template(Html.Kendo().DropDownList()
                            .Name("FailMasterBlotterCodeDropdownList")
                            .HtmlAttributes(new { @class = "width90" })
                            .DataTextField("Custodian")
                            .DataValueField("CompanyId")
                            .OptionLabel(LabelHelper.Text("OptionLabel"))
                            .AutoBind(true)
                            .Events(events => events.Change("onFailMasterBlotterCodeChange").DataBound("onFailMasterBlotterCodeDefaultLoad").Open("onContraEntityAutoCompleteResize"))
                            .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                            .DataSource(dataSource => dataSource
                            .Read(read => read
                            .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                            .SelectedIndex(0).ToHtmlString());
    }))

<hr class="hr-white">

<div id="FailMasterBlotterCodeContent" class="grid-div">
    @(
 Html.Kendo().Grid<SL_FailMasterBlotterCode>()
        .Name("FailMasterBlotterCodeGrid")
        .Sortable()
        .HtmlAttributes(new { @class = "grid" })
        .Scrollable()
        .Filterable()
        .ColumnMenu()
        .NoRecords()
        .Editable(e => e.Mode(GridEditMode.InLine).Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLBuyInAllocation)))
        .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple))
        .Navigatable()
        .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
        .Events(events =>
        {
            events.ColumnHide("onFailMasterBlotterCodeLayoutChange");
            events.ColumnShow("onFailMasterBlotterCodeLayoutChange");
            events.ColumnResize("onFailMasterBlotterCodeLayoutChange");
            events.ColumnReorder("onFailMasterBlotterCodeLayoutChange");
        })
        .ToolBar(toolbar => toolbar.Create())
        .Columns(columns =>
        {
            columns.Bound(x => x.SLFailMasterBlotterCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.BlotterCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.BlotterCodeCategory).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.UseAgeCategory).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.MINAGE).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.MaximumAge).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Command(x =>
            {
                if (SessionSecurityService.IsEditable(ManagerTask.EditSLRule))
                {
                    x.Edit();
                }
            });
        })
         .DataSource(dataSource => dataSource
            .Ajax()
            .Events(events => events.Error("onFailMasterBlotterCodeError"))
            .Read(read => read.Action("Read_FailMasterBlotterCodeByEntity", "FailMaster", new { area = "FailMaster" }).Data("additionalFailMasterBlotterCodeData"))
            .Update(update => update.Action("Update_FailMasterBlotterCode", "FailMaster", new { area = "FailMaster" }))
            .Create(create => create.Action("Create_FailMasterBlotterCode", "FailMaster", new { area = "FailMaster" }).Data("additionalFailMasterBlotterCodeData"))
            .Model(model =>
            {
                model.Id(x => x.SLFailMasterBlotterCode);
                model.Field(x => x.EntityId).Editable(false);
                model.Field(x => x.BlotterCode).Editable(true);
                model.Field(x => x.BlotterCodeCategory).Editable(true);
                model.Field(x => x.UseAgeCategory).Editable(true);
                model.Field(x => x.MINAGE).Editable(true);
                model.Field(x => x.MaximumAge).Editable(true);
            }))
    )


    @(Html.Kendo().ContextMenu()
    .Name("FailMasterBlotterCodeContextMenu")
    .Target("#FailMasterBlotterCodeGrid")
    .Events(events => events.Select("onFailMasterBlotterCodeContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("Refresh Data").Enabled(true);
        items.Add().Separator(true);
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
        items.Add().Separator(true);
        items.Add().Text("Select All").Enabled(true);
        items.Add().Text("Copy").Enabled(true).HtmlAttributes(new { ID = "FailExposureButton" });
        items.Add().Text("Export To Excel").Enabled(true);

    }))


</div>


