@using System.ComponentModel
@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Tools

<style scoped>
    #RebateBillingIssueOverrideToolBar .k-checkbox-label {
        padding-left: 20px;
    }
</style>

<script type="text/javascript">
    var RebateBillingIssueOverrideSelectAll = false;
    var _RebateBillingIssueOverrideSelectedRows = [];


    var _originalRebateBillingIssueOverride = null;

    $(document).ready(function () {
        setTimeout(function () {
            _originalRebateBillingIssueOverride = $("#RebateBillingIssueOverrideDetails").data('kendoGrid').getOptions();

            LoadGridLayout("#RebateBillingIssueOverrideDetails");
        }, 5);
    });

    $(function () {
        $('#RebateBillingIssueOverrideDetails').on('click', '.enabledIssueOverrideChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#RebateBillingIssueOverrideDetails').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('IsEnabled', checked);
            grid.dataSource.sync();
        });
    });

    function onRebateBillingIssueOverrideLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#RebateBillingIssueOverrideDetails");
        }, 5);
    }

    function onRebateBillingIssueOverrideDetailChange(e) {
        e.preventDefault();

        try {
            var cusipTextBox = document.getElementById("RebateBillingIssueOverrideDetailsSecuritySearchTextBox").value;

            QuickColumnGrid("#RebateBillingIssueOverrideDetails", cusipTextBox);

            ReInitVirtualScroll("#RebateBillingIssueOverrideDetails");
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onRebateBillingIssueOverrideCheckData(e) {
        CheckGridData('#RebateBillingIssueOverrideDetails');
    }  

    function additionalRebateBillingIssueOverrideData() {        
        var entity = $("#RebateBillingIssueOverrideDropdownList").data("kendoDropDownList").value();
        var isExpired = $("#RebateBillingIssueOverrideShowExpiredCheckBox").is(':checked');

        return {
            entityId: entity,
            showExpired: isExpired
        }
    }

    function onRebateBillingIssueOverrideError(e) {
        console.log(e.message);
    }
  
    function onRebateBillingIssueOverrideDefaultLoad() {
        try {
            var UserPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    UserPreference = valid;

                    var dropdownList = $('#RebateBillingIssueOverrideDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == UserPreference.DefaultFirm;
                    });

                    $('#RebateBillingIssueOverrideDetails').data("kendoGrid").dataSource.read();
                },
                error: function (valid) {
                    UserPreference = null;
                }
            })
        }
        catch (e) {
            console.log(e.message);
        }
    };

    function onRebateBillingIssueOverrideSelectAll() {
        try {
            var RebateBillingIssueOverrideGrid = $("#RebateBillingIssueOverrideDetails").data("kendoGrid");
            RebateBillingIssueOverrideGrid.select(RebateBillingIssueOverrideGrid.tbody.find(">tr"));

            RebateBillingIssueOverrideSelectAll = true;
        }
        catch (e) {
            console.log(e.message);
        }
    }


    function onRebateBillingIssueOverrideContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#RebateBillingIssueOverrideDetails");
                break;
            case 'Unsort':
                onGroupUnsortGrid('#RebateBillingIssueOverrideDetails');
                break;
      
            case 'AutoFit Columns':
                resizeGridColumns("#RebateBillingIssueOverrideDetails");
                break;

            case 'Select All':
                onRebateBillingIssueOverrideSelectAll();
                break;

            case 'Export To Excel':
                exportToRebateBillingIssueOverrideExcel();
                break;

            case "Reset Grid":
                ResetUserLayout("#RebateBillingIssueOverrideDetails");
                $("#RebateBillingIssueOverrideDetails").data('kendoGrid').setOptions(_originalRebateBillingIssueOverride);
                break;
        }
    }

    var hiddenColumns = false;

    function  onRebateBillingIssueOverrideUnsortGrid(e)
    {
        UnsortGrid(e);
    }

    function onRebateBillingIssueOverrideCheckBoxChange() {
        $("#RebateBillingIssueOverrideDetails").data("kendoGrid").dataSource.read();
    }

    function onRebateBillingIssueOverrideChange() {
        $("#RebateBillingIssueOverrideDetails").data("kendoGrid").dataSource.read();
    }

    function exportToRebateBillingIssueOverrideExcel() {
        KendoGridToCSVConvertor("#RebateBillingIssueOverrideDetails", 'RebateBillingIssueOverrideDetails', RebateBillingIssueOverrideSelectAll);
    }

    $('#SharedLabelCheckBox').change(function () {
        $("#RebateBillingIssueOverrideDetails").data("kendoGrid").refresh();
    })

    function onAddRebateBillingIssueOverride() {
        try {
            var entity = $("#RebateBillingIssueOverrideDropdownList").data("kendoDropDownList").value();

            HelperPartialRebateBillingWindow(
                JSON.stringify({
                    entityId: entity
                }),
                'Add Issue override',
                490,
                490,
                '/RebateBilling/RebateBilling/LoadRebateBillingIssueOverridePartial'
            );
        }
        catch (e) {
            DisplayControllerByStringError("Info", e.message);
        }
    }

    function onIssueOverrideEdit(e) {
        var input = e.container.find("input");
        setTimeout(function () {
            input.select();
        }, 25);
    }    
</script>


@(
 Html.Kendo().ToolBar()
    .Name("RebateBillingIssueOverrideToolBar")
    .Resizable(true)
    .HtmlAttributes(new { @class = "tBar" })
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());

        items.Add().Template(Html.Kendo().DropDownList()
    .Name("RebateBillingIssueOverrideDropdownList")
    .HtmlAttributes(new { @class = "Toolbar-Cell" })
    .Animation(true)
    .DataTextField("Custodian")
    .DataValueField("CompanyId")
    .OptionLabel("Empty List")
    .AutoBind(true)
    .Events(events => events.Change("onRebateBillingIssueOverrideChange").DataBound("onRebateBillingIssueOverrideDefaultLoad"))
    .DataSource(dataSource => dataSource
    .Read(read => read
    .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
    .SelectedIndex(0).ToHtmlString());

        items.Add().Template(Html.Kendo().CheckBox()
        .Name("RebateBillingIssueOverrideExpired")
        .Checked(false)
        .Label(LabelHelper.Text("ShowExpired"))
        .HtmlAttributes(new { id = "RebateBillingIssueOverrideShowExpiredCheckBox", onclick = "onRebateBillingIssueOverrideCheckBoxChange()" }).ToHtmlString());


        items.Add().Template(Html.Kendo().Button().Name("AddRebateBillingIssueOverrideButton").Enable(true).Content(LabelHelper.Text("AddRebateBillingIssueOverride")).Events(ev => ev.Click("onAddRebateBillingIssueOverride")).ToHtmlString());

        items.Add().Template(
    "<table id='RebateBillingIssueOverrideDetailsTable'><tr><td>" +
    LabelHelper.LabelFor("TickerSearch", "RebateBillingIssueOverrideDetailsSecuritySearchTextBox").ToHtmlString() + "</td><td>" +
    Html.Kendo().AutoComplete().Name("RebateBillingIssueOverrideDetailsSecuritySearchTextBox").HtmlAttributes(new { @class = "width90" }).Events(eve => eve.Filtering("onRebateBillingIssueOverrideDetailChange")).Suggest(true).ToHtmlString() + "</td></tr></table>"
    ).HtmlAttributes(new { @class = "float-right" });

    }))

<hr class="hr-white">
<div id="RebateBillingIssueOverrideContent" class="grid-div">

    @(Html.Kendo().Grid<SL_RebateBillingIssueOverrideProjection>
    ()
    .Name("RebateBillingIssueOverrideDetails")
    .HtmlAttributes(new { @class = "grid" })
    .Sortable(sort =>
    {
        sort.AllowUnsort(true);
        sort.Enabled(true);
        sort.SortMode(GridSortMode.MultipleColumn);
    })
    .Scrollable(scrollable => scrollable.Virtual(true).Enabled(true))
    .Filterable()
    .ColumnMenu(menu =>
    {
        menu.Columns(true);
        menu.Filterable(true);
        menu.Sortable(true);
        menu.ComponentType("modern");
    })
    .Navigatable()
    .Events(events =>
    {
        events.DataBound("onRebateBillingIssueOverrideCheckData");
        events.ColumnHide("onRebateBillingIssueOverrideLayoutChange");
        events.ColumnShow("onRebateBillingIssueOverrideLayoutChange");
        events.ColumnResize("onRebateBillingIssueOverrideLayoutChange");
        events.ColumnReorder("onRebateBillingIssueOverrideLayoutChange");
        events.Edit("onIssueOverrideEdit");
    })
    .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Row))
    .Columns(columns =>
    {
        columns.Command(command =>
        {
            command.Edit();
            command.Custom("ApplyRateButton").Text("Apply Rate");
        }).Width(70);

        columns.Bound(x => x.SLRebateBilingIssueOverride).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.EntityId).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Isin).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Sedol).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Quick).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.IssueId).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");

        columns.Bound(x => x.AccountNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.CreditRate).GetColumnFormat(ColumnTypeEnum.Margin, false, "#=GetRateDirection(CreditRate)#", "DecimalNumber");
        columns.Bound(x => x.DebitRate).GetColumnFormat(ColumnTypeEnum.Margin, false, "#=GetRateDirection(DebitRate)#", "DecimalNumber");
        columns.Bound(x => x.BorrowAverageWeightedRate).GetColumnFormat(ColumnTypeEnum.Margin, false, "#=GetRateDirection(BorrowAverageWeightedRate)#", "DecimalNumber");

        columns.Bound(x => x.StartDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "Date");
        columns.Bound(x => x.ExpireDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "Date");
        columns.Bound(x => x.UserName).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
        columns.Bound(x => x.IsEnabled).GetColumnFormat(ColumnTypeEnum.String, false, "<input class='enabledIssueOverrideChkbx' type='checkbox'#= (IsEnabled) ? checked ='checked' : '' #/>", "");
        columns.Bound(x => x.DateTimeId).GetColumnFormat(ColumnTypeEnum.Time, false, "", "");
    })
    .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
    .DataSource(dataSource => dataSource
    .Ajax()
    .PageSize(100)
    .ServerOperation(false)
    .Read(read => read.Action("Read_RebateBillingIssueOverride", "RebateBilling", new { area = "RebateBilling" }).Data("additionalRebateBillingIssueOverrideData"))
    .Update(update => update.Action("Update_RebateBillingIssueOverride", "RebateBilling", new { area = "RebateBilling" }))
    .Events(events => events.Error("onRebateBillingIssueOverrideError"))
    .Model(model =>
    {
        model.Id(x => x.SLRebateBilingIssueOverride);
        model.Field(x => x.EntityId).Editable(false);
        model.Field(x => x.SecurityNumber).Editable(false);
        model.Field(x => x.Ticker).Editable(false);
        model.Field(x => x.Isin).Editable(false);
        model.Field(x => x.Sedol).Editable(false);
        model.Field(x => x.Quick).Editable(false);

        model.Field(x => x.IssueId).Editable(false);
        model.Field(x => x.CreditRate).Editable(true);
        model.Field(x => x.DebitRate).Editable(false);
        model.Field(x => x.AccountNumber).Editable(false);
        model.Field(x => x.StartDate).Editable(false);
        model.Field(x => x.ExpireDate).Editable(true);
        model.Field(x => x.IsEnabled).Editable(true);
        model.Field(x => x.DateTimeId).Editable(false);
        model.Field(x => x.UserName).Editable(false);
    })))
</div>

@(
 Html.Kendo().ContextMenu()
.Name("RebateBillingIssueOverrideContextMenu")
    .Target("#RebateBillingIssueOverrideDetails")
.Events(events => events.Select("onRebateBillingIssueOverrideContextMenuSelect"))
.Items(items =>
{
    items.Add().Text("Reset Grid").Enabled(true);
    items.Add().Separator(true);
    items.Add().Text("AutoFit Columns").Enabled(true);
    items.Add().Text("Unsort").Enabled(true);
    items.Add().Separator(true);
    items.Add().Text("Select All").Enabled(true);
    items.Add().Text("Export To Excel").Enabled(true);    
})
)



