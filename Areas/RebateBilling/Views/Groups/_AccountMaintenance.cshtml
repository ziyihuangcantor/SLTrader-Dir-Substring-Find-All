@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools


<script type="text/javascript">
    var _originalGroupDetails = null;
    var _originalGroupDetailsToolbar = null;

    var _originalGroupAccountDetails = null;
    var _originalGroupAccountDetailsToolbar = null;

    $(document).ready(function () {
        setTimeout(function () {
            _originalGroupDetails = $("#GroupDetails").data('kendoGrid').getOptions();
            _originalGroupDetailsToolbar = $("#GroupDetails .k-grid-toolbar").html();

            _originalGroupAccountDetails = $("#GroupAccountDetails").data('kendoGrid').getOptions();
            _originalGroupAccountDetailsToolbar = $("#GroupAccountDetails .k-grid-toolbar").html();

            LoadGridLayout("#GroupDetails");
            LoadGridLayout("#GroupAccountDetails");

            $("#GroupDetails .k-grid-toolbar").html(_originalGroupDetailsToolbar);
            $("#GroupDetails .k-grid-toolbar").addClass("k-grid-top");

            $("#GroupAccountDetails .k-grid-toolbar").html(_originalGroupAccountDetailsToolbar);
            $("#GroupAccountDetails .k-grid-toolbar").addClass("k-grid-top");

        }, 5);     
    });

    

    $(function () {
        $('#GroupAccountDetails').on('click', '.enabledGroupAccountChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#GroupAccountDetails').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('IsEnabled', checked);
            grid.dataSource.sync();
        });

        $('#GroupAccountDetails').on('click', '.enabledGroupAccountUseCollateralChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#GroupAccountDetails').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('UseCollateralPrice', checked);
            grid.dataSource.sync();
        });

        $('#GroupAccountDetails').on('click', '.enabledGroupUseCollateralChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#GroupDetails').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('UseCollateralPrice', checked);
            grid.dataSource.sync();
        });

    });


    function onGroupContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#GroupDetails");
                break;
            case 'Unsort':
                onGroupUnsortGrid('#GroupDetails');
                break;

            case 'Select All':
                onGroupSelectAll(true);
                break;

            case 'AutoFit Columns':
                resizeGridColumns("#GroupDetails");
                break;

            case 'Export To Excel':
                exportToGroupExcel();
                break;

            case "Reset Grid":
                ResetUserLayout("#GroupDetails");
                $("#GroupDetails").data('kendoGrid').setOptions(_originalGroupDetails);

                $("#GroupDetails .k-grid-toolbar").html(_originalGroupDetailsToolbar);
                $("#GroupDetails .k-grid-toolbar").addClass("k-grid-top");
                break;
        }
    }


    function onGroupAccountContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'Bulk Update':
                BulkUpdateAccounts();
                break;

            case 'Unsort':
                onGroupAccountUnsortGrid('#GroupAccountDetails');
                break;

            case 'Select All':
                onGroupAccountSelectAll(true);
                break;

            case 'AutoFit Columns':
                resizeGridColumns("#GroupAccountDetails");
                break;

            case 'Export To Excel':
                exportToGroupAccountExcel();
                break;

            case "Reset Grid":
                ResetUserLayout("#GroupAccountDetails");
                $("#GroupAccountDetails").data('kendoGrid').setOptions(_originalGroupAccountDetails);

                $("#GroupAccountDetails .k-grid-toolbar").html(_originalGroupAccountDetailsToolbar);
                $("#GroupAccountDetails .k-grid-toolbar").addClass("k-grid-top");
                break;
        }
    }

    function onGroupAccountDetailLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#GroupAccountDetails");
        }, 5);
    }

    function onGroupDetailLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#GroupDetails");
        }, 5);
    }

    function onGroupCreateData(e) {
        var entity = $("#GroupEntityDropdownList").data("kendoDropDownList").value();

        return {
            EntityId: entity
        }
    }


    function onGroupAccountCreateData(e) {
        var entity = $("#GroupEntityDropdownList").data("kendoDropDownList").value();

        var entityGrid = $("#GroupDetails").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());
        
        var slRebateBillingGroup = selectedItem["SLRebateBillingGroup"];

        return {
            entityId: entity,
            rebateBillingGroup: slRebateBillingGroup
        }
    }

    function onGroupSelectAll(e) {
        try {
            var groupDetailsGrid = $("#GroupDetails").data("kendoGrid");
            groupDetailsGrid.select(groupDetailsGrid.tbody.find(">tr"));
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onGroupUnsortGrid(e) {
        UnsortGrid(e);
    }

    function exportToGroupExcel() {
        KendoGridToCSVConvertor("#GroupDetails", 'GroupDetails');
    }

    function additionalGroupData() {
        var entity = $("#GroupEntityDropdownList").data("kendoDropDownList").value();

        return {            
            entityId: entity,
        }
    }

    function addGroupEntityData(e) {
        var entity = $("#GroupEntityDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity,
        }
    }



    function onRebateBillingDefaultOptions() {
        try {
            var entity = $("#GroupEntityDropdownList").data("kendoDropDownList").value();

            HelperPartialRebateBillingWindow(
                JSON.stringify({
                    entityId: entity
                }),
                'Rebate Billing Defaults',
                490,
                490,
                '/RebateBilling/RebateBilling/LoadRebateBillingDefaultOptionsPartial'
            );
        }
        catch (e) {
            DisplayControllerByStringError("Info", e.message);
            console.log(e.message);
        }
    }

    function BulkUpdateAccounts() {
        var dataItems = [];
        var grid = $('#GroupAccountDetails').data('kendoGrid');
        var rows = grid.select();

        rows.each(function (index, row) {
            var selectedItem = grid.dataItem(row);
            dataItems.push(selectedItem);
        });


        try {
            HelperPartialRebateBillingWindow(
                JSON.stringify({
                    items: dataItems
                }),
                'Bulk Account Updates',
                490,
                490,
                '/RebateBilling/RebateBilling/LoadRebateBillingBulkUpdatePartial'
            );
        }
        catch (e) {
            DisplayControllerByStringError("Info", e.message);
            console.log(e.message);
        }
    }

    function onRebateBillingAccountDefaultOptions() {
        try {
            HelperPartialRebateBillingWindow(
                null,
                'Rebate Billing Defaults',
                490,
                490,
                '/RebateBilling/RebateBilling/LoadRebateBillingDefaultOptionsPartial'
            );
        }
        catch (e) {
            DisplayControllerByStringError("Info", e.message);
            console.log(e.message);
        }
    }

    $('#SharedLabelCheckBox').change(function () {
        $("#GroupAccountsDetails").data("kendoGrid").refresh();
    })

    function onGroupAccountSelectAll(e) {
        try {
            var groupDetailsGrid = $("#GroupAccountDetails").data("kendoGrid");
            groupDetailsGrid.select(groupDetailsGrid.tbody.find(">tr"));
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onGroupUnsortGrid(e) {
        UnsortGrid(e);
    }

    function exportToGroupAccountExcel() {
        KendoGridToCSVConvertor("#GroupAccountDetails", 'GroupAccountDetails');
    }

    function additionalGroupAccountData() {
        var entity = $("#GroupEntityDropdownList").data("kendoDropDownList").value();

        var entityGrid = $("#GroupDetails").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        return {
            entityId: entity,
            rebatebillingGroup: selectedItem["SLRebateBillingGroup"]
        }
    }

    function addGroupAccountEntityData() {
        var entity = $("#GroupAccountEntityDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity,
        }
    }

    function onGroupAccountDefaultLoad() {
        try {
            var UserPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    UserPreference = valid;

                    var dropdownList = $('#GroupAccountEntityDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == UserPreference.DefaultFirm;
                    });

                    $('#GroupAccountDetails').data("kendoGrid").dataSource.read();
                },
                error: function (valid) {
                    UserPreference = null;
                }
            })
        }
        catch (e) { }
    }

    function onGroupAccountError(e) {
        console.log(e);
    }

    function onGroupAccountCheckData() {

        try {
            CheckGridData('#GroupAccountDetails');
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onGroupAccountChange() {
        $('#GroupAccountDetails').data("kendoGrid").dataSource.read();
    }

    function onGroupAccountRowEdit(e) {
        var input = e.container.find("input");
        setTimeout(function () { input.select(); });

        if (e.model.isNew() && !e.model.dirty) {
            var update = $(e.container).parent().find(".k-grid-update");
            $(update).html('<span class="k-icon k-update"></span>Add');
        }
    }

    function onGroupContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#GroupDetails");
                break;
            case 'Unsort':
                onGroupUnsortGrid('#GroupDetails');
                break;

            case 'Select All':
                onGroupSelectAll(true);
                break;

            case 'AutoFit Columns':
                resizeGridColumns("#GroupDetails");
                break;


            case 'Export To Excel':
                exportToGroupExcel();
                break;
        }
    }

    function onGroupSelectAll(e) {
        try {
            var groupDetailsGrid = $("#GroupDetails").data("kendoGrid");
            groupDetailsGrid.select(groupDetailsGrid.tbody.find(">tr"));
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onGroupUnsortGrid(e) {
        UnsortGrid(e);
    }

    function exportToGroupExcel() {
        KendoGridToCSVConvertor("#GroupDetails", 'GroupDetails');
    }

    function additionalGroupData() {        
        var entity = $("#GroupEntityDropdownList").data("kendoDropDownList").value();

        return {            
            entityId: entity,
        }
    }

    function addGroupEntityData() {
        var entity = $("#GroupEntityDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity,
        }
    }

    function onGroupDefaultLoad() {
        try {
            var UserPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    UserPreference = valid;

                    var dropdownList = $('#GroupEntityDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == UserPreference.DefaultFirm;
                    });

                    $('#GroupDetails').data("kendoGrid").dataSource.read();
                },
                error: function (valid) {
                    UserPreference = null;
                }
            })
        }
        catch (e) { }
    }

    function onGroupError(e) {
        DisplayControllerError(e);
    }

    function onGroupCheckData() {

        try {
            CheckGridData('#GroupDetails');
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onGroupChange() {
        $('#GroupDetails').data("kendoGrid").dataSource.read();
    }

    function onGroupRowChange() {
        $('#GroupAccountDetails').data("kendoGrid").dataSource.read();
    }

    function onGroupRowEdit(e) {
        var input = e.container.find("input");
        setTimeout(function () { input.select(); });

        if (e.model.isNew() && !e.model.dirty) {
            var update = $(e.container).parent().find(".k-grid-update");
            $(update).html('<span class="k-icon k-update"></span>Add');
        }
    }
</script>

<style>
    #RebateBillingMaintenaceSplitter {
        height: 100%;
    }
</style>

@(
     Html.Kendo().ToolBar()
            .Name("GroupToolBar")
        .Resizable(true)
        .Items(items =>
        {            
            items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
            items.Add().Template(Html.Kendo().DropDownList()
                                .Name("GroupEntityDropdownList")
                                .HtmlAttributes(new { @class = "width100" })
                                .DataTextField("Custodian")
                                .DataValueField("CompanyId")
                                .OptionLabel(LabelHelper.Text("OptionLabel"))
                                .AutoBind(true)
                                .Events(events => events.Change("onGroupChange").DataBound("onGroupDefaultLoad"))
                                .DataSource(dataSource => dataSource
                                .Read(read => read
                                .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                                .SelectedIndex(0).ToHtmlString());

            items.Add().Template(Html.Kendo().Button()
                      .Name("GroupDefaultOptionButton")
              .Events(e => e.Click("onRebateBillingDefaultOptions"))
              .Content(LabelHelper.Text("DefaultOptions")).ToHtmlString());
        }))
<hr class="hr-white">

<div id="RebateBillingMaintenanceContent" class="grid-div">
    @(Html.Kendo().Splitter()
                                                  .Name("RebateBillingMaintenaceSplitter")
                                                  .Orientation(SplitterOrientation.Vertical)
                                                  .Panes(panes =>
                                                  {
                                                      panes.Add()
                                                          .Collapsible(false)
                                                          .Scrollable(false)
                                                          .Size("40%")
                                                          .Content(@<text>
                                                            @(Html.Kendo().Grid<SL_RebateBillingGroup>()
                                                                                                .Name("GroupDetails")
                                                                                                .HtmlAttributes(new { @class = "grid" })
                                                                                                .Sortable()
                                                                                                .Scrollable()
                                                                                                .Filterable()
                                                                                                .Navigatable()
                                                                                                .ColumnMenu(menu =>
                                                                                                {
                                                                                                    menu.Columns(true);
                                                                                                    menu.Filterable(true);
                                                                                                    menu.Sortable(true);
                                                                                                    menu.ComponentType("modern");
                                                                                                })
                                                                                                .Editable(edit =>
                                                                                                {
                                                                                                    edit.Enabled(SessionSecurityService.IsEditable(ManagerTask.ViewSLRebateBillingApp));
                                                                                                    edit.Mode(GridEditMode.InLine);
                                                                                                })
                                                                                                .ToolBar(tBar =>
                                                                                                {
                                                                                                    tBar.Create();
                                                                                                })
                                                                                                .Events(events =>
                                                                                                {
                                                                                                    events.DataBound("onGroupCheckData");
                                                                                                    events.Edit("onGroupRowEdit");
                                                                                                    events.Change("onGroupRowChange");
                                                                                                    events.ColumnHide("onGroupDetailLayoutChange");
                                                                                                    events.ColumnShow("onGroupDetailLayoutChange");
                                                                                                    events.ColumnResize("onGroupDetailLayoutChange");
                                                                                                    events.ColumnReorder("onGroupDetailLayoutChange");
                                                                                                })
                                                                                                .Selectable(seclect => seclect.Mode(GridSelectionMode.Multiple))
                                                                                                .Columns(columns =>
                                                                                                {
                                                                                                    columns.Bound(x => x.DateTimeId).GetColumnFormat(ColumnTypeEnum.Date, false, "", "").Hidden(true);
                                                                                                    columns.Bound(x => x.SLRebateBillingGroup).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                                                                                    columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                                                                                    columns.Bound(x => x.GroupCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                                                                                    columns.Bound(x => x.Name).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                                                                                    columns.Bound(x => x.GroupEmailAddress).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                                                                                    columns.Bound(x => x.GroupRebateType).GetColumnFormat(ColumnTypeEnum.String, false, "", "_GroupRebateTypeDropdown");
                                                                                                    columns.Bound(x => x.GroupBillingType).GetColumnFormat(ColumnTypeEnum.String, false, "", "_GroupBillingTypeDropdown");
                                                                                                    columns.Bound(x => x.GroupBillingCreditMarkup).GetColumnFormat(ColumnTypeEnum.Margin, false, "", "");
                                                                                                    columns.Bound(x => x.GroupBillingDebitMarkup).GetColumnFormat(ColumnTypeEnum.Margin, false, "", "");
                                                                                                    columns.Bound(x => x.UseCollateralPrice).GetColumnFormat(ColumnTypeEnum.String, false, "<input class='enabledGroupUseCollateralChkbx' type='checkbox'#= (UseCollateralPrice) ? checked ='checked' : '' #/>", "");
                                                                                                    columns.Command(command =>
                                                                                                    {
                                                                                                        command.Edit();
                                                                                                        command.Destroy();
                                                                                                    });
                                                                                                })
                                                                                                .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
                                                                                                .DataSource(dataSource => dataSource
                                                                                                .Ajax()
                                                                                                .Sort(sort =>
                                                                                                {
                                                                                                    sort.Add(x => x.SLRebateBillingGroup).Descending();
                                                                                                })
                                                                                                .ServerOperation(false)
                                                                                                .Read(read => read.Action("Read_Groups", "Group", new { area = "RebateBilling" }).Data("additionalGroupData"))
                                                                                                .Update(update => update.Action("Update_Group", "Group", new { area = "RebateBilling" }))
                                                                                                .Destroy(destroy => destroy.Action("Delete_Group", "Group", new { area = "RebateBilling" }))
                                                                                                .Create(create => create.Action("Create_Group", "Group", new { area = "RebateBilling" }).Data("addGroupEntityData"))
                                                                                                    .Model(model =>
                                                                                                    {
                                                                                                        model.Id(x => x.SLRebateBillingGroup);
                                                                                                        model.Field(x => x.EntityId).Editable(false);
                                                                                                        model.Field(x => x.DateTimeId).Editable(false);
                                                                                                    })
                                                                                                    .Events(events => events
                                                                                                        .Error("onGroupError"))))
                                                        </text>);

                                                            panes.Add()
                .Collapsible(false)
                .Scrollable(false)
                .Size("60%")
                .Content(@<text>
                    @(Html.Kendo().Grid<SL_RebateBillingGroupAccount>()
                                    .Name("GroupAccountDetails")
                                    .HtmlAttributes(new { @class = "grid" })
                                    .Sortable()
                                    .AutoBind(false)
                                    .Scrollable()
                                    .Filterable()
                                    .Navigatable()
                                    .ColumnMenu(menu =>
                                    {
                                        menu.Columns(true);
                                        menu.Filterable(true);
                                        menu.Sortable(true);
                                        menu.ComponentType("modern");
                                    })
                                    .Editable(edit =>
                                    {
                                        edit.Enabled(SessionSecurityService.IsEditable(ManagerTask.ViewSLRebateBillingApp));
                                        edit.Mode(GridEditMode.InLine);
                                        edit.CreateAt(GridInsertRowPosition.Top);
                                    })
                                    .ToolBar(tBar =>
                                    {
                                        tBar.Create();
                                    })
                                    .Events(events =>
                                    {
                                        events.DataBound("onGroupAccountCheckData");
                                        events.Edit("onGroupAccountRowEdit");

                                        events.ColumnHide("onGroupAccountDetailLayoutChange");
                                        events.ColumnShow("onGroupAccountDetailLayoutChange");
                                        events.ColumnResize("onGroupAccountDetailLayoutChange");
                                        events.ColumnReorder("onGroupAccountDetailLayoutChange");
                                    })
                                    .Selectable(seclect => seclect.Mode(GridSelectionMode.Multiple))
                                    .Columns(columns =>
                                    {
                                        columns.Command(command =>
                                        {
                                            command.Edit();
                                            command.Destroy();
                                        });
                                        columns.Bound(x => x.SLRebateBillingGroupAccount).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                        columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                        columns.Bound(x => x.RebateBillingGroup).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                        columns.Bound(x => x.AccountNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                        columns.Bound(x => x.AccountName).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                        columns.Bound(x => x.AccountEmailAddress).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                        columns.Bound(x => x.AccountRebateType).GetColumnFormat(ColumnTypeEnum.String, false, "", "_GroupAccountRebateTypeDropdown");
                                        columns.Bound(x => x.AccountBillingType).GetColumnFormat(ColumnTypeEnum.String, false, "", "_GroupAccountBillingTypeDropdown");
                                        columns.Bound(x => x.AccountCreditMarkup).GetColumnFormat(ColumnTypeEnum.Margin, false, "", "");
                                        columns.Bound(x => x.AccountDebitMarkup).GetColumnFormat(ColumnTypeEnum.Margin, false, "", "");
                                        columns.Bound(x => x.StartDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
                                        columns.Bound(x => x.StopDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
                                        columns.Bound(x => x.UseCollateralPrice).GetColumnFormat(ColumnTypeEnum.Margin, false, "<input class='enabledGroupAccountUseCollateralChkbx' type='checkbox'#= (UseCollateralPrice) ? checked ='checked' : '' #/>", "");
                                        columns.Bound(x => x.IsEnabled).GetColumnFormat(ColumnTypeEnum.String, false, "<input class='enabledGroupAccountChkbx' type='checkbox'#= (IsEnabled) ? checked ='checked' : '' #/>", "");

                                    })
                                    .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
                                    .DataSource(dataSource => dataSource
                                    .Ajax()
                                    .ServerOperation(false)
                                    .Read(read => read.Action("Read_GroupAccounts", "Group", new { area = "RebateBilling" }).Data("additionalGroupAccountData"))
                                    .Update(update => update.Action("Update_GroupAccount", "Group", new { area = "RebateBilling" }))
                                    .Destroy(destroy => destroy.Action("Delete_GroupAccount", "Group", new { area = "RebateBilling" }))
                                    .Create(create => create.Action("Create_GroupAccount", "Group", new { area = "RebateBilling" }).Data("onGroupAccountCreateData"))
                                        .Model(model =>
                                        {
                                            model.Id(x => x.SLRebateBillingGroupAccount);
                                        })
                                        .Events(events => events
                                            .Error("onGroupAccountError"))))

                </text>);}))
</div>


@(Html.Kendo().ContextMenu()
        .Name("GroupAccountContextMenu")
        .Target("#GroupAccountDetails")
        .Events(events => events.Select("onGroupAccountContextMenuSelect"))
        .Items(items =>
        {
            items.Add().Text("Reset Grid").Enabled(true);
            items.Add().Separator(true);
            items.Add().Text("Bulk Update").Enabled(SessionSecurityService.IsEditable(ManagerTask.ViewSLRebateBillingApp));
            items.Add().Separator(true);
            items.Add().Text("AutoFit Columns").Enabled(true);
            items.Add().Text("Unsort").Enabled(true);
            items.Add().Separator(true);
            items.Add().Text("Select All").Enabled(true);
            items.Add().Text("Export To Excel").Enabled(true);
        }))

@(Html.Kendo().ContextMenu()
        .Name("GroupContextMenu")
        .Target("#GroupDetails")
        .Events(events => events.Select("onGroupContextMenuSelect"))
        .Items(items =>
        {
            items.Add().Text("Reset Grid").Enabled(true);
            items.Add().Separator(true);
            items.Add().Text("AutoFit Columns").Enabled(true);
            items.Add().Text("Unsort").Enabled(true);
            items.Add().Separator(true);
            items.Add().Text("Select All").Enabled(true);
            items.Add().Text("Export To Excel").Enabled(true);
        }))
