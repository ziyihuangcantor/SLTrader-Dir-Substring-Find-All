@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Tools


<script type="text/javascript">
    var StockRecordSelectAll = false;

    function onStockRecordCheckData(e) {
        CheckGridData('#StockRecordDetails');
    }

    function additionalStockRecordData() {

        var datepicker = $("#StockRecordCalander").data("kendoDatePicker");
        var effectiveDate = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entity = $("#StockRecordDropdownList").data("kendoDropDownList").value();

        return {
            effectiveDate: effectiveDate,
            entityId: entity,
        }
    }

    function onStockRecordError(e) {
        console.log(e.message);
    }

    function onStockRecordRowChange(e) {
        StockRecordSelectAll = false;

        var entityGrid = $("#StockRecordDetails").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        var entityId = selectedItem["EntityId"];
        var securityNumber = selectedItem["SecurityNumber"];
        var issueId = selectedItem["IssueId"];
        var effectiveDate = selectedItem["EffectiveDate"];


        UpdateIssue(securityNumber);
        UpdateBox(effectiveDate, entityId, issueId);
        UpdateTrading(entityId, issueId);
        UpdateSharedView(entityId, securityNumber);
    }

    function onStockRecordDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function(valid) {
                    userPreference = valid;

                    var dropdownList = $('#StockRecordDropdownList').data("kendoDropDownList");

                    dropdownList.select(function(dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $('#StockRecordDetails').data("kendoGrid").dataSource.read();
                },
                error: function(valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    };

    function onStockRecordSelectAll() {
        try {
            var contractGrid = $("#StockRecordDetails").data("kendoGrid");
            contractGrid.select(contractGrid.tbody.find(">tr"));

            StockRecordSelectAll = true;
        }
        catch (e) {
            console.log(e.message);
        }
    }


    function onStockRecordContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'Unsort':
                onStockRecordUnsortGrid("#StockRecordDetails");
                break;

            case 'Select All':
                onStockRecordSelectAll();
                break;

            case 'Export To Excel':
                exportToStockRecordExcel();
                break;
        }
    }

    var hiddenColumns = false;

    function  onStockRecordUnsortGrid(e)
    {
        UnsortGrid(e);
    }

    function onStockRecordChange() {
        $("#StockRecordDetails").data("kendoGrid").dataSource.read();
    }

    function exportToStockRecordExcel() {
        KendoGridToCSVConvertor("#StockRecordDetails", 'StockRecordDetails', StockRecordSelectAll);
    }

    $('#SharedLabelCheckBox').change(function () {
        $("#StockRecordDetails").data("kendoGrid").refresh();
    })
</script>


@(
 Html.Kendo().ToolBar()
    .Name("StockRecordToolBar")
    .Resizable(true)
    .HtmlAttributes(new { @class = "tBar" })
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("EffectiveDate").ToHtmlString());

        items.Add().Template(Html.Kendo().DatePicker()
            .Name("StockRecordCalander")
            .Format("yyyy-MM-dd")
            .Value(DateTime.Now)
            .HtmlAttributes(new { @class = "Toolbar-Cell" })
            .Events(events => events.Change("onStockRecordChange")).ToHtmlString());

        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());

        items.Add().Template(Html.Kendo().DropDownList()
    .Name("StockRecordDropdownList")
    .HtmlAttributes(new { @class = "Toolbar-Cell" })
    .Animation(true)
    .DataTextField("Custodian")
    .DataValueField("CompanyId")
    .OptionLabel("Empty List")
    .AutoBind(true)
    .Events(events => events.Change("onStockRecordChange").DataBound("onStockRecordDefaultLoad"))
    .DataSource(dataSource => dataSource
    .Read(read => read
    .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
    .SelectedIndex(0).ToHtmlString());
    }))

<hr class="hr-white">
<div id="StockRecordContent" class="grid-div">

    @(Html.Kendo().Grid<SL_RebateBillingStockRecordProjection>()
        .Name("StockRecordDetails")
        .HtmlAttributes(new { @class = "grid" })
        .Sortable(sort =>
               {
                   sort.AllowUnsort(true);
                   sort.Enabled(true);
                   sort.SortMode(GridSortMode.MultipleColumn);
               })
        .Scrollable(scrollable => scrollable.Virtual(true).Enabled(true))
        .Filterable()
        .Navigatable()
        .Events(events => events.Change("onStockRecordRowChange").DataBound("onStockRecordCheckData"))
        .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Row))
        .Columns(columns =>
        {
            columns.Bound(x => x.EffectiveDate).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.EntityId).Hidden(true).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.AccountNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.RecordType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.AccountType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.TradedQuantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(TradedQuantity)#", "");
            columns.Bound(x => x.SettledQuantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(SettledQuantity)#", "");
            columns.Bound(x => x.SettlementDate).GetColumnFormat(ColumnTypeEnum.DateTime, false, "", "");
         })
        .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
        .Pageable(page =>
        {
            page.PageSizes(false);
            page.Enabled(true);
            page.Numeric(false);
            page.PreviousNext(false);
            page.Info(false);
        })
        .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(100)
        .ServerOperation(false)
        .Read(read => read.Action("Read_StockRecordExtendedSummary", "RebateBilling", new { area = "RebateBilling" }).Data("additionalStockRecordData"))
        .Events(events => events.Error("onStockRecordError"))
        .Aggregates(s =>
            {
                s.Add(x => x.TradedQuantity).Sum();
                s.Add(x => x.SettledQuantity).Sum();
            })))
</div>

@(
 Html.Kendo().ContextMenu()
.Name("StockRecordContextMenu")
    .Target("#StockRecordDetails")
.Events(events => events.Select("onStockRecordContextMenuSelect"))
.Items(items =>
{
    items.Add().Text("Unsort").Enabled(true);
    items.Add().Text("Select All").Enabled(true);
    items.Add().Text("Export To Excel").Enabled(true);
})
)







