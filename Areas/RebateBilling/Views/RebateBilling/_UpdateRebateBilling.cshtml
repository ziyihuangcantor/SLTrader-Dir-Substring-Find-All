@using SLTrader.Enums
@using SLTrader.Tools
@model List<BondFire.Entities.Projections.SL_RebateBillingItemProjection>

<style scoped>
    #BulkUpdateTable {
        border-collapse: collapse;
        margin: 0px;
    }
</style>

<script type="text/javascript">

    $(document).ready(function () {
        $('#MarkupCheckBox').change(function () {
            $("#MarkupTextBox").data("kendoNumericTextBox").enable($(this).is(':checked'));
            $("#ApplyChangesButton").data("kendoButton").enable(true);
        });

        $('#RebateRateCheckBox').change(function () {
            $("#RebateRateTextBox").data("kendoNumericTextBox").enable($(this).is(':checked'));
            $("#ApplyChangesButton").data("kendoButton").enable(true);
        });


        resizeGridColumns("#RebateBillingBulkUpdateGrid");
    });

    function onBulkRebateBillingSelectAll() {
        try {
            var bulkUpdateGrid = $("#RebateBillingBulkUpdateGrid").data("kendoGrid");
            bulkUpdateGrid.select(bulkUpdateGrid.tbody.find(">tr"));
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onBulkRebateBillingApplyChanges() {

        $("#StatusLabel").html('<i class="fa fa-spinner fa-spin"></i> Processing...');

        try {
            var markUp = ($("#MarkupCheckBox").is(':checked')) ? $("#MarkupTextBox").data("kendoNumericTextBox").value() : null;
            var rebateRate = ($("#RebateRateCheckBox").is(':checked')) ? $("#RebateRateTextBox").data("kendoNumericTextBox").value() : null;

            var grid = $('#RebateBillingBulkUpdateGrid').data('kendoGrid');
            var rows = grid.select();
            var dataItems = [];

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });

            if (dataItems.length == 0) {
                $('#StatusLabel').html('<i class="fa fa-times"></i> No items selected!');
            }
            else {
                $.ajax({
                    url: "@Url.Action("UpdateBulkAccountEditor", "Group", new {area ="RebateBilling" })",
                    type: 'POST',
                    contentType: 'application/json;',
                    data: JSON.stringify({
                        markUp: markUp,
                        rebateRate:rebateRate,
                        list: dataItems
                    }),
                    success: function (valid) {
                        for (var i = 0; i < valid.length; i++) {
                            var dataItem = valid[i];
                            $("#RebateBillingBulkUpdateGrid").data("kendoGrid").dataSource.pushUpdate(dataItem);
                        }

                        $('#StatusLabel').html('Updated ' + valid.length + ' trades.');
                        $("#SaveTradesButton").data("kendoButton").enable(true);
                    },
                    error: function (valid) {
                        $('#StatusLabel').html('<i class="fa fa-times"></i> Error Processing!');
                    }
                })
            }
        }
        catch (e) {
            $('#StatusLabel').html('<i class="fa fa-times"></i> Error Processing!');
            console.log(e.message);
        }
   }

    function onBulkRebateBillingGridEdit() {
        $("#SaveTradesButton").data("kendoButton").enable(true);
    }

    function onSaveBulkebateBilling() {
        $("#StatusLabel").html('<i class="fa fa-spinner fa-spin"></i> Processing...');
        $("#SaveTradesButton").data("kendoButton").enable(false);
        try {
            var grid = $('#RebateBillingBulkUpdateGrid').data('kendoGrid');
            var rows = grid.select();
            var rowCount = rows.length;
            var dataItems = [];

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });

            if (dataItems.length == 0) {
                $('#StatusLabel').html('<i class="fa fa-times"></i> No items selected!');
            }
            else {
                $.ajax({
                    url: "@Url.Action("SaveBulkAccountEditor", "Group", new { area = "RebateBilling" })",
                    type: 'POST',
                    contentType: 'application/json;',
                    data: JSON.stringify({
                        list: dataItems
                    }),
                    success: function(valid) {

                        for (var i = 0; i < valid.length; i++) {
                            var dataItem = valid[i];

                            $("#RebateBillingBulkUpdateGrid").data("kendoGrid").dataSource.pushDestroy(dataItem);
                        }

                        $('#StatusLabel').html("Successfully saved " + (valid.length) + " trade(s).");
                    },
                    error: function() {
                        $('#StatusLabel').html('<i class="fa fa-times"></i> Error Processing!');
                    }
                });
            }
        }
        catch (e) {
            $('#StatusLabel').html('<i class="fa fa-times"></i> Error Processing!');
            console.log(e.message);
        }
        $("#SaveTradesButton").data("kendoButton").enable(true);
    }

    function onBulkRebateBillingCheckData() {
        try {
            CheckGridData('#RebateBillingBulkUpdateGrid');
        }
        catch (e) {
            console.log(e.message);
        }
    }
    function onBulkRebateBillingError(e) {

    }
    function onBulkRebateBillingSelectAll() {
        try {
            var bulkUpdateGrid = $("#RebateBillingBulkUpdateGrid").data("kendoGrid");
            bulkUpdateGrid.select(bulkUpdateGrid.tbody.find(">tr"));
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function additionalBulkRebateBillingData() {

        return {
            entityId: '@Model.ToList()[0].EntityId',
        }
    }
</script>

<table>
    <tr>
        <td>
            @(Html.Kendo()
            .Button()
            .Enable(false)
            .Name("ApplyChangesButton")
            .HtmlAttributes(new { @class = "width90" })
            .Events(e => e.Click("onBulkRebateBillingApplyChanges"))
            .Content(@<text>
                <i class="fa fa-repeat"></i>&nbsp;Apply Options
            </text>))
        </td>
        <td>
            @(Html.Kendo()
            .Button()
            .Enable(true)
            .Name("SaveTradesButton")
            .HtmlAttributes(new { @class = "width90" })
                            .Events(e => e.Click("onSaveBulkebateBilling"))
            .Content(@<text>
                        <i class="icon-check color-green"></i>&nbsp;Save Records
            </text>))
        </td>
        <td>
            @(Html.Kendo()
                                .Button()
                                        .Enable(true)
                                .Name("BulkUpdatesSelectAllButton")
                                .HtmlAttributes(new { @class = "width90" })
                                        .Events(e => e.Click("onBulkRebateBillingSelectAll"))
                                .Content(@<text>
                                            <i class="icon-check color-green" ></i>&nbsp;Select All
                                </text>))
        </td>
    </tr>
</table>
<table id="BulkUpdateTable">
    <tr>
        <td>
            @Html.CheckBox("MarkupCheckBox")
        </td>
        <td>
            @LabelHelper.Label("Markup")
        </td>
        <td>
            @Html.Kendo().NumericTextBox().Name("MarkupTextBox").Spinners(false).Value(0).Enable(false).Decimals(3).Format("000.000")
        </td>
        <td>
            @Html.CheckBox("RebateRateCheckBox")
        </td>
        <td>
            @LabelHelper.Label("RebateRate")
        </td>
        <td>
            @Html.Kendo().NumericTextBox().Name("RebateRateTextBox").Spinners(false).Value(0).Enable(false).Decimals(3).Format("000.000")
        </td>
    </tr>
</table>
<div id="BulkAccountContent" class="grid-div">
    @(Html.Kendo().Grid(Model)
        .Name("AccountBulkUpdateGrid")
                        .HtmlAttributes(new { @class = "grid" })
                .Sortable()
                .Scrollable(scrollable => scrollable.Virtual(true))
                .Filterable()
                .Navigatable()
                .Editable(edit =>
                {
                    edit.Mode(GridEditMode.InCell);
                })
                        .Events(events => events.DataBound("onBulkRebateBillingCheckData").Edit("onBulkRebateBillingGridEdit"))
        .Selectable(seclect => seclect.Mode(GridSelectionMode.Multiple))
        .Columns(columns =>
        {
            columns.Bound(x => x.SLRebateBillingItem).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.AccountNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.IssueId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.Price).GetColumnFormat(ColumnTypeEnum.Money, false, "", "");
            columns.Bound(x => x.QuantitySettled).GetColumnFormat(ColumnTypeEnum.Position, false, "", "");
            columns.Bound(x => x.QuantityAllocated).GetColumnFormat(ColumnTypeEnum.Position, false, "", "");
            columns.Bound(x => x.QuantityRemaining).GetColumnFormat(ColumnTypeEnum.Position, false, "", "");
            columns.Bound(x => x.BillingRate).GetColumnFormat(ColumnTypeEnum.Rate, false, "", "#=GetRateDirection(BillingRate)#");
            columns.Bound(x => x.RebateAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "", "#=GetMoneyDirection(RebateAmount)#");
            columns.Bound(x => x.MarkupBillingRate).GetColumnFormat(ColumnTypeEnum.Rate, false, "", "#=GetRateDirection(MarkupBillingRate)#");
            columns.Bound(x => x.MarkUpRebateAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "", "#=GetMoneyDirection(MarkUpRebateAmount)#");
        })
        .DataSource(dataSource => dataSource
        .Ajax()      
        .ServerOperation(false)
        .Update(update => update.Action("UpdateBulkRebateBilling", "RebateBilling", new { area = "RebateBilling" }))
        .AutoSync(true)
        .Aggregates(agg =>
            {
                agg.Add(x => x.RebateAmount).Sum();
                agg.Add(x => x.MarkUpRebateAmount).Sum();
            })
            .Model(model =>
                {
                    model.Id(x => x.SLRebateBillingItem);
                    model.Field(x => x.EntityId).Editable(false);
                    model.Field(x => x.AccountNumber).Editable(false);                  
                })                        
            .Events(events => events
                    .Error("onBulkRebateBillingError"))))
</div>
<label id="StatusLabel" style="color: white;"></label>
