@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools

@*<style>
    #PortfolioRequirementToolBar .k-checkbox-label {
        padding-left: 20px;
        vertical-align: middle;        
    }

     .demo-section.k-content {
        box-shadow: 0 1px 2px 1px rgba(0,0,0,.08), 0 3px 6px rgba(0,0,0,.08);
        padding: 5px;
        height: 100%;        
        width: 100%;
        position:relative;
        margin:0px;
    }
</style>*@

<script>

    $('#SharedLabelCheckBox').change(function () {
        $("#PortfolioRequirementGrid").data("kendoGrid").refresh();
    })

    var _originalPortfolioRequirementGrid = null;

    $(document).ready(function () {
        setTimeout(function () {
            _originalPortfolioRequirementGrid = $("#PortfolioRequirementGrid").data('kendoGrid').getOptions();

            LoadGridLayout("#PortfolioRequirementGrid");
        }, 5);
    });


    var PortfolioRequirementSelectAll = false;

    function onPortfolioRequirementCheckData(e) {
        CheckGridData("#PortfolioRequirementGrid");

        $("#PortfolioRequirementGrid tbody tr .k-grid-RetransmitOSIEntryCommand").each(function () {
            var currentDataItem = $("#PortfolioRequirementGrid").data("kendoGrid").dataItem($(this).closest("tr"));

            if (currentDataItem.StatusMain != '@Convert.ToInt32(StatusMain.Error)') {
                $(this).remove();
            }
        })
    }

    function onPortfolioRequirementError(e) {
        DisplayError(e);
    }

    function onPortfolioRequirementLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#PortfolioRequirementGrid");
        }, 5);
    }


    function onPortfolioRequirementContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case "Refresh Data":
                onPortfolioRequirementChange();
                break;

            case "Retransmit":
                onPortfolioRequirementRetransmitItem();
                break;

            case 'AutoFit Columns':
                resizeGridColumns("#PortfolioRequirementGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#PortfolioRequirementGrid");

                $("#PortfolioRequirementGrid").data('kendoGrid').setOptions(_originalPortfolioRequirementGrid);
                $('#PortfolioRequirementGrid').data("kendoGrid").dataSource.read();
                break;

            case "Select All":
                onPortfolioRequirementSelectAll(true);
                break;

            case "Unsort":
                UnsortGrid("#PortfolioRequirementGrid");
                break;

            case "Reset Filter":
                ResetFilter("#PortfolioRequirementGrid");
                break;

            case "Export To Excel":
                exportToPortfolioRequirementExcel();
                break;
        }
    }

    function exportToPortfolioRequirementExcel() {
        try {
            KendoGridToCSVConvertor("#PortfolioRequirementGrid", 'PortfolioRequirementGrid', PortfolioRequirementSelectAll);

            PortfolioRequirementSelectAll = false;
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onPortfolioRequirementSelectAll(e) {
        try {
            var boxGrid = $("#PortfolioRequirementGrid").data("kendoGrid");
            boxGrid.select(boxGrid.tbody.find(">tr"));

            PortfolioRequirementSelectAll = true;
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onPortfolioRequirementChange() {
        $('#PortfolioRequirementGrid').data("kendoGrid").dataSource.read();
    }


    function onPortfolioRequirementData() {
        var datepicker = $("#PortfolioRequirementCalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');


        return {
            effectiveDate : value
        }
    }


    function onPortfolioRequirementDefaultLoad() {
        try {
            var UserPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    UserPreference = valid;

                    var dropdownList = $('#PortfolioRequirementDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == UserPreference.DefaultFirm;
                    });

                    $('#PortfolioRequirementGrid').data("kendoGrid").dataSource.read();
                },
                error: function (valid) {
                    UserPreference = null;
                }
            })
        }
        catch (e) { }
    }

    function onPortfolioRequirementRetransmitItem() {

        try {
            var dataItems = [];

            var grid = $('#PortfolioRequirementGrid').data('kendoGrid');
            var rows = grid.select();

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });


            $.ajax({
                url: '/CashSourcing/BankLoan/RetransmitOSIStockMovement',
                type: 'POST',
                data: JSON.stringify({
                    stockMovementList: dataItems
                }),
                contentType: 'application/json;',
                success: function (valid) {
                    $.each(valid, function (i, obj) {
                        $("#PortfolioRequirementGrid").data("kendoGrid").dataSource.pushUpdate(obj);
                    });
                },
                error: function (valid) {

                }
            })
        }
        catch (e) {
            console.log(e);
        }
    }

    $(function () {
        $("#PortfolioRequirementGrid").on("click", ".k-grid-RetransmitOSIEntryCommand", function (e) {
            $("#PortfolioRequirementGrid").data("kendoGrid").clearSelection();
            $(e.currentTarget).closest("tr").addClass('k-state-selected');

            onPortfolioRequirementRetransmitItem();
        });
    });


    function onPortfolioRequirementChange() {
        try {
            var entityGrid = $("#PortfolioRequirementGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            var entityId = '42';
            var effectiveDate = selectedItem["EffectiveDate"];
            var securityNumber = selectedItem["SecurityNumber"];
            var issueId = selectedItem["IssueId"];

            SidePanelUpdate(effectiveDate, entityId, issueId, securityNumber);
        }
        catch(e)
        {

        }
    }

    function onPortfolioRequirementErrorCheckBoxChange() {
        try {
            if ($("#PortfolioRequirementErrorCheckBox").is(':checked')) {

                QuickColumnFilter($("#PortfolioRequirementGrid").data("kendoGrid").dataSource, 'StatusMain', '@Convert.ToInt32(StatusMain.Error)');
                $("#PortfolioRequirementGrid").data("kendoGrid").dataSource.read();
            }
            else {

                QuickColumnFilter($("#PortfolioRequirementGrid").data("kendoGrid").dataSource, 'StatusMain', '');
                $("#PortfolioRequirementGrid").data("kendoGrid").dataSource.read();
            }
        }
        catch (e) {
            console.log(e.message);
        }
    }


    function onPortfolioRequirementBreakReport(e) {

        var datepicker = $("#PortfolioRequirementCalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entityId = $("#PortfolioRequirementDropdownList").data("kendoDropDownList").value();


        window.location = '/CashSourcing/BankLoan/ExportOSIBreakReportToExcel?effectiveDate=' + value + '&entityId=' + entityId;
    }


    function onMarginReqRecalc()
    {
        var _data = $('#PortfolioRequirementGrid').data("kendoGrid").dataSource.data();

        var notionalAmount = 0;
        var marginReqHigh = 0;
        var stdDev = 0;
        $.each(_data, function (i, row) {
            notionalAmount += (row.DeliverableMoney - row.RecieveableMoney);
            marginReqHigh += row.MarginRequirement;

        });



        $("#MarginRequirementRangeLowNumericTextBox").data("kendoNumericTextBox").value(marginReqHigh - (marginReqHigh * (marginReqHigh / notionalAmount)));

        $("#StandardDeviationNumericTextBox").data("kendoNumericTextBox").value(marginReqHigh/notionalAmount);

        $("#NotionalValueNumericTextBox").data("kendoNumericTextBox").value(notionalAmount);


        $("#MarginRequirementRangeHighNumericTextBox").data("kendoNumericTextBox").value(marginReqHigh);
    }


</script>

@(
 Html.Kendo().ToolBar()
        .Name("PortfolioRequirementToolBar")
    .Resizable(true)
    .HtmlAttributes(new { @class = "tBar" })
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("EffectiveDate").ToHtmlString());

        items.Add().Template(Html.Kendo().DatePicker()
                    .Name("PortfolioRequirementCalander")
                    .Format("yyyy-MM-dd")
                    .Value(DateTime.Now)
                    .Events(events => events.Change("onPortfolioRequirementChange")).ToHtmlString());

        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
        items.Add().Template(Html.Kendo().DropDownList()
                    .Name("PortfolioRequirementDropdownList")
                    .HtmlAttributes(new { @class = "Toolbar-Cell" })
                    .Animation(true)
                    .DataTextField("Custodian")
                    .DataValueField("CompanyId")
                    .OptionLabel(LabelHelper.Text("OptionLabel"))
                    .AutoBind(true)
                    .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                    .Events(e => e.Change("onPortfolioRequirementChange").DataBound("onPortfolioRequirementDefaultLoad").Open("onContraEntityAutoCompleteResize"))
                    .DataSource(dataSource => dataSource
                    .Read(read => read
                   .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                    .SelectedIndex(0).ToHtmlString());

        items.Add().Template(Html.Kendo().Button().Name("UploadFile").Content("Upload File").ToHtmlString());
        items.Add().Template(Html.Kendo().Button().Name("ClearGrid").Content("Clear Grid").ToHtmlString());      
    }))


<hr class="hr-white">
<div id="BankLoanDiv" class="grid-div">
    <table style="height:100%">
        <tr style="height:100%">
            <td>
       @(Html.Kendo().Grid<PortfolioRequirementModel>()
       .Name("PortfolioRequirementGrid")
       .HtmlAttributes(new { @class = "grid" })
       .NoRecords()
       .Events(events =>
       {
           events.DataBound("onPortfolioRequirementCheckData");
           events.Change("onPortfolioRequirementChange");
           events.ColumnHide("onPortfolioRequirementLayoutChange");
           events.ColumnShow("onPortfolioRequirementLayoutChange");
           events.ColumnResize("onPortfolioRequirementLayoutChange");
           events.ColumnReorder("onPortfolioRequirementLayoutChange");
       })
       .Selectable(select =>
       {
           select.Enabled(true);
           select.Type(GridSelectionType.Row);
           select.Mode(GridSelectionMode.Multiple);
       })
       .Sortable()
       .Filterable()
       .Resizable(resize => resize.Columns(true))
       .Reorderable(reorder => reorder.Columns(true))
        .ColumnMenu(columnMenu =>
        {
            columnMenu.Filterable(true);
            columnMenu.Columns(true);
            columnMenu.Sortable(true);
        })
       .Columns(cols =>
       {
           cols.Bound(x => x.EffectiveDate).Hidden(true);
           cols.Bound(x => x.IssueId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
           cols.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
           cols.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
           cols.Bound(x => x.Price).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
           cols.Bound(x => x.DeliverableQuantity).GetColumnFormat(ColumnTypeEnum.Position, true, "", "");
           cols.Bound(x => x.DeliverableMoney).GetColumnFormat(ColumnTypeEnum.Money, true, "", "");
           cols.Bound(x => x.ReceiveableQuantity).GetColumnFormat(ColumnTypeEnum.Position, true, "", "");
           cols.Bound(x => x.RecieveableMoney).GetColumnFormat(ColumnTypeEnum.Money, true, "", "");
           cols.Bound(x => x.MarginRequirement).GetColumnFormat(ColumnTypeEnum.Position, true, "", "");
           cols.Bound(x => x.FailChargeAmount).GetColumnFormat(ColumnTypeEnum.Money, true, "", "");
           cols.Bound(x => x.Perecentage).GetColumnFormat(ColumnTypeEnum.Rate, false, "", "");
           cols.Command(x =>
           {
               x.Destroy();
           });
       })
       .Resizable(resize => resize.Columns(true))
       .Scrollable(scroll =>
       {
           scroll.Enabled(true);
           scroll.Virtual(true);
       })
       .DataSource(ds =>
       {
           ds.Ajax()
           .ServerOperation(false)
           .PageSize(50)
           .Events(e => e.Error("onPortfolioRequirementError"))
           .Model(model =>
           {
               model.Id(x => x.IssueId);
           })
           .Aggregates(agg =>
           {
               agg.Add(x => x.DeliverableQuantity).Sum();
               agg.Add(x => x.DeliverableMoney).Sum();
               agg.Add(x => x.ReceiveableQuantity).Sum();
               agg.Add(x => x.RecieveableMoney).Sum();
               agg.Add(x => x.MarginRequirement).Sum();
               agg.Add(x => x.FailChargeAmount).Sum();
           })
           .Destroy(destroy => destroy.Action("DeletePortfolioRequirement", "BankLoan", new { area = "CashSourcing" }))
           .Read(read => read.Action("ReadPortfolioRequirement", "BankLoan", new { area = "CashSourcing" }).Data("onPortfolioRequirementData"));
       }))
         </td>
            <td valign="top">
                <div class="demo-section k-content">
                    <table>
                        <thead>@LabelHelper.Label("Options")</thead>
                        <tr>
                            <td>@LabelHelper.Label("VarianceMethod")</td>
                            <td>
                                @Html.Kendo().RadioButton().Name("ParametricMethod").Label("Parametric").Checked(true)<br/>
                                @Html.Kendo().RadioButton().Name("MonteCarloMethod").Label("Monte Carlo")<br />
                                @Html.Kendo().RadioButton().Name("HistoricalMethod").Label("Historical")<br />
                            </td>
                        </tr>
                        <tr>
                            <td>@LabelHelper.Label("ConfidenceLevel")</td>
                            <td>@Html.Kendo().NumericTextBox().Name("ConfidenceLevelNumericTextBox").Spinners(false).Value(99)</td>
                        </tr>
                        <tr>
                            <td></td>
                        </tr>
                        <tr>
                            <td>@LabelHelper.Label("TimePeriod")</td>
                            <td>@Html.Kendo().NumericTextBox().Name("NumberOfDaysNumericTextBox").Spinners(false).Value(120)</td>
                        </tr>
                        <tr>
                            <td></td>
                        </tr>
                        <tr>
                            <td>@LabelHelper.Label("FailChargePercent")</td>
                            <td>@Html.Kendo().NumericTextBox().Name("FailChargePercentNumericTextBox").Spinners(false).Value(10)</td>
                        </tr>
                        <tr>
                            <td></td>
                        </tr>
                        <tr>
                            <td>@LabelHelper.Label("NotionalValue")</td>
                            <td>@Html.Kendo().NumericTextBox().Name("NotionalValueNumericTextBox").Spinners(false)</td>
                        </tr>
                        <tr>
                            <td></td>
                        </tr>
                        <tr>
                            <td>@LabelHelper.Label("Margin Requirement Range (Low)")</td>
                            <td>@Html.Kendo().NumericTextBox().Name("MarginRequirementRangeLowNumericTextBox").Spinners(false)</td>
                       </tr>
                        <tr>
                            <td></td>
                        </tr>
                        <tr>
                            <td>@LabelHelper.Label("StandardDeviation")</td>
                            <td>@Html.Kendo().NumericTextBox().Name("StandardDeviationNumericTextBox").Spinners(false)</td>
                        </tr>
                        <tr>
                            <td></td>
                        </tr>
                        <tr>
                            <td>@LabelHelper.Label("Margin Requirement Range (High)")</td>
                            <td>@Html.Kendo().NumericTextBox().Name("MarginRequirementRangeHighNumericTextBox").Spinners(false)</td>
                        </tr>
                        <tr>
                            <td>

                            </td>
                            <td>
                                @Html.Kendo().Button().Name("RecalculateButton").Content("Recalculate Data").Events(ev => ev.Click("onMarginReqRecalc"))
                            </td>
                        </tr>
                    </table>
            </div>
            </td>
        </tr>
 </table>
</div>

@(
 Html.Kendo().ContextMenu()
.Name("PortfolioRequirementContextMenu")
        .Target("#PortfolioRequirementGrid")
        .Events(events => events.Select("onPortfolioRequirementContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("Refresh Data").Enabled(true);
        items.Add().Separator(true);
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
        items.Add().Separator(true);
        items.Add().Text("Select All").Enabled(true);
        items.Add().Text("Export To Excel").Enabled(true);
    })
)
