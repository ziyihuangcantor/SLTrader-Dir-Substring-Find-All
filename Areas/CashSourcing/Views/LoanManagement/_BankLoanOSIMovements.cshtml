@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools

@*<style scoped>
    #BankLoanOSIToolBar .k-checkbox-label {
        padding-left: 20px;
        vertical-align: middle;
    }
</style>*@

<script>

    $('#SharedLabelCheckBox').change(function () {
        $("#BankLoanOSIGrid").data("kendoGrid").refresh();
    })

    var _originalBankLoanOSIGrid = null;

    $(document).ready(function () {
        kendo.ui.Grid.fn.options.columnMenuInit = function (e) {
            var menu = e.container.find(".k-menu").data("kendoMenu");
            menu.bind('activate', function (e) {
                if (e.item.is('.k-filter-item')) {
                    // if an element in the submenu is focused first, the issue is not observed
                    e.item.find('span.k-dropdown.k-header').first().focus();
                    // e.item.find('input').first().focus();
                }
            });
        };

        setTimeout(function () {
            _originalBankLoanOSIGrid = $("#BankLoanOSIGrid").data('kendoGrid').getOptions();

            LoadGridLayout("#BankLoanOSIGrid");
        }, 5);
    });


    var bankLoanOSISelectAll = false;

    function onBankLoaOSICheckData(e) {
        CheckGridData("#BankLoanOSIGrid");

        $("#BankLoanOSIGrid tbody tr .k-grid-RetransmitOSIEntryCommand").each(function () {
            var currentDataItem = $("#BankLoanOSIGrid").data("kendoGrid").dataItem($(this).closest("tr"));

            if (currentDataItem.StatusMain != '@Convert.ToInt32(StatusMain.Error)') {
                $(this).remove();
            }
        })
    }

    function onBankLoanPositionError(e) {
        DisplayError(e);
    }

    function onBankLoanOSILayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#BankLoanOSIGrid");
        }, 5);
    }


    function onBankLoanOSIContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case "Refresh Data":
                onBankLoanOSIChange();
                break;

            case "Retransmit":
                onBankLoanOSIRetransmitItem();
                break;

            case 'AutoFit Columns':
                resizeGridColumns("#BankLoanOSIGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#BankLoanOSIGrid");

                $("#BankLoanOSIGrid").data('kendoGrid').setOptions(_originalBankLoanOSIGrid);
                $('#BankLoanOSIGrid').data("kendoGrid").dataSource.read();
                break;

            case "Select All":
                onBankLoanOSISelectAll(true);
                break;

            case "Unsort":
                UnsortGrid("#BankLoanOSIGrid");
                break;

            case "Reset Filter":
                ResetFilter("#BankLoanOSIGrid");
                break;

            case "Export To Excel":
                exportToBankLoanOSIExcel();
                break;
        }
    }

    function exportToBankLoanOSIExcel() {
        try {
            KendoGridToCSVConvertor("#BankLoanOSIGrid", 'BankLoanOSIGrid', bankLoanOSISelectAll);

            bankLoanOSISelectAll = false;
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onBankLoanOSISelectAll(e) {
        try {
            var boxGrid = $("#BankLoanOSIGrid").data("kendoGrid");
            boxGrid.select(boxGrid.tbody.find(">tr"));

            bankLoanOSISelectAll = true;
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onBankLoanOSIChange() {
        $('#BankLoanOSIGrid').data("kendoGrid").dataSource.read();
    }


    function onBankLoanOSIData() {
        var datepicker = $("#BankLoanOSICalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');


        return {
            effectiveDate : value
        }
    }


    function onBankLoanOSIDefaultLoad() {
        try {
            var UserPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    UserPreference = valid;

                    var dropdownList = $('#BankLoanOSIDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == UserPreference.DefaultFirm;
                    });

                    $('#BankLoanOSIGrid').data("kendoGrid").dataSource.read();
                },
                error: function (valid) {
                    UserPreference = null;
                }
            })
        }
        catch (e) { }
    }

    function onBankLoanOSIRetransmitItem() {

        try {
            var dataItems = [];

            var grid = $('#BankLoanOSIGrid').data('kendoGrid');
            var rows = grid.select();

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });


            $.ajax({
                url: '/CashSourcing/BankLoan/RetransmitOSIStockMovement',
                type: 'POST',
                data: JSON.stringify({
                    stockMovementList: dataItems
                }),
                contentType: 'application/json;',
                success: function (valid) {
                    $.each(valid, function (i, obj) {
                        $("#BankLoanOSIGrid").data("kendoGrid").dataSource.pushUpdate(obj);
                    });
                },
                error: function (valid) {
                  
                }
            })
        }
        catch (e) {
            console.log(e);
        }
    }

    $(function () {
        $("#BankLoanOSIGrid").on("click", ".k-grid-RetransmitOSIEntryCommand", function (e) {
            $("#BankLoanOSIGrid").data("kendoGrid").clearSelection();
            $(e.currentTarget).closest("tr").addClass('k-state-selected');

            onBankLoanOSIRetransmitItem();
        });
    });

    function onBankLoanOSIErrorCheckBoxChange() {
        try {
            if ($("#BankLoanOSIErrorCheckBox").is(':checked')) {

                QuickColumnFilter($("#BankLoanOSIGrid").data("kendoGrid").dataSource, 'StatusMain', '@Convert.ToInt32(StatusMain.Error)');
                $("#BankLoanOSIGrid").data("kendoGrid").dataSource.read();
            }
            else {

                QuickColumnFilter($("#BankLoanOSIGrid").data("kendoGrid").dataSource, 'StatusMain', '');
                $("#BankLoanOSIGrid").data("kendoGrid").dataSource.read();
            }
        }
        catch (e) {
            console.log(e.message);
        }
    }


    function onBankLoanOSIBreakReport(e) {

        var datepicker = $("#BankLoanOSICalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entityId = $("#BankLoanOSIDropdownList").data("kendoDropDownList").value();


        window.location = '/CashSourcing/BankLoan/ExportOSIBreakReportToExcel?effectiveDate=' + value + '&entityId=' + entityId;
    }



</script>       

@(
 Html.Kendo().ToolBar()
        .Name("BankLoanOSIToolBar")
    .Resizable(true)
    .HtmlAttributes(new { @class = "tBar" })
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("EffectiveDate").ToHtmlString());

        items.Add().Template(Html.Kendo().DatePicker()
                    .Name("BankLoanOSICalander")
                    .Format("yyyy-MM-dd")
                    .Value(DateTime.Now)
                    .Events(events => events.Change("onBankLoanOSIChange")).ToHtmlString());

        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
        items.Add().Template(Html.Kendo().DropDownList()
                    .Name("BankLoanOSIDropdownList")
                    .HtmlAttributes(new { @class = "Toolbar-Cell" })
                    .Animation(true)
                    .DataTextField("Custodian")
                    .DataValueField("CompanyId")
                    .OptionLabel(LabelHelper.Text("OptionLabel"))
                    .AutoBind(true)
                    .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                    .Events(e => e.Change("onBankLoanOSIChange").DataBound("onBankLoanOSIDefaultLoad").Open("onContraEntityAutoCompleteResize"))
                    .DataSource(dataSource => dataSource
                    .Read(read => read
                   .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                    .SelectedIndex(0).ToHtmlString());

        items.Add().Template(Html.Kendo().Button().Name("BankLoanOSIRefreshButton").Content("<i class='fa fa-refresh fa-1x'></i>").Events(ev => ev.Click("onBankLoanOSIChange")).ToHtmlString());


        items.Add().Template(Html.Kendo().Button().Name("BankLoanOSIBreakReportButton").Content("<i class='fa fa-chain-broken'></i> Breaks").Events(ev => ev.Click("onBankLoanOSIBreakReport")).ToHtmlString());

        items.Add().Template(Html.Kendo().CheckBox()
                .Name("BankLoanOSIError")
                .Checked(false)
                .Label(LabelHelper.Text("BankLoanOSIError"))
                .HtmlAttributes(new { id = "BankLoanOSIErrorCheckBox", onclick = "onBankLoanOSIErrorCheckBoxChange()" }).ToHtmlString());


    }))


<hr class="hr-white">
<div id="BankLoanDiv" class="grid-div">
 @(Html.Kendo().Grid<SL_OSIStockMovement>()
       .Name( "BankLoanOSIGrid" )
       .HtmlAttributes( new { @class = "grid" } )
       .NoRecords()
       .Events( events =>
       {
           events.DataBound("onBankLoaOSICheckData");
           events.ColumnHide( "onBankLoanOSILayoutChange" );
           events.ColumnShow( "onBankLoanOSILayoutChange" );
           events.ColumnResize( "onBankLoanOSILayoutChange" );
           events.ColumnReorder( "onBankLoanOSILayoutChange" );
       } )
       .Selectable(select =>
       {
           select.Enabled( true );
           select.Type( GridSelectionType.Row );
           select.Mode( GridSelectionMode.Multiple );
       })
       .Sortable()
       .Filterable()
       .Resizable(resize => resize.Columns(true))
       .Reorderable(reorder => reorder.Columns(true))
        .ColumnMenu( columnMenu =>
        {
            columnMenu.Filterable( true );
            columnMenu.Columns( true );
            columnMenu.Sortable( true );
        } )
       .Columns( cols =>
       {
           cols.Bound( x => x.SLOSIStockMovement ).Hidden( true );
           cols.Bound( x => x.FirmNumber ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
           cols.Bound( x => x.SecurityNumber ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
           cols.Bound(x => x.AccountNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
           cols.Bound(x => x.FromLocCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
           cols.Bound( x => x.ToLocCode ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
           cols.Bound( x => x.Quantity ).GetColumnFormat( ColumnTypeEnum.Position, true, "", "" );
           cols.Bound( x => x.SecInternational ).GetColumnFormat( ColumnTypeEnum.String, true, "", "" );
           cols.Bound(x => x.StatusMain).GetColumnFormat(ColumnTypeEnum.String, true, "", "");
           cols.Command(x =>
           {
               x.Custom("RetransmitOSIEntryCommand").Text(LabelHelper.Text("Retransmit"));
           });
           cols.Bound( x => x.MemoInfo ).GetColumnFormat( ColumnTypeEnum.String, true, "", "" );
       } )
       .Resizable(resize => resize.Columns(true))
       .Scrollable( scroll =>
       {
           scroll.Enabled( true );
           scroll.Virtual( true );
       } )
       .DataSource(ds =>
       {
           ds.Ajax()
           .ServerOperation(false)
           .Events(e => e.Error("onBankLoanPositionError"))
           .Model(model =>
           {
               model.Id(x => x.SLOSIStockMovement);
           })
           .Aggregates(agg =>
           {
               agg.Add( x => x.Quantity ).Sum();
           })
           .Read(read => read.Action("ReadOSIMovements", "BankLoan", new { area = "CashSourcing" }).Data("onBankLoanOSIData"));
       }))

</div>

@(
 Html.Kendo().ContextMenu()
.Name( "BankLoanOSIContextMenu" )
        .Target("#BankLoanOSIGrid")
        .Events( events => events.Select( "onBankLoanOSIContextMenuSelect" ) )
    .Items( items =>
    {
        items.Add().Text("Retransmit").Enabled(true);
        items.Add().Separator(true);
        items.Add().Text("Refresh Data").Enabled(true);
        items.Add().Separator(true);
        items.Add().Text( "AutoFit Columns" );
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text( "Reset Grid" ).Enabled( true );
        items.Add().Separator(true);
        items.Add().Text("Select All").Enabled(true);
        items.Add().Text("Export To Excel").Enabled(true);
    })
)
