@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools
<style scoped>   
    #ScheduleSplitter {
        height: 100%;
    }
</style>


<script type="text/javascript">
    $('#SharedLabelCheckBox').change(function () {
        RefreshGrid("#ScheduleListGrid");
        RefreshGrid("#ScheduleGrid");
    });

    var _originalScheduleGrid = null;

    $(document).ready(function () {
        setTimeout(function () {
            _originalScheduleGrid = $('#ScheduleGrid').data('kendoGrid').getOptions();

            LoadGridLayout("#ScheduleGrid");
        }, 5);
    });

    function onScheduleGridLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#ScheduleGrid");
        }, 5);
    }

    function onScheduleListData() {
        var entityId = $("#ScheduleDropdownList").data("kendoDropDownList").value();

        return {            
            entityId: entityId,
        }
    }

    function onScheduleData(e) {
        var entityId = "";
        var name = -"";

        var entityGrid = $("#ScheduleListGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        entityId = selectedItem["EntityId"];
        name = selectedItem["Name"];

        return {
            entityId: entityId,
            name: name
        }
    }

    function onScheduleDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function(valid) {
                    userPreference = valid;

                    var dropdownList = $('#ScheduleDropdownList').data("kendoDropDownList");

                    dropdownList.select(function(dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $('#ScheduleListGrid').data("kendoGrid").dataSource.read();
                },
                error: function() {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onScheduleListRowChange() {
        $("#ScheduleGrid").data("kendoGrid").dataSource.read();
    }

    function onScheduleChange() {
        $("#ScheduleListGrid").data("kendoGrid").dataSource.read();
    }

    function onScheduleListError(e) {
        DisplayControllerError(e);
    }

    function onScheduleError(e) {
        DisplayControllerError(e);
    }

    function onScheduleListEdit(e) {
        var input = e.container.find("input");
        setTimeout(function () { input.select(); });

        if (e.model.isNew() && !e.model.dirty) {
            var update = $(e.container).parent().find(".k-grid-update");
            $(update).html('<span class="k-icon k-update"></span>Add');
        }
    }

</script>

@(
 Html.Kendo().ToolBar()
    .Name("ScheduleToolBar")
    .Resizable(true)
    .HtmlAttributes(new { @class = "tBar" })
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());

        items.Add().Template(Html.Kendo().DropDownList()
    .Name("ScheduleDropdownList")
                            .HtmlAttributes(new { @class = "width90" }) 
    .Animation(true)
    .DataTextField("Custodian")
    .DataValueField("CompanyId")
    .OptionLabel("Empty List")
    .AutoBind(true)
    .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
    .Events(events => events.Change("onScheduleChange").DataBound("onScheduleDefaultLoad").Open("onContraEntityAutoCompleteResize"))
    .DataSource(dataSource => dataSource
    .Read(read => read
    .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
    .SelectedIndex(0).ToHtmlString());

    }))

<hr class="hr-white">
<div id="ScheduleListContent" class="grid-div">
    @(Html.Kendo().Splitter()
                  .Name( "ScheduleSplitter" )
          .Orientation(SplitterOrientation.Vertical)
          .Panes(panes =>
          {
              panes.Add()
                  .Collapsible(false)
                  .Scrollable(false)
                  .Size("40%")
                  .Content(@<text>
                               @(Html.Kendo().Grid<Sl_ScheduleList>()
                                     .Name("ScheduleListGrid")
                                     .Editable(editable =>
                                     {
                                         editable.Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLAutoBorrow));
                                         editable.Mode(GridEditMode.InLine);
                                         editable.DisplayDeleteConfirmation(false);
                                         editable.CreateAt(GridInsertRowPosition.Bottom);
                                     })                                     
                                     .Navigatable()
                                     .HtmlAttributes(new {@class = "grid"})
                                     .Scrollable()
                                     .Columns(columns =>
                                     {
                                         columns.Bound(x => x.SLScheduleList).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                         columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                         columns.Bound(x => x.Name);                                         
                                     })
                                     .Events(events => events.Change("onScheduleListRowChange"))
                                     .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Row))
                                     .DataSource(ds => ds.Ajax()
                                         .ServerOperation(false)
                                         .Model(model =>
                                         {
                                             model.Id( x => x.SLScheduleList );
                                             model.Field(x => x.EntityId).Editable(false);
                                             model.Field(x => x.Name).Editable(true);
                                         })
                                         .Events(events => events.Error("onScheduleListError"))
                                                         .Read( read => read.Action( "Read_ScheduleLists", "Schedule", new { area = "CashSourcing" } ).Data( "onScheduleListData" ) ) ))
                            </text>);

              panes.Add()
                  .Collapsible(false)
                  .Scrollable(false)
                  .Size("60%")
                  .Content(@<text>
                               @(Html.Kendo().Grid<SL_Schedule>()
                                     .Name("ScheduleGrid")
                                     .Resizable(resize => resize.Columns(false))
                                     .Scrollable()
                                     .HtmlAttributes(new {@class = "grid"})
                                     .AutoBind(false)
                                     .Selectable(select =>
                                     {
                                         select.Enabled(true);
                                         select.Mode(GridSelectionMode.Multiple);
                                         select.Type(GridSelectionType.Row);
                                     })
                                     .Editable(edit =>
                                     {
                                         edit.Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLAutoBorrow));
                                         edit.Mode(GridEditMode.InLine);
                                         edit.DisplayDeleteConfirmation(false);
                                     })                                     
                                     .Events(events =>
                                     {                                         
                                         events.ColumnHide("onScheduleGridLayoutChange");
                                         events.ColumnShow("onScheduleGridLayoutChange");
                                         events.ColumnResize("onScheduleGridLayoutChange");
                                         events.ColumnReorder("onScheduleGridLayoutChange");
                                     })
                                     .ColumnMenu(columnMenu =>
                                     {
                                         columnMenu.Filterable(true);
                                         columnMenu.Columns(true);
                                         columnMenu.Sortable(true);
                                     })
                                     .Reorderable(reorder =>
                                     {
                                         reorder.Columns(true);
                                     })
                                     .Columns(columns =>
                                     {
                                         columns.Bound(x => x.SLSchedule).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                         columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                         columns.Bound(x => x.Name).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);                                      
                                         columns.Bound(x => x.Classification).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                         columns.Bound( x => x.Expression ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
                                         columns.Bound( x => x.Margin ).GetColumnFormat( ColumnTypeEnum.Money, false, "", "" );                                        
                                     })
                                     .DataSource(dataSource => dataSource
                                         .Ajax()
                                         .ServerOperation(false)
                                         .Events(events => events.Error("onScheduleError"))
                                                 .Read( read => read.Action( "Read_Schedules", "Schedule", new { area = "CashSourcing" } ).Data( "onScheduleData" ) )                                                                                                         
                                         .Model(model =>
                                         {
                                             model.Id(x => x.SLSchedule);
                                             model.Field(x => x.EntityId);
                                             model.Field(x => x.Name).Editable(false);
                                         })
                                     )
                                     .Sortable())
                            </text>);
    }))

</div>
