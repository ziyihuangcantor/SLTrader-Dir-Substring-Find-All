@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools


@model   IEnumerable<BankLoanPledgeModel>



@*<style scoped>
    #BankLoanPLedgeTable {
        border-collapse: collapse;
        width: 100%;
        max-width: 700px;
    }

        #BankLoanPLedgeTable th,
        #BankLoanPLedgeTable td {
            min-height: 50px;
            padding: 5px 0px 0px 5px;
        }
</style>*@



<script>
    function onPledgeBankData(e) {
        var entity = $("#SecMasterDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity
        }
    }

    function onPlegdeBankLoanData(e) {
        var entity = $("#SecMasterDropdownList").data("kendoDropDownList").value();
        var bankId = $("#BankPledgeDropDownList").data("kendoDropDownList").value();

        return {
            entityId: entity,
            bankId: bankId
        }
    }

    function onLocalError(e) {
        console.log(e);
    }

    function onSubmitBankLoanPledge() {
        var entityId = $("#SecMasterDropdownList").data("kendoDropDownList").value();
        var bankId = $("#BankPledgeDropDownList").data("kendoDropDownList").value();
        var bankLoan = kendo.toString(kendo.parseDate($("#BankLoanPledgeDropDownList").data("kendoDropDownList").value()), 'MM/dd/yyyy');
        var securityHypothication = $("#BankLoanSecurityHypothicationDropDownList").data("kendoDropDownList").value();
        var pledgePurpose = $("#BankLoanSecurityHypothicationDropDownList").data("kendoDropDownList").value();
        var moneyType = $("#BankLoanPLedgeMoneyTypeDropDownList").data("kendoDropDownList").value();

        var dataItems = [];

        dataItems = getDataItems('#BankLoanPledgeGrid',
               true,
               '@DataSystemValues.LoadSystemValue("AutoBorrowMaxItems","1000")');

        $("#BankLoanPledgeSubmitButton").data("kendoButton").enable(false);
        $('#BankLoanPledgeStatusLabel').html('<i class="fa fa-spinner fa-spin"></i> Processing ' + dataItems.length + ' items.');


        try {
            $.ajax({
                url: '/CashSourcing/BankLoan/ProcessBankLoanPledge',
                type: 'POST',
                data: JSON.stringify({
                    entityId: entityId,
                    securityHypothication: securityHypothication,
                    pledgePurpose:pledgePurpose,
                    loanDate:bankLoan,
                    bankId : bankId,
                    moneyType : moneyType,
                    items: dataItems
                }),
                contentType: 'application/json;',
                success: function (valid) {
                    $("#BankLoanPledgeGrid").data("kendoGrid").dataSource.data(valid);
                    $("#BankLoanPledgeGrid").data("kendoGrid").refresh();

                    $('#BankLoanPledgeStatusLabel').html('Processed ' + (dataItems.length - valid.length) + ' out of ' + dataItems.length + ' items.');

                    
                    $("#BankLoanPledgeSubmitButton").data("kendoButton").enable(true);

                    if ((dataItems.length - valid.length) == dataItems.length)
                    {
                        $('#LocalDetailWindow').data("kendoWindow").close();
                    }
                },
                error: function(valid) {
                    $("#BankLoanPledgeSubmitButton").data("kendoButton").enable(true);
                }
            });
        } catch (e) {
            console.log(e);
        }
    }

    function onBankLoanPledgeSelect(e) {
        if (($("#BankPledgeDropDownList").data("kendoDropDownList").text() == "@LabelHelper.Text("OptionLabel")") ||
            ($("#BankLoanPledgeDropDownList").data("kendoDropDownList").text() == "@LabelHelper.Text("OptionLabel")") ||
            ($("#BankLoanSecurityHypothicationDropDownList").data("kendoDropDownList").text() == "@LabelHelper.Text("OptionLabel")") ||
            ($("#BankLoanSecurityHypothicationDropDownList").data("kendoDropDownList").text() == "@LabelHelper.Text("OptionLabel")") ||
            ($("#BankLoanPLedgeMoneyTypeDropDownList").data("kendoDropDownList").text() == "@LabelHelper.Text("OptionLabel")")) {

            $("#BankLoanPledgeSubmitButton").data("kendoButton").enable(false);
        }
        else {
            $("#BankLoanPledgeSubmitButton").data("kendoButton").enable(true);
        }
    }

    $(document).ready(function () {
        kendo.ui.Grid.fn.options.columnMenuInit = function (e) {
            var menu = e.container.find(".k-menu").data("kendoMenu");
            menu.bind('activate', function (e) {
                if (e.item.is('.k-filter-item')) {
                    // if an element in the submenu is focused first, the issue is not observed
                    e.item.find('span.k-dropdown.k-header').first().focus();
                    // e.item.find('input').first().focus();
                }
            });
        };
    });
</script>


<table id="BankLoanPLedgeTable">
    <tr>
        <td align="left" width="200px">
            @LabelHelper.Label( "Bank" )
        </td>
        <td align="left">
            @(Html.Kendo().DropDownList()
     .Name( "BankPledgeDropDownList" )
      .DataValueField( "SLBank" )
      .DataTextField( "Bank" )
      .OptionLabel( LabelHelper.Text( "OptionLabel" ) )
      .Events( events => events.Change( "onBankLoanPledgeSelect" ) )
      .Template( "<span class=\"k-state-default\">#:data.Bank# #:data.Name# </span>" )
      .SelectedIndex(1)
     .DataSource( ds =>
     {
         ds.Read( x => x.Action( "Read_BanksDropdown", "BankLoan", new { area = "CashSourcing" } ).Data( "onPledgeBankData" ) );
     } ))
        </td>
    </tr>
    <tr>
        <td align="left" width="200px">
            @LabelHelper.Label( "BankLoan" )
        </td>
        <td align="left">
            @(Html.Kendo().DropDownList()
                .Name( "BankLoanPledgeDropDownList" )
                .CascadeFrom( "BankPledgeDropDownList" )
                .DataValueField( "LoanDate" )
                .DataTextField( "LoanDate" )
              .Events( events => events.Change( "onBankLoanPledgeSelect" ) )
                 .OptionLabel( LabelHelper.Text( "OptionLabel" ) )
                 .Enable( false )
                 .AutoBind( false )
                 .ValueTemplate("#:kendo.toString(kendo.parseDate(data.LoanDate), 'MM/dd/yyyy')  #")
                .Template( "#:kendo.toString(kendo.parseDate(data.LoanDate), 'MM/dd/yyyy')  #")
                .SelectedIndex(1)
                .DataSource( ds =>
                {
                    ds.Events( x => x.Error( "onLocalError" ) );
                    ds.ServerFiltering( true );
                    ds.Read( x => x.Action( "Read_BankLoansDropdown", "BankLoan", new { area = "CashSourcing" } ).Data( "onPlegdeBankLoanData" ) );
                } ))
        </td>
    </tr>
    <tr>
        <td align="left" width="200px">
            @LabelHelper.Label( "PledgeMoneyType" )
        </td>
        <td align="left">
            @(Html.Kendo().DropDownList()
                .Name( "BankLoanPLedgeMoneyTypeDropDownList" )
                .CascadeFrom( "BankPledgeDropDownList" )
                .DataValueField( "Value" )
                .DataTextField( "Text" )
              .Events( events => events.Change( "onBankLoanPledgeSelect" ) )
                 .OptionLabel( LabelHelper.Text( "OptionLabel" ) )
                 .SelectedIndex(1)
                 .Enable( false )
                 .AutoBind( false )
                .Template( "<span class=\"k-state-default\"> #:data.Text #  #:data.Description# </span>" )
                .DataSource( ds =>
                {
                    ds.Events( x => x.Error( "onLocalError" ) );
                    ds.ServerFiltering( true );
                    ds.Read( x => x.Action( "Read_BankLoanMoneyTypeEnum", "Enum", new { area = "DomesticTrading" } ) );
                } ))
        </td>
    </tr>
    <tr>
        <td align="left" width="200px">
            @LabelHelper.Label( "SecurityHypothication" )
        </td>
        <td align="left">
            @(Html.Kendo().DropDownList()
                .Name( "BankLoanSecurityHypothicationDropDownList" )
                .CascadeFrom( "BankPledgeDropDownList" )
                .DataValueField( "Value" )
                .DataTextField( "Text" )
              .Events( events => events.Change( "onBankLoanPledgeSelect" ) )
                 .OptionLabel( LabelHelper.Text( "OptionLabel" ) )
                 .SelectedIndex(1)
                 .Enable( false )
                 .AutoBind( false )
                .Template( "<span class=\"k-state-default\"> #:data.Text #  #:data.Description# </span>" )
                .DataSource( ds =>
                {
                    ds.Events( x => x.Error( "onLocalError" ) );
                    ds.ServerFiltering( true );
                    ds.Read( x => x.Action( "Read_BankLoanSecurityHypothicationDropdown", "BankLoan", new { area = "CashSourcing" } ) );
                } ))
        </td>
    </tr>
    <tr>
        <td align="left" width="200px">
            @LabelHelper.Label( "PledgePurpose" )
        </td>
        <td align="left">
            @(Html.Kendo().DropDownList()
                .Name( "BankLoanPledgePurgeDropDownList" )
                .CascadeFrom( "BankPledgeDropDownList" )
                .DataValueField( "Value" )
                .DataTextField( "Text" )
                .SelectedIndex(1)
              .Events( events => events.Change( "onBankLoanPledgeSelect" ) )
                 .OptionLabel( LabelHelper.Text( "OptionLabel" ) )
                 .Enable( false )
                 .AutoBind( false )
                .Template( "<span class=\"k-state-default\"> #:data.Text #  #:data.Description# </span>" )
                .DataSource( ds =>
                {
                    ds.Events( x => x.Error( "onLocalError" ) );
                    ds.ServerFiltering( true );
                    ds.Read( x => x.Action( "Read_BankLoanPLedgePurposeDropdown", "BankLoan", new { area = "CashSourcing" } ) );
                } ))
        </td>
    </tr>
    <tr>
        <td colspan="2">
            @(
 Html.Kendo().Grid( Model )
    .Name( "BankLoanPledgeGrid" )
    .NoRecords()
    .Editable( edit =>
    {
        edit.DisplayDeleteConfirmation( false );
        edit.Enabled( true );
        edit.Mode( GridEditMode.InLine );
    } )
    .Scrollable( scroll =>
    {
        scroll.Enabled( true ).Virtual( true );
    } )
    .Selectable( select =>
    {
        select.Enabled( true ).Mode( GridSelectionMode.Multiple );
    } )
    .Columns( columns =>
    {
        columns.Bound( x => x.EntityId ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
        columns.Bound( x => x.Issue ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
        columns.Bound( x => x.SecurityNumber ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.Ticker ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Bound( x => x.Price ).GetColumnFormat( ColumnTypeEnum.Money, false, "", "DecimalNumber" );
        columns.Bound( x => x.PledgeQuantity ).GetColumnFormat( ColumnTypeEnum.Position, true, "", "QuantityDecimalNumber" );
        columns.Bound( x => x.PledgeAmount ).GetColumnFormat( ColumnTypeEnum.Money, true, "", "" );
        columns.Bound( x => x.MemoInfo ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
        columns.Command( x =>
        {
            x.Edit();
            x.Destroy();
        } );
    } )
    .DataSource( ds =>
    {
        ds.Ajax()
        .ServerOperation( false )
        .Model( x =>
        {
            x.Id( q => q.Issue );
            x.Field( q => q.SecurityNumber ).Editable( false );
            x.Field( q => q.Ticker ).Editable( false );
            x.Field( q => q.MemoInfo ).Editable( false );
            x.Field( q => q.PledgeAmount ).Editable( false );
        } )
        .Aggregates( q =>
        {
            q.Add( x => x.PledgeQuantity ).Sum();
            q.Add( x => x.PledgeAmount ).Sum();
        } )
        .Update( update => update.Action( "UpdateBankLoanPledgeModel", "BankLoan", new { area = "CashSourcing" } ) )
        .Destroy( destroy => destroy.Action( "DeleteBankLoanPledgeModel", "BankLoan", new { area = "CashSourcing" } ) );
    } ))
        </td>
    </tr>
    <tr>
        <td colspan="2" align="right">
            <label id="BankLoanPledgeStatusLabel"></label>
        </td>
    </tr>
    <tr>
        <td colspan="2" align="right">
            @Html.Kendo().Button().Name( "BankLoanPledgeSubmitButton" ).Content( LabelHelper.Text( "BankLoanPledgeSubmit" ) ).Events( ev => ev.Click( "onSubmitBankLoanPledge" ) ).Enable( false )
        </td>
    </tr>
</table>