@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools

<script>
    $('#SharedLabelCheckBox').change(function () {
        $("#BankGrid").data("kendoGrid").refresh();
        $("#BankLoanActivityGrid").data("kendoGrid").refresh();
        $("#BankLoanGrid").data("kendoGrid").refresh();
    })
 
    var _originalBankGrid = null;
    var _originalBankLoanGrid = null;
    var _originalBankLoanActivityGrid = null;

    var _originalBankGridToolBar = null;
    var _originalBankLoanGridToolBar = null;
    var _originalBankLoanActivityGridToolBar = null;


    $(document).ready(function () {
        kendo.ui.Grid.fn.options.columnMenuInit = function (e) {
            var menu = e.container.find(".k-menu").data("kendoMenu");
            menu.bind('activate', function (e) {
                if (e.item.is('.k-filter-item')) {
                    // if an element in the submenu is focused first, the issue is not observed
                    e.item.find('span.k-dropdown.k-header').first().focus();
                    // e.item.find('input').first().focus();
                }
            });
        };

        setTimeout(function () {

            _originalBankGrid = $("#BankGrid").data('kendoGrid').getOptions();
            _originalBankLoanGrid = $("#BankLoanGrid").data('kendoGrid').getOptions();
            _originalBankLoanActivityGrid = $("#BankLoanActivityGrid").data('kendoGrid').getOptions();

            _originalBankGridToolBar = $("#BankGrid .k-grid-toolbar").html();
            _originalBankLoanGridToolBar = $("#BankLoanGrid .k-grid-toolbar").html();
            _originalBankLoanActivityGridToolBar = $("#BankLoanActivityGrid .k-grid-toolbar").html();

            LoadGridLayout("#BankGrid");
            LoadGridLayout("#BankLoanGrid");
            LoadGridLayout("#BankLoanActivityGrid");

            $("#BankGrid .k-grid-toolbar").html(_originalBankGridToolBar);
            $("#BankGrid .k-grid-toolbar").addClass("k-grid-top");

            $("#BankLoanGrid .k-grid-toolbar").html(_originalBankLoanGridToolBar);
            $("#BankLoanGrid .k-grid-toolbar").addClass("k-grid-top");

            $("#BankLoanActivityGrid .k-grid-toolbar").html(_originalBankLoanActivityGridToolBar);
            $("#BankLoanActivityGrid .k-grid-toolbar").addClass("k-grid-top");
        }, 5);
    });


    function onBankLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#BankGrid");
        }, 5);
    }


    function onBankLoanLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#BankLoanGrid");
        }, 5);
    }


    function onBankLoanActivityLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#BankLoanActivityGrid");
        }, 5);
    }

    function onBankLoanDefaultLoad() {
        try {
            var UserPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    UserPreference = valid;

                    var dropdownList = $('#BankLoanDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == UserPreference.DefaultFirm;
                    });

                    $('#BankGrid').data("kendoGrid").dataSource.read();
                },
                error: function (valid) {
                    UserPreference = null;
                }
            })
        }
        catch (e) { }
    }

    function onCashSourcingBankLoanActivityData() {        
        var entityGrid = $("#BankLoanGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        var entityId = selectedItem["EntityId"]
        var loanDate = selectedItem["LoanDate"];
        var bankId = selectedItem["BankId"];

        var datepicker = $("#BankLoanCalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');


        return {
            effectiveDate: value,
            entityId: entityId,
            bankId: bankId,
            loanDate: loanDate
        }
    }

    function onCashSourcingBankLoanData() {
        var entityGrid = $("#BankGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        var entityId = selectedItem["EntityId"]
        var bankId = selectedItem["SLBank"];

        var datepicker = $("#BankLoanCalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        return {
            entityId: entityId,
            bankId: bankId,
            effectiveDate: value
        }
    }

    function onBankLoanChange() {
        $('#BankGrid').data('kendoGrid').dataSource.read();
    }

    function onBankLoanCreateData() {
        var entityGrid = $("#BankGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        var entityId = selectedItem["EntityId"]
        var bankId = selectedItem["SLBank"];

        return {
            entityId: entityId,
            bankId: bankId,
            name: ''
        };

    }

    function onCashSourcingBankData() {
        var entity = $("#BankLoanDropdownList").data("kendoDropDownList");

        return {
            entityId: entity.value(),
        };
    }

    function onBankLoanError(e) {
        DisplayError(e);
    }

    function onBankRowChange(e) {
        $('#BankLoanGrid').data('kendoGrid').dataSource.read();
    }

    function onBankLoanRowChange(e) {
        try {
            $('#BankLoanActivityGrid').data('kendoGrid').dataSource.read();
        }
        catch (e) { }
    }

    function onBankLoanPositionData(e) {
        if (e) {
            try {
                var entity = $("#BankLoanDropdownList").data("kendoDropDownList");

                var datepicker = $("#BankLoanCalander").data("kendoDatePicker");
                var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

                HelperPartialWindow(
                    JSON.stringify({
                        entityId: entity.value(),
                        effectiveDate: value
                    }),
                    'BankLoan Positions',
                    1100,
                    450,
                    '/CashSourcing/BankLoan/BankLoanPositionsPartial'
                    );
            }
            catch (e) {
                console.log(e.message);
            }
        }
    }

    function onBankCreateData(e) {
        var entityId = $("#BankLoanDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entityId,
        }
    }

    $(function () {
        $('#BankGrid').on('click', '.enabledBankIsOCCChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#BankGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('Enabled', checked);
            grid.dataSource.sync();
        });
          
        $("#BankLoanGrid").on("click", ".k-grid-BookKeepingCommand", function (e) {
            $("#BankLoanGrid").data("kendoGrid").clearSelection();
            $(e.currentTarget).closest("tr").addClass('k-state-selected');

            onViewBookKeeping();
        });
    });


    function onViewBookKeeping(e) {
        var entityGrid = $("#BankLoanGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        if (selectedItem != null) {
            HelperPartialWindow(
                JSON.stringify({
                    bankLoanId: selectedItem['SLBankLoan']
                }),
                'BookKeeping',
                1100,
                450,
                '/CashSourcing/BankLoan/ReadBankLoanBookKeeping'
            );
        }
    }

    function onBankLoanContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#BankLoanGrid");
                break;

            case "Reset Filter":
                ResetFilter("#BankLoanGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#BankLoanGrid");

                $("#BankLoanGrid").data('kendoGrid').setOptions(_originalBankLoanGrid);
                $("#BankLoanGrid .k-grid-toolbar").html(_originalBankLoanGridToolBar);
                $("#BankLoanGrid .k-grid-toolbar").addClass("k-grid-top");
                
                $('#BankLoanGrid').data("kendoGrid").dataSource.read();
                break;

            case "Unsort":
                UnsortGrid("#BankLoanGrid");
                break;
        }
    }

    function onBankContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#BankGrid");
                break;

            case "Reset Filter":
                ResetFilter("#BankGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#BankGrid");

                $("#BankGrid").data('kendoGrid').setOptions(_originalBankGrid);
                $("#BankGrid .k-grid-toolbar").html(_originalBankGridToolBar);
                $("#BankGrid .k-grid-toolbar").addClass("k-grid-top");

                $('#BankGrid').data("kendoGrid").dataSource.read();
                break;

            case "Unsort":
                UnsortGrid("#BankGrid");
                break;
        }
    }


    function onBankLoanActivityContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#BankLoanActivityGrid");
                break;

            case "Reset Filter":
                ResetFilter("#BankLoanActivityGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#BankLoanActivityGrid");

                $("#BankLoanActivityGrid").data('kendoGrid').setOptions(_originalBankLoanActivityGrid);
                $("#BankLoanActivityGrid .k-grid-toolbar").html(_originalBankLoanActivityGridToolBar);
                $("#BankLoanActivityGrid .k-grid-toolbar").addClass("k-grid-top");
                $('#BankLoanActivityGrid').data("kendoGrid").dataSource.read();
                break;

            case "Unsort":
                UnsortGrid("#BankLoanActivityGrid");
                break;
        }
    }

    function onBankLoanCheckData(e)
    {
        CheckGridData("#BankLoanGrid");
    }
</script>

@(
 Html.Kendo().ToolBar()
        .Name("BankLoanToolBar")
    .Resizable(true)
    .HtmlAttributes(new { @class = "tBar" })
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("EffectiveDate").ToHtmlString());

        items.Add().Template(Html.Kendo().DatePicker()
                    .Name("BankLoanCalander")
                    .Format("yyyy-MM-dd")
                    .Value(DateTime.Now)
                    .Events(events => events.Change("onBankLoanChange")).ToHtmlString());

        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
        items.Add().Template(Html.Kendo().DropDownList()
                    .Name("BankLoanDropdownList")
                    .HtmlAttributes(new { @class = "Toolbar-Cell" })
                    .Animation(true)
                    .DataTextField("Custodian")
                    .DataValueField("CompanyId")
                    .OptionLabel(LabelHelper.Text("OptionLabel"))
                    .AutoBind(true)
                    .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                    .Events(e => e.Change("onBankLoanChange").DataBound("onBankLoanDefaultLoad").Open("onContraEntityAutoCompleteResize"))
                    .DataSource(dataSource => dataSource
                    .Read(read => read
                   .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                    .SelectedIndex(0).ToHtmlString());
    }))

<hr class="hr-white">

<div id="BankLoanDiv" class="grid-div">
    @(Html.Kendo().Splitter()
        .Name("BankLoanTotalSplitter")
        .Orientation(SplitterOrientation.Vertical)
        .HtmlAttributes(new { @class = "grid" })
        .Panes(panes =>
        {
        panes.Add()
        .Scrollable(false)
        .Content(
        @<text>
    @(Html.Kendo().Splitter()
                                .Name("BankLoanTopSplitter")
                                .Orientation(SplitterOrientation.Horizontal)
                                .HtmlAttributes(new { @class = "grid" })
                                .Panes(childPanes =>
                                {
                                    childPanes.Add()
                                         .Scrollable(false)
                                         .Content(
                                           (Html.Kendo().Grid<SL_Bank>()
                                           .Name("BankGrid")
                                           .Sortable()
                                           .Filterable()
                                           .AutoBind(false)
                                           .NoRecords()
                                              .ColumnMenu(columnMenu =>
                                              {
                                                  columnMenu.Filterable(true);
                                                  columnMenu.Columns(true);
                                                  columnMenu.Sortable(true);
                                              })
                                    .Reorderable(reorder =>
                                    {
                                        reorder.Columns(true);
                                    })
                                    .Resizable(resize =>
                                    {
                                        resize.Columns(true);
                                    })
                                        .AllowCopy(copy =>
                                        {
                                            copy.Enabled(true);
                                        })
                                               .HtmlAttributes(new { @class = "grid" })
                                               .Selectable(select =>
                                               {
                                                   select.Enabled(true);
                                                   select.Mode(GridSelectionMode.Single);
                                                   select.Type(GridSelectionType.Row);
                                               })
                                               .Editable(x =>
                                               {
                                                   x.Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLBank));
                                                   x.Mode(GridEditMode.InLine);
                                               })
                                               .ToolBar(t =>
                                               {
                                                   t.Create();
                                               })
                                               .Events(events =>
                                               {
                                                   events.Change("onBankRowChange");
                                                   events.ColumnHide("onBankLayoutChange");
                                                   events.ColumnShow("onBankLayoutChange");
                                                   events.ColumnResize("onBankLayoutChange");
                                                   events.ColumnReorder("onBankLayoutChange");
                                               })
                                               .Columns(cols =>
                                               {
                                                   cols.Bound(x => x.SLBank).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                                   cols.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                                                   cols.Bound(x => x.DateTimeId).GetColumnFormat(ColumnTypeEnum.DateTime, false, "", "").Hidden(true);
                                                   cols.Bound(x => x.Bank).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                                   cols.Bound(x => x.Name).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                                                   cols.Bound(x => x.IsOCC).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox'  class='enabledBankIsOccChkbx' #= (IsOCC) ? checked ='checked' : '' #/>", "");
                                                   cols.Command(x => x.Edit());
                                               })
                                               .Scrollable(scroll =>
                                               {
                                                   scroll.Enabled(true);
                                                   scroll.Virtual(true);
                                               })
                                               .DataSource(ds =>
                                               {
                                                   ds.Ajax()
               .ServerOperation(false)
               .Model(x =>
               {
                   x.Id(q => q.SLBank);
                   x.Field(q => q.SLBank).Editable(false);
                   x.Field(q => q.DateTimeId).Editable(false);
                   x.Field(q => q.Bank).Editable(true);
                   x.Field(q => q.Name).Editable(true);
               })
               .Read(read => read.Action("ReadBanks", "BankLoan", new { area = "CashSourcing" }).Data("onCashSourcingBankData"))
               .Update(update => update.Action("UpdateBank", "BankLoan", new { area = "CashSourcing" }))
               .Create(create => create.Action("AddBank", "BankLoan", new { area = "CashSourcing" }).Data("onBankCreateData"));
                                               })).ToHtmlString());

                                    childPanes.Add()
                                    .Scrollable(false)
                                    .Content(
                                    (Html.Kendo().Grid<SL_BankLoanActivityExtendedProjection>()
                                    .Name("BankLoanActivityGrid")
                                    .Sortable()
                                    .Filterable()
                                    .AutoBind(false)
                                    .NoRecords()
                                       .ColumnMenu(columnMenu =>
                                       {
                                           columnMenu.Filterable(true);
                                           columnMenu.Columns(true);
                                           columnMenu.Sortable(true);
                                       })
                                     .Events(events =>
                                     {
                                         events.ColumnHide("onBankLoanActivityLayoutChange");
                                         events.ColumnShow("onBankLoanActivityLayoutChange");
                                         events.ColumnResize("onBankLoanActivityLayoutChange");
                                         events.ColumnReorder("onBankLoanActivityLayoutChange");
                                     })
            .Reorderable(reorder =>
            {
                reorder.Columns(true);
            })
            .Resizable(resize =>
            {
                resize.Columns(true);
            })
            .AllowCopy(copy =>
            {
                copy.Enabled(true);
            })
            .Selectable(select => select.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
            .HtmlAttributes(new { @class = "grid" })
            .ToolBar(t =>
            {
                t.Template(LabelHelper.Label("Activity").ToString());
            })
            .Columns(cols =>
            {
                cols.Bound(x => x.SLBankLoanActivity).Hidden(true);
                cols.Bound(x => x.EffectiveDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "").Hidden(true);
                cols.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                cols.Bound(x => x.ActionType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.BankLoanMoneyTypeId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.Quantity).GetColumnFormat(ColumnTypeEnum.Position, true, "", "");
                cols.Bound(x => x.Amount).GetColumnFormat(ColumnTypeEnum.Money, true, "", "");
                cols.Bound(x => x.SecurityHypothication).GetColumnFormat(ColumnTypeEnum.String, true, "", "");
                cols.Bound(x => x.BankLoanDepositorySubmissionStatus).GetColumnFormat(ColumnTypeEnum.String, true, "", "");
                cols.Bound(x => x.BankLoanBookKeepingStatus).GetColumnFormat(ColumnTypeEnum.String, true, "", "");
                cols.Bound(x => x.BankLoanMadeStatus).GetColumnFormat(ColumnTypeEnum.String, true, "", "");
                cols.Bound(x => x.BankLoanPledgePurpose).GetColumnFormat(ColumnTypeEnum.String, true, "", "");
                cols.Bound(x => x.BankLoanReleaseType).GetColumnFormat(ColumnTypeEnum.String, true, "", "");
                cols.Bound(x => x.MemoInfo).GetColumnFormat(ColumnTypeEnum.String, true, "", "");
            })
            .Scrollable(scroll =>
            {
                scroll.Enabled(true);
                scroll.Virtual(true);
            })
            .DataSource(ds =>
            {
                ds.Ajax()
.ServerOperation(false)
.Read(r => r.Action("Read_BankLoanActivity", "BankLoan", new { area = "CashSourcing" }).Data("onCashSourcingBankLoanActivityData"))
.Aggregates(agg =>
{
    agg.Add(x => x.Quantity).Sum();
    agg.Add(x => x.Amount).Sum();
});
            }).ToHtmlString()));
                                }))
                  </text> );

    panes.Add()
         .Scrollable(false)
      .Content( @<text>
    @(Html.Kendo().Grid<SL_BankLoanExtendedProjection>()
            .Name("BankLoanGrid")
            .HtmlAttributes(new { @class = "grid" })
            .Scrollable()
            .Sortable()
            .Filterable()
            .AutoBind(false)
            .NoRecords()
               .ColumnMenu(columnMenu =>
               {
                   columnMenu.Filterable(true);
                   columnMenu.Columns(true);
                   columnMenu.Sortable(true);
               })
    .Reorderable(reorder =>
    {
        reorder.Columns(true);
    })
    .Resizable(resize =>
    {
        resize.Columns(true);
    })
    .AllowCopy(copy =>
    {
        copy.Enabled(true);
    })
            .Selectable(select =>
            {
                select.Enabled(true);
                select.Mode(GridSelectionMode.Multiple);
                select.Type(GridSelectionType.Row);
            })
            .ToolBar(tBar =>
            {
                tBar.Create();
            })
            .Editable(edit =>
            {
                edit.Mode(GridEditMode.InLine);
                edit.Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLBankLoan));
            })
            .Events(events =>
            {
                events.Change("onBankLoanRowChange");
                events.DataBound("onBankLoanCheckData");
                events.ColumnHide("onBankLoanLayoutChange");
                events.ColumnShow("onBankLoanLayoutChange");
                events.ColumnResize("onBankLoanLayoutChange");
                events.ColumnReorder("onBankLoanLayoutChange");
            })
            .Filterable(filter =>
            {
                filter.Enabled(true);
            })
            .Resizable(resize =>
            {
                resize.Columns(true);
            })
            .Columns(cols =>
            {
                cols.Bound(x => x.SLBankLoan).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                cols.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                cols.Bound(x => x.BankId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                cols.Bound(x => x.LoanDate).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Format("{0:yyyy-MM-dd}");
                cols.Bound(x => x.BankLoanMoneyType).GetColumnFormat(ColumnTypeEnum.String, false, "", "_BankLoanMoneyTypeDropdown");
                cols.Bound(x => x.Name).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.AccountNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.AccountType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.BankLoanCategory).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.LoanLimit).GetColumnFormat(ColumnTypeEnum.Money, true, "", "");
                cols.Bound(x => x.CurrentMarketValue).GetColumnFormat(ColumnTypeEnum.Money, true, "", "");
                cols.Bound(x => x.IntradayDelta).GetColumnFormat(ColumnTypeEnum.Money, true, "", "");
                cols.Bound(x => x.DateTimeId).GetColumnFormat(ColumnTypeEnum.Time, false, "", "");
                cols.Command(x =>
                {
                    x.Edit();
                    x.Custom("BookKeepingCommand").HtmlAttributes(new { id = "BookKeepingCommand" }).Text(LabelHelper.Text("BookKeeping"));
                });
            })
        .DataSource(ds =>
        {
            ds.Ajax()
            .AutoSync(true)
            .Events(events => events
               .Error("onBankLoanError"))
            .ServerOperation(false)
            .Aggregates(agg =>
            {
                agg.Add(x => x.CurrentMarketValue).Sum();
                agg.Add(x => x.IntradayDelta).Sum();
                agg.Add(x => x.LoanLimit).Sum();
            })
            .Model(x =>
            {
                x.Id(q => q.SLBankLoan);
                x.Field(q => q.EntityId).Editable(false);
                x.Field(q => q.BankId).Editable(false);
                x.Field(q => q.AccountNumber).Editable(true).DefaultValue("");
                x.Field(q => q.AccountType).Editable(true).DefaultValue("C");
                x.Field(q => q.BankLoanMoneyType).Editable(true).DefaultValue(SL_BankLoanMoneyType.Free);
                x.Field(q => q.BankLoanCategory).Editable(false);
                x.Field(q => q.LoanDate).Editable(true).DefaultValue(DateTime.Today);
                x.Field(q => q.Name).Editable(true).DefaultValue("");
                x.Field(q => q.LoanLimit).Editable(false).DefaultValue(100000000);
                x.Field(q => q.CurrentMarketValue).Editable(false);
                x.Field(q => q.IntradayDelta).Editable(false);
                x.Field(q => q.DateTimeId).Editable(false);
            })
            .Read(r => r.Action("Read_BankLoans", "BankLoan", new { area = "CashSourcing" }).Data("onCashSourcingBankLoanData"))
            .Update(r => r.Action("Update_BankLoan", "BankLoan", new { area = "CashSourcing" }))
            .Create(r => r.Action("Add_BankLoan", "BankLoan", new { area = "CashSourcing" }).Data("onBankLoanCreateData"));
        }))
        </text> );
        }));
</div>


@(Html.Kendo().ContextMenu()
.Name("BankContextMenu")
    .Target("#BankGrid")
    .Events(events => events.Select("onBankContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
    }))

@(Html.Kendo().ContextMenu()
.Name("BankLoanContextMenu")
    .Target("#BankLoanGrid")
    .Events(events => events.Select("onBankLoanContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
    }))

@(Html.Kendo().ContextMenu()
.Name("BankLoanActivityContextMenu")
    .Target("#BankLoanActivityGrid")
    .Events(events => events.Select("onBankLoanActivityContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
    }))
