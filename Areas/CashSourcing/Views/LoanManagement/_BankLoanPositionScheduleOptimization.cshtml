@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools

<style>
    .projectedHighLight {
        background: #a7008f !important;
    }

    #BoxCalcSummaryButton.zeroclipboard-is-hover {
        background-color: #1ba1e2;
    }

    #BoxCalcButton.zeroclipboard-is-hover {
        background-color: #1ba1e2;
    }

    #BoxCalculationDetails.k-content.k-icon {
        background-color: #1ba1e2;
    }
</style>
<script type="text/javascript">
    var _boxSelectedRows = [];

    var _boxSelectAll = false;
    var _boxSummarySelectAll = false;

    var _originalBoxGrid = null;
    var _originalBoxSummaryGrid = null;

    var lastRefresh = null;
    var scrolling = true;

    var _boxCalculationSuspendRefresh = false;
    var boxCalculationInterval;

    $(document).ready(function () {
        setTimeout(function () {
            _originalBoxGrid = $('#BoxCalculationDetails').data('kendoGrid').getOptions();
            _originalBoxSummaryGrid = $('#BoxCalculationSummary').data('kendoGrid').getOptions();

            LoadGridLayout("#BoxCalculationDetails");
            LoadGridLayout("#BoxCalculationSummary");
        }, 5);

        $("#BoxCalculationSummary").hide()


        var clientEvent1 = new ZeroClipboard(document.getElementById("BoxCalcSummaryButton"));

        clientEvent1.on("ready", function (readyEvent) {
            clientEvent1.on("copy", function (event) {
                var data1 = KendoGridToText("#BoxCalculationSummary", "BoxCalculationSummary", _boxSummarySelectAll);
                clientEvent1.setText(data1);
            });
        });

        var clientEvent2 = new ZeroClipboard(document.getElementById("BoxCalcButton"));

        clientEvent2.on("ready", function (readyEvent) {
            clientEvent2.on("copy", function (event) {
                var data2 = KendoGridToText("#BoxCalculationDetails", "BoxCalculationDetails", _boxSelectAll);
                clientEvent2.setText(data2);
            });
        });
    });


    function onBoxDetailGridLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#BoxCalculationDetails");
        }, 5);
    }

    function onBoxSummaryGridLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#BoxCalculationSummary");
        }, 5);
    }

    function BackupBoxRowSelection() {
        var grid = $("#BoxCalculationDetails").data("kendoGrid");

        var rows = grid.select();

        rows.each(function (index, row) {
            var selectedItem = grid.dataItem(row);
            _boxSelectedRows.push(selectedItem);
        });
    }

    function RestoreBoxRowSelection() {
        if (_boxSelectedRows.length !== 0) {
            try {
                for (var i = 0; i < _boxSelectedRows.length; i++) {
                    var currId = _boxSelectedRows[i].uid;

                    $('#BoxCalculationDetails').data("kendoGrid").tbody.find("tr[data-uid='" + currId + "']").addClass("k-state-selected");
                }
            }
            catch (e) {
                console.log(e.message);
            }
        }
    }

    function onBoxRequestEnd(e) {
        _boxCalculationSuspendRefresh = false;
        $("#BoxCalculationDetails").data("kendoGrid").refresh();

        traderHubProxy.on('updateBox', function (update) {
            updateBoxRow(update);
        });

        lastRefresh = new Date(Date.now());

        if (lastRefresh.getHours() > 12) {
            var hours = lastRefresh.getHours() - 12;
            var ampm = "PM";
        }
        else {
            var hours = lastRefresh.getHours();
            var ampm = "AM";
        }

        if (lastRefresh.getMinutes() < 10) {
            var minutes = "0" + lastRefresh.getMinutes();
        }
        else {
            var minutes = lastRefresh.getMinutes();
        }

        if (lastRefresh.getSeconds() < 10) {
            var seconds = "0" + lastRefresh.getSeconds();
        }
        else {
            var seconds = lastRefresh.getSeconds();
        }

        $("#BoxUpdateLastTime").text("Last Update: " + hours + ":" + minutes + ":" + seconds + ampm);

        try {
            $("#BoxCalculationRefreshButton").data("kendoButton").enable(true);
        } catch (e) { }
    }

    function onBoxRequestStart(e) {
        _boxCalculationSuspendRefresh = true;

        traderHubProxy.off('updateBox');

        try {
            $("#BoxCalculationRefreshButton").data("kendoButton").enable(false);
        } catch (e) { }
    }

    function onBankLoanPledgeData(e) {
        if (e) {
            try {
                var entityGrid = $("#BoxCalculationDetails").data("kendoGrid");
                var selectedItem = entityGrid.dataItem(entityGrid.select());

                var entityId = selectedItem["EntityId"];
                var effectiveDate = selectedItem["EffectiveDate"];
                var securityNumber = selectedItem["SecurityNumber"];
                var issueId = selectedItem["IssueId"];
                var excess = selectedItem["ExcessPositionSettled"];

                HelperLocalCashSourcingWindowPartialWindow(
                    JSON.stringify({
                        entityId: entityId,
                        criteria: securityNumber,
                        pledgeQuantity: excess
                    }),
                    'BankLoan Pledge',
                    1100,
                    450,
                    '/CashSourcing/BankLoan/BankLoanPledgePartial'
                    );
            }
            catch (e) {
                console.log(e);
            }
        }
    }

    function onBoxCalculationSummaryContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case "Refresh Data":
                onBoxCalculationSummaryChange();
                break;

            case "Unsort":
                onBoxCalculationUnsortGrid("#BoxCalculationSummary");
                break;

            case "Select All":
                boxSummarySelectAll(true);
                break;

            case "Reset Filter":
                ResetFilter("#BoxCalculationSummary");
                break;

            case "Reset Grid":
                ResetUserLayout("#BoxCalculationSummary");
                $('#BoxCalculationSummary').data('kendoGrid').setOptions(_originalBoxGrid);
                break;

            case "Export To Excel":
                exportToBoxSummaryExcel();
                break;
        }
    }

    function onBoxCalculationContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case "Borrow":
                onBoxCalculationBorrow(true);
                break;

            case "Loan":
                onBoxCalculationLoan(true);
                break;

            case "Return":
                onBoxCalculationReturn(true);
                break;

            case "Recall":
                onBoxCalculationRecall(true);
                break;

            case "Pledge":
                onBankLoanPledgeData(true);
                break;
            case "Refresh Data":
                onBoxCalculationChange();
                break;

            case "Unsort":
                onBoxCalculationUnsortGrid("#BoxCalculationDetails");
                break;

            case "Select All":
                boxSelectAll(true);
                break;

            case "Add To AutoBorrow":
                if ('@DataSystemValues.LoadSystemValue("UseAutoBorrowOrder","true")' == 'true') {
                    addBoxCalculationToAutoBorrow(true);
                }
                else {
                    addBoxCalculationToLcor(true);
                }
                break;

            case "Reset Filter":
                $("#BoxSecuritySearchTextBox").val("");
                ResetFilter("#BoxCalculationDetails");
                break;

            case "Reset Grid":
                ResetUserLayout("#BoxCalculationDetails");
                $('#BoxCalculationDetails').data('kendoGrid').setOptions(_originalBoxGrid);
                break;

            case "Export To Excel":
                exportToBoxExcel();
                break;
        }
    }

    function updateBoxRow(update) {
        try {
            var entity = $("#BoxDropdownList").data("kendoDropDownList").value();

            $.each(update, function (i, obj) {
                if (obj.EntityId == entity) {

                    if ($("#BoxCalculationDetails").length) {
                        var data = $("#BoxCalculationDetails").data("kendoGrid").dataSource;

                        var dateTimeId = kendo.parseDate(obj['DateTimeId']);
                        obj['DateTimeId'] = dateTimeId;

                        data.pushUpdate(obj);
                    }
                }
            });
        } catch (e) {
            console.log('updateBoxRow err::' + e.message);
        }
    }

    $('#SharedLabelCheckBox').change(function () {
        try {
            var summaryType = $("#BoxCalculationSummaryDetailDropdownList").data("kendoDropDownList").value();

            if (summaryType == '@DetailTypeEnum.Summary') {
                RefreshGrid("#BoxCalculationSummary");
            }
            else {
                RefreshGrid("#BoxCalculationDetails");
            }
        } catch (e) { }
    });

    $(document).bind('keydown', 'ctrl+a', function (e) {
        if (e.altKey && (e.which == 65)) {
            e.preventDefault();

            var summaryType = $("#BoxCalculationSummaryDetailDropdownList").data("kendoDropDownList").value();

            if (summaryType == '@DetailTypeEnum.Summary') {
                boxSummarySelectAll(true);
            }
            else {
                boxSelectAll(true);
            }
            return false;
        }
    });

    function onBoxCalculationUnsortGrid(e) {
        UnsortGrid(e);
    }

    function exportToBoxExcel() {
        try {
            KendoGridToCSVConvertor("#BoxCalculationDetails", 'BoxCalculationDetails', _boxSelectAll);

            _boxSelectAll = false;
            _boxSelectedRows = [];
            RestoreBoxRowSelection();
        }
        catch (e) {
            console.log(e.message);
            console.log(e.message);
        }
    }

    function exportToBoxSummaryExcel() {
        try {
            KendoGridToCSVConvertor("#BoxCalculationSummary", 'BoxCalculationSummary', _boxSummarySelectAll);

            _boxSummarySelectAll = false;
        }
        catch (e) {
            console.log(e.message);
            console.log(e.message);
        }
    }

    function boxSelectAll(e) {
        try {
            var boxGrid = $("#BoxCalculationDetails").data("kendoGrid");
            boxGrid.select(boxGrid.tbody.find(">tr"));

            _boxSelectAll = true;
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function boxSummarySelectAll(e) {
        try {
            var boxGrid = $("#BoxCalculationSummary").data("kendoGrid");
            boxGrid.select(boxGrid.tbody.find(">tr"));

            _boxSummarySelectAll = true;
        }
        catch (e) {
            console.log(e.message);
        }
    }


    function onBoxCalculationRowChange(e) {
        e.preventDefault();

        _boxSelectAll = false;
        _boxSelectedRows = [];

        try {
            var entityGrid = $("#BoxCalculationDetails").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            var entityId = selectedItem["EntityId"];
            var effectiveDate = selectedItem["EffectiveDate"];
            var securityNumber = selectedItem["SecurityNumber"];
            var issueId = selectedItem["IssueId"];

            SidePanelUpdate(effectiveDate, entityId, issueId, securityNumber);

            if (selectedItem.SuggestionBorrowSettled > 0) {
                EnableContextMenuItem("#BoxCalculationContextMenu", "Borrow", true);
                EnableContextMenuItem("#BoxCalculationContextMenu", "Add To AutoBorrow", true);
            }
            else {
                EnableContextMenuItem("#BoxCalculationContextMenu", "Borrow", false);
                EnableContextMenuItem("#BoxCalculationContextMenu", "Add To AutoBorrow", false);
            }


            if (selectedItem.SuggestionLoanSettled > 0) {
                EnableContextMenuItem("#BoxCalculationContextMenu", "Loan", true);
            }
            else {

                EnableContextMenuItem("#BoxCalculationContextMenu", "Loan", false);
            }

            if (selectedItem.SuggestionReturnSettled > 0) {
                EnableContextMenuItem("#BoxCalculationContextMenu", "Return", true);
            }
            else {

                EnableContextMenuItem("#BoxCalculationContextMenu", "Return", false);
            }


            if (selectedItem.SuggestionRecallSettled > 0) {
                EnableContextMenuItem("#BoxCalculationContextMenu", "Recall", true);
            }
            else {

                EnableContextMenuItem("#BoxCalculationContextMenu", "Recall", false);
            }


            if ((selectedItem.CustomerBankLoanPositionSettled > 0) ||
                (selectedItem.FirmBankLoanPositionSettled > 0) ||
                (selectedItem.OtherBankLoanPositionSettled > 0)) {
                EnableContextMenuItem("#BoxCalculationContextMenu", "Release", true);
            }
            else {

                EnableContextMenuItem("#BoxCalculationContextMenu", "Release", false);
            }


            if (selectedItem.ExcessPositionSettled > 0) {
                EnableContextMenuItem("#BoxCalculationContextMenu", "Pledge", true);
            }
            else {

                EnableContextMenuItem("#BoxCalculationContextMenu", "Pledge", false);
            }
        }
        catch (e) {
            console.log(e.message);
        }

        BackupBoxRowSelection();
    }

    function onBoxCalculationDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    userPreference = valid;

                    var dropdownList = $('#BoxDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $('#BoxCalculationDetails').data("kendoGrid").dataSource.read();
                },
                error: function (valid) {
                    userPreference = null;
                }
            })
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function addBoxCalculationToList(e) {
        if (e) {
            var dataItems = [];

            var grid = $('#BoxCalculationDetails').data('kendoGrid');
            var rows = grid.select();
            var useTraded = $('#UseTradedCheckBox').is(':checked');

            rows.each(function (index, row) {
                var selectedItem = grid.dataItem(row);
                dataItems.push(selectedItem);
            });

            HelperPartialWindow(
                JSON.stringify(dataItems),
                'Add items to list',
                490,
                490,
                '/DomesticTrading/Action/LoadActionBoxCalculationPartial'
            );
        }
    }

    function sleep(delay) {
        var start = new Date().getTime();
        while (new Date().getTime() < start + delay);
    }


    function addBoxCalculationToAutoBorrow(e) {
        if (e) {
            try {
                var difference = Date.now() - lastRefresh;

                var minutes = (difference / 1000) / 60;

                if (minutes >= 5) {
                    DisplayControllerByStringError("Info", "Grid data has been stale for more than 5 minutes. Automcatic Refresh will now occur.");
                    $("#BoxCalculationDetails").data("kendoGrid").dataSource.read();
                }
                else {
                    var boxLcorItems = [];
                    var boxDataItems = getDataItems('#BoxCalculationDetails',
                        _boxSelectAll,
                        '@DataSystemValues.LoadSystemValue("BoxCalculationMaxItems","1000")');

                    if (boxDataItems.length > 0) {
                        for (i = 0; i < boxDataItems.length; i++) {
                            boxLcorItems.push(
                            {
                                ModelId: boxDataItems[i].SLBoxCalculation,
                                Enabled: true,
                                EntityId: boxDataItems[i].EntityId,
                                ListName: "",
                                SmartRoute: "",
                                ContraEntityId: "",
                                IssueId: boxDataItems[i].IssueId,
                                SecurityNumber: boxDataItems[i].SecurityNumber,
                                Ticker: boxDataItems[i].Ticker,
                                Quantity: boxDataItems[i].SuggestionBorrowSettled,
                                MaxPrice: boxDataItems[i].Price,
                                RebateRate: 0,
                                Mark: 0,
                                SubmissionType: '@StatusDetail.Pending',
                                MemoInfo: ""
                            });
                        }

                        HelperPartialWindow(
                            JSON.stringify({ items: boxLcorItems }),
                            'Add items to LCOR',
                            490,
                            490,
                            '/DomesticTrading/SmartRoute/LoadAutoBorrowBoxProjectionPartial'
                        );
                    }
                }
            }
            catch (e) {
                console.log(e.message);
            }
        }
    }

    function addBoxCalculationToLcor(e) {
        if (e) {
            try {
                var boxLcorItems = [];
                var boxDataItems = getDataItems('#BoxCalculationDetails',
                    _boxSelectAll,
                    '@DataSystemValues.LoadSystemValue("BoxCalculationMaxItems","1000")');

                if (boxDataItems.length > 0) {
                    for (i = 0; i < boxDataItems.length; i++) {
                        boxLcorItems.push(
                        {
                            ModelId: boxDataItems[i].SLBoxCalculation,
                            Enabled: true,
                            EntityId: boxDataItems[i].EntityId,
                            ContraEntityId: "",
                            IssueId: boxDataItems[i].IssueId,
                            SecurityNumber: boxDataItems[i].SecurityNumber,
                            Ticker: boxDataItems[i].Ticker,
                            Quantity: boxDataItems[i].SuggestionBorrowSettled,
                            MaxPrice: boxDataItems[i].Price,
                            RebateRate: 0,
                            Mark: 0,
                            SubmissionType: '@StatusDetail.Pending',
                            MemoInfo: ""
                        });
                    }

                    HelperPartialWindow(
                        JSON.stringify({ items: boxLcorItems }),
                        'Add items to LCOR',
                        490,
                        490,
                        '/DomesticTrading/AutoAction/LoadAutoBorrowBoxProjectionPartial'
                    );
                }
            }
            catch (e) {
                console.log(e.message);
            }
        }
    }

    function onBoxCalculationBorrow(e) {
        if (e) {
            try {
                var grid = $("#BoxCalculationDetails").data("kendoGrid");
                var selectedItem = grid.dataItem(grid.select());
                var useTraded = $('#UseTradedCheckBox').is(':checked');

                HelperPartialWindow(
                    JSON.stringify({
                        item: selectedItem,
                        useTraded: useTraded,
                    }),
                   'Book Borrow',
                   480,
                   480,
                   '/DomesticTrading/Boxcalculation/Load_Borrow'
               );
            }
            catch (e) {
                console.log(e.message);
            }
        }
    }

    function onBoxCalculationLoan(e) {
        if (e) {
            try {
                var grid = $("#BoxCalculationDetails").data("kendoGrid");
                var selectedItem = grid.dataItem(grid.select());
                var useTraded = $('#UseTradedCheckBox').is(':checked');

                HelperPartialWindow(
                    JSON.stringify({
                        item: selectedItem,
                        useTraded: useTraded,
                    }),
                   'Book Loan',
                   480,
                   480,
                   '/DomesticTrading/Boxcalculation/Load_Loan'
               );
            }
            catch (e) {
                console.log(e.message);
            }
        }
    }

    function onBoxCalculationRecall(e) {
        if (e) {
            try {
                var grid = $("#BoxCalculationDetails").data("kendoGrid");
                var dataItems = [];
                var rows = grid.select();

                rows.each(function (index, row) {
                    var selectedItem = grid.dataItem(row);
                    dataItems.push(selectedItem);
                });

                HelperPartialWindow(
                    JSON.stringify({
                        items: dataItems,
                        useTraded: false,
                    }),
                    'Book Recalls',
                    1100,
                    450,
                    '/DomesticTrading/Boxcalculation/Load_RecallBySuggestion'
                    );
            }
            catch (e) {
                console.log(e.message);
            }
        }
    }


    function onBoxCalculationPendExcess(e) {
        if (e) {
            try {
                var grid = $("#BoxCalculationDetails").data("kendoGrid");
                var dataItems = [];
                var rows = grid.select();

                rows.each(function (index, row) {
                    var selectedItem = grid.dataItem(row);
                    dataItems.push(selectedItem);
                });

                HelperPartialWindow(
                    JSON.stringify({
                        items: dataItems
                    }),
                    'Book Pend Excess',
                    1100,
                    450,
                    '/DomesticTrading/Boxcalculation/Pend_ExcessByContract'
                    );
            }
            catch (e) {
                console.log(e.message);
            }
        }
    }

    function onBoxCalculationCheckData(e) {
        CheckGridData('#BoxCalculationDetails');
        _boxSelectedRows = [];
        //RestoreBoxRowSelection();
    }

    function onBoxCalculationSummaryCheckData(e) {
        CheckGridData('#BoxCalculationSummary');
    }

    function onBoxCalculationReturn(e) {
        if (e) {
            try {
                var grid = $("#BoxCalculationDetails").data("kendoGrid");
                var dataItems = [];
                var rows = grid.select();

                rows.each(function (index, row) {
                    var selectedItem = grid.dataItem(row);
                    dataItems.push(selectedItem);
                });

                HelperPartialWindow(
                    JSON.stringify({
                        items: dataItems,
                        useTraded: false,
                    }),
                    'Book Returns',
                    1100,
                    450,
                    '/DomesticTrading/Boxcalculation/Load_ReturnBySuggestion'
                    );
            }
            catch (e) {
                console.log(e.message);
            }
        }
    }

    function additionalBoxCalculationData() {
        var datepicker = $("#BoxCalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entity = $("#BoxDropdownList").data("kendoDropDownList");
        var portfolio = $("#PortfolioDropdownList").data("kendoDropDownList");
        var settlementType = $("#SettlementTypeDropdownList").data("kendoDropDownList");

        return {
            entityId: entity.value(),
            effectiveDate: value
        };
    }

    function additionalBoxCalculationSummaryData() {
        var datepicker = $("#BoxCalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entity = $("#BoxDropdownList").data("kendoDropDownList");
        var settlementType = $("#SettlementTypeDropdownList").data("kendoDropDownList");

        return {
            entityId: entity.value(),
            effectiveDate: value,
            settlementType: settlementType.value(),
        };
    }

    function onBoxCalculationPortfolioChange() {
        var entity = $("#BoxDropdownList").data("kendoDropDownList");

        return {
            entityId: entity.value(),
        }
    }

    function onBoxCalculationFilterLoad() {
        var entity = $("#BoxDropdownList").data("kendoDropDownList");

        return {
            entityId: entity.value(),
            gridName: 'BoxCalculationDetails'
        }
    }

    function onBoxCalculationGridError(e) {
        ErrorGridData("#BoxCalculationDetails");
    }

    function onBoxCalculationError(e) {
        console.log(e.message);
    }

    function onBoxCalculationChange() {
        var summaryType = $("#BoxCalculationSummaryDetailDropdownList").data("kendoDropDownList").value();

        if (summaryType == '@DetailTypeEnum.Summary') {
            $("#BoxCalculationSummary").data("kendoGrid").dataSource.read();
        }
        else {
            $("#BoxCalculationDetails").data("kendoGrid").dataSource.read();
        }

        $('#PortfolioDropdownList').data("kendoDropDownList").dataSource.read();
        $('#FilterDropdownList').data("kendoDropDownList").dataSource.read();
    }

    function onPortfolioChange() {
        var summaryType = $("#BoxCalculationSummaryDetailDropdownList").data("kendoDropDownList").value();

        if (summaryType == '@DetailTypeEnum.Summary') {
            $("#BoxCalculationSummary").data("kendoGrid").dataSource.read();
        }
        else {
            $("#BoxCalculationDetails").data("kendoGrid").dataSource.read();
        }
    }

    function onBoxCalculationPortfolioMgt() {
        try {
            var entity = $("#BoxDropdownList").data("kendoDropDownList");


            HelperPartialWindow(
                JSON.stringify({ entityId: entity.value() }),
                'Manage Portfolio(s)',
                1100,
                450,
                '/DomesticTrading/Portfolio/LoadPortfolioPartial'
                );
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onBoxCalculationFilterChange() {
        try {
            var grid = $("#BoxCalculationDetails").data("kendoGrid");
            var entityId = $("#BoxDropdownList").data("kendoDropDownList").value();;
            var filterDropDown = $('#FilterDropdownList').data("kendoDropDownList").value();

            $.ajax({
                url: '/DomesticTrading/BoxCalculation/QuickFilterLookup',
                type: 'POST',
                data: JSON.stringify({
                    entityId: entityId,
                    gridName: 'BoxCalculationDetails',
                    filterName: filterDropDown
                }),
                contentType: 'application/json;',
                success: function (valid) {

                    if (valid != null) {
                        $("#BoxSecuritySearchTextBox").val("");

                        var filter = { logic: "and", filters: [] };

                        for (i = 0; i < valid.length; i++) {
                            var quickFilter = valid[i];
                            var ops = null;

                            if (quickFilter.OperatorId == 1) {
                                ops = '@SL_Operator.gte';
                            }
                            else if (quickFilter.OperatorId == 2) {
                                ops = '@SL_Operator.gt';
                            }
                            else if (quickFilter.OperatorId == 3) {
                                ops = '@SL_Operator.lt';
                            }
                            else if (quickFilter.OperatorId == 4) {
                                ops = '@SL_Operator.lte';
                            }
                            else if (quickFilter.OperatorId == 5) {
                                ops = '@SL_Operator.eq';
                            }
                            else if (quickFilter.OperatorId == 6) {
                                ops = '@SL_Operator.neq';
                            }

                            filter.filters.push({ field: quickFilter.Field, operator: ops, value: quickFilter.Value });
                        }

                        grid.dataSource.filter(filter);
                    }
                    else {
                        grid.dataSource.filter({});
                    }
                },
                error: function (valid) {
                    grid.dataSource.filter({});
                }
            })
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onPortfolioDataBound(e) {
        $("#PortfolioDropdownList").data("kendoDropDownList").text('@LabelHelper.Text("OptionLabel")');
    }

    function onQuickFilterDataBound(e) {
        $("#FilterDropdownList").data("kendoDropDownList").text('@LabelHelper.Text("OptionLabel")');
    }

    function onBoxSearchChange(e) {
        e.preventDefault();

        try {
            var grid = $("#BoxCalculationDetails").data("kendoGrid").dataSource;

            var filter = { logic: "and", filters: [] };
            var cusipTextBox = document.getElementById("BoxSecuritySearchTextBox").value;

            QuickColumnFilter(grid, 'Ticker', cusipTextBox);
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onBoxCalculationSettlementTypeChange(e) {
        var settlementDropDown = $('#SettlementTypeDropdownList').data("kendoDropDownList").value();

        if (settlementDropDown == '@Convert.ToInt32(SettlementTypeEnum.Projected)') {
            $('#BoxCalculationDetails').data("kendoGrid").thead.find(".k-header").addClass("projectedHighLight");
        }
        else {
            $('#BoxCalculationDetails').data("kendoGrid").thead.find(".k-header").removeClass("projectedHighLight");
        }

        $("#BoxCalculationDetails").data("kendoGrid").dataSource.read();
    }

    function onBoxCalculationSummaryDetailChange() {
        var summaryType = $("#BoxCalculationSummaryDetailDropdownList").data("kendoDropDownList").value();

        if (summaryType == '@DetailTypeEnum.Summary') {
            $("#BoxCalculationDetails").data("kendoGrid").dataSource.filter({});
            $("#BoxCalculationDetails").hide();
            $("#BoxCalculationSummary").show();
            RefreshGrid("#BoxCalculationSummary");
            $("#BoxCalculationSummary").data("kendoGrid").dataSource.read();
        }
        else {
            $("#BoxCalculationDetails").data("kendoGrid").dataSource.filter({});
            $("#BoxCalculationSummary").hide();
            $("#BoxCalculationDetails").show();
            RefreshGrid("#BoxCalculationDetails");
            $("#BoxCalculationDetails").data("kendoGrid").dataSource.read();
        }
    }

    function onBoxCalculationDataBinding(e) {
        if (_boxCalculationSuspendRefresh == true) {
            e.preventDefault();
        }
    }
</script>

@(
 Html.Kendo().ToolBar()
    .Name( "BoxCalcToolBar" )
    .Items( items =>
    {
        items.Add().Template( LabelHelper.Label( "EffectiveDate" ).ToHtmlString() );

        items.Add().Template( Html.Kendo().DatePicker()
                                .Name( "BoxCalander" )
                                .Format( "yyyy-MM-dd" )
                                .HtmlAttributes( new { @class = "width90" } )
                                .Value( DateTime.Now )
                                .Events( events => events.Change( "onBoxCalculationChange" ) ).ToHtmlString() );

        items.Add().Template( LabelHelper.Label( "Entity" ).ToHtmlString() );
        items.Add().Template( Html.Kendo().DropDownList()
                            .Name( "BoxDropdownList" )
                            .HtmlAttributes( new { @class = "width90" } )
                            .DataTextField( "Custodian" )
                            .DataValueField( "CompanyId" )
                            .OptionLabel( LabelHelper.Text( "OptionLabel" ) )
                            .AutoBind( true )
                                .Template( "#if(data.Custodian == \"" + LabelHelper.Text( "OptionLabel" ) + "\")" +
                                   "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                   "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#" )
                            .Events( events => events.Change( "onBoxCalculationChange" ).DataBound( "onBoxCalculationDefaultLoad" ).Open( "onContraEntityAutoCompleteResize" ) )
                            .DataSource( dataSource => dataSource
                            .Events( events => events.Error( "onBoxCalculationError" ) )
                            .Read( read => read
                            .Action( "Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" } ) ) )
                            .SelectedIndex( 0 ).ToHtmlString() );

        items.Add().Template( LabelHelper.Label( "Portfolio" ).ToHtmlString() );

        items.Add().Template( Html.Kendo().DropDownList()
                            .Name( "PortfolioDropdownList" )
                            .HtmlAttributes( new { @class = "width90" } )
                            .DataTextField( "Name" )
                            .DataValueField( "SLPortfolio" )
                            .OptionLabel( LabelHelper.Text( "OptionLabel" ) )
                            .Value( LabelHelper.Text( "OptionLabel" ) )
                            .Value( LabelHelper.Text( "OptionLabel" ) )
                            .AutoBind( false )
                            .Events( events => events.Change( "onPortfolioChange" ).DataBound( "onPortfolioDataBound" ) )
                            .DataSource( dataSource => dataSource
                            .Events( events => events.Error( "onBoxCalculationError" ) )
                            .Read( read => read
                            .Action( "LoadPortfolioDropdown", "Portfolio", new { area = "DomesticTrading" } ).Data( "onBoxCalculationPortfolioChange" ) ) )
                            .ToHtmlString() );

        items.Add().Type( CommandType.Button ).Text( LabelHelper.Text( "Portfolio" ) ).Click( "onBoxCalculationPortfolioMgt" );

        items.Add().Template( LabelHelper.Label( "QuickFilter" ).ToHtmlString() );

        items.Add().Template( Html.Kendo().DropDownList()
                    .Name( "FilterDropdownList" )
                    .HtmlAttributes( new { @class = "width90" } )
                    .OptionLabel( LabelHelper.Text( "OptionLabel" ) )
                    .Value( LabelHelper.Text( "OptionLabel" ) )
                    .AutoBind( false )
                    .Events( e => e.Change( "onBoxCalculationFilterChange" ).DataBound( "onQuickFilterDataBound" ) )
                    .DataSource( dataSource => dataSource
                    .Events( events => events.Error( "onBoxCalculationError" ) )
                    .Read( read => read.Action( "LoadFilters", "BoxCalculation", new { area = "DomesticTrading" } ).Data( "onBoxCalculationFilterLoad" ) ) )
                    .ToHtmlString() );


        items.Add().Template( LabelHelper.Label( "SettlementType" ).ToHtmlString() );

        items.Add().Template( Html.Kendo().DropDownList()
                    .Name( "SettlementTypeDropdownList" )
                    .HtmlAttributes( new { @class = "width90" } )
                    .DataValueField( "Value" )
                    .DataTextField( "Text" )
                    .AutoBind( true )
                    .Events( e => e.Change( "onBoxCalculationSettlementTypeChange" ) )
                    .SelectedIndex( 0 )
                    .BindTo( SLTrader.Tools.EnumExtensions.GetEnumSelectList<SettlementTypeEnum>() )
                    .ToHtmlString() );

        items.Add().Template( LabelHelper.Label( "SummaryDetail" ).ToHtmlString() );

        items.Add().Template( Html.Kendo().DropDownListFor( m => m )
            .Name( "BoxCalculationSummaryDetailDropdownList" )
            .HtmlAttributes( new { @class = "width100", data_value_primitive = true } )
            .Events( events => events.Change( "onBoxCalculationSummaryDetailChange" ) )
            .BindTo( Enum.GetNames( typeof( DetailTypeEnum ) ).AsEnumerable() )
            .Value( DetailTypeEnum.Detail.ToString() ).ToHtmlString() );

        items.Add().Template( Html.Kendo().Button().Name( "BoxCalculationRefreshButton" ).Content( "<i class='fa fa-refresh fa-1x'></i>" ).Events( ev => ev.Click( "onPortfolioChange" ) ).ToHtmlString() );

        items.Add().Template(
            "<table><tr><td>" +
            LabelHelper.LabelFor( "TickerSearch", "BoxSecuritySearchTextBox" ).ToHtmlString() + "</td><td>" +
            Html.Kendo().AutoComplete().Name( "BoxSecuritySearchTextBox" ).HtmlAttributes( new { @class = "width90" } ).Events( eve => eve.Filtering( "onBoxSearchChange" ) ).Suggest( true ).ToHtmlString() + "</td></tr></table>"
            ).HtmlAttributes( new { @class= "tickerSearch-Text" } );
    } ))


<hr class="hr-white">
<div id="BoxContent" class="grid-div">

    @(Html.Kendo().Grid<ScheduleBoxModel>()
        .Name( "BoxCalculationDetails" )
        .HtmlAttributes( new { @class = "grid" } )
        .Sortable()
        .Scrollable( scroll => scroll.Virtual( true ) )
        .Filterable()
        .Navigatable()
        .ColumnMenu( columnMenu =>
        {
            columnMenu.Filterable( true );
            columnMenu.Columns( true );
            columnMenu.Sortable( true );
        } )
        .Reorderable( reorder =>
        {
            reorder.Columns( true );
        } )
        .Resizable( resize =>
        {
            resize.Columns( true );
        } )
        .AllowCopy( copy =>
            {
                copy.Enabled( true );
            } )
        .Selectable( seclect => seclect.Mode( GridSelectionMode.Multiple ) )
        .Events( events =>
        {
            events.DataBinding( "onBoxCalculationDataBinding" );
            events.Change( "onBoxCalculationRowChange" );
            events.DataBound( "onBoxCalculationCheckData" );
            events.ColumnHide( "onBoxDetailGridLayoutChange" );
            events.ColumnShow( "onBoxDetailGridLayoutChange" );
            events.ColumnResize( "onBoxDetailGridLayoutChange" );
            events.ColumnReorder( "onBoxDetailGridLayoutChange" );
        } )
        .Columns( columns =>
        {
            columns.Bound( x => x.Box.EntityId ).Hidden( true ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
            columns.Bound( x => x.Box.IssueId ).Hidden( true ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
            columns.Bound( x => x.Box.SecurityNumber ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
            columns.Bound( x => x.Box.Ticker ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
            columns.Bound( x => x.Box.Classification ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
            columns.Bound( x => x.Box.RecordDate ).GetColumnFormat( ColumnTypeEnum.Date, false, "", "" );
            columns.Bound( x => x.Box.CurrentMarketCap ).GetColumnFormat( ColumnTypeEnum.Margin, false, "", "" );
            columns.Bound( x => x.Box.Price ).GetColumnFormat( ColumnTypeEnum.Money, false, "", "" );

            columns.Bound( x => x.Box.DepositorySettled ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(Box.DepositorySettled)#", "" ).Hidden();
            columns.Bound( x => x.Box.DepositorySettledAmt ).GetColumnFormat( ColumnTypeEnum.Money, true, "#=GetMoneyDirection(Box.DepositorySettledAmt)#", "" ).Hidden();
            columns.Bound( x => x.Box.OccEligibleCheck ).GetColumnFormat( ColumnTypeEnum.String, false, "<input disabled type='checkbox'   #= (Box.OccEligibleCheck) ? checked ='checked' : '' #/>", "" );
            columns.Bound( x => x.Box.EquityFloat ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(Box.EquityFloat)#", "" ).Hidden();
            columns.Bound( x => x.Box.TradedVolume ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(Box.TradedVolume)#", "" ).Hidden();
            columns.Bound( x => x.Box.SharesOutstanding ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(Box.SharesOutstanding)#", "" ).Hidden();
            columns.Bound( x => x.Box.IntradayLendingRate ).GetColumnFormat( ColumnTypeEnum.Rate, false, "#=GetRateDirection(Box.IntradayLendingRate)#", "" );
            columns.Bound( x => x.Box.RiskBasedHairCut ).GetColumnFormat( ColumnTypeEnum.Rate, false, "#=GetRateNullableDirection(Box.RiskBasedHairCut)#", "" );

            columns.Bound( x => x.Box.CustomerBankLoanPositionSettled ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(Box.CustomerBankLoanPositionSettled)#", "" );
            columns.Bound( x => x.Box.CustomerBankLoanPositionSettledAmt ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetMoneyDirection(Box.CustomerBankLoanPositionSettledAmt)#", "" );

            columns.Bound( x => x.Box.FirmBankLoanPositionSettled ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(Box.FirmBankLoanPositionSettled)#", "" );
            columns.Bound( x => x.Box.FirmBankLoanPositionSettledAmt ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetMoneyDirection(Box.FirmBankLoanPositionSettledAmt)#", "" );

            columns.Bound( x => x.Box.OtherBankLoanPositionSettled ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(Box.OtherBankLoanPositionSettled)#", "" );
            columns.Bound( x => x.Box.OtherBankLoanPositionSettledAmt ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetMoneyDirection(Box.OtherBankLoanPositionSettledAmt)#", "" );


            columns.Bound( x => x.Box.PledgePullback ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(Box.PledgePullback)#", "" ).Hidden();
            columns.Bound( x => x.Box.PledgePullbackAmount ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetMoneyDirection(Box.PledgePullbackAmount)#", "" ).Hidden();

            columns.Bound( x => x.OptimizedSchedule ).GetColumnFormat( ColumnTypeEnum.String, true, "", "" );
            columns.Bound( x => x.OptimizedAmount ).GetColumnFormat( ColumnTypeEnum.Money, true, "#=GetMoneyDirection(OptimizedAmount)#", "" );
            columns.Bound( x => x.OptimizedDelta ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetMoneyDirection(OptimizedDelta)#", "" );
      
            columns.Bound( x => x.Box.DateTimeId ).GetColumnFormat( ColumnTypeEnum.Time, false, "", "" ).Hidden( true );
        } )
        .Resizable( cols => cols.Columns( bool.Parse( DataSystemValues.LoadSystemValue( "ResizeableGrid", "true" ) ) ) )
        .DataSource( dataSource => dataSource
        .Ajax()
        .PageSize( 25 )
        .ServerOperation( false )
        .Read( read => read
                            .Action( "Read_ScheduleBoxOptimization", "Schedule", new { area = "CashSourcing" } )
                 .Data( "additionalBoxCalculationData" ).Type( HttpVerbs.Post ) )
            .Events( events =>
                {
                    events.RequestStart( "onBoxRequestStart" );
                    events.RequestEnd( "onBoxRequestEnd" );
                } )
                   .Model( model =>
                    {
                        model.Id( x => x.Box.SecurityNumber );
                    } )
            .Aggregates( agg =>
            {
                agg.Add( x => x.Box.NetPositionSettled ).Sum();
                agg.Add( x => x.Box.ExcessPositionSettled ).Sum();

                agg.Add( x => x.Box.EquityFloat ).Sum();
                agg.Add( x => x.Box.TradedVolume ).Sum();
                agg.Add( x => x.Box.SharesOutstanding ).Sum();

                agg.Add( x => x.Box.DepositorySettled ).Sum();
                agg.Add( x => x.Box.DepositorySettledAmt ).Sum();


                agg.Add( x => x.Box.CustomerBankLoanPositionSettled ).Sum();
                agg.Add( x => x.Box.FirmBankLoanPositionSettled ).Sum();
                agg.Add( x => x.Box.OtherBankLoanPositionSettled ).Sum();

                agg.Add( x => x.Box.CustomerBankLoanPositionSettledAmt ).Sum();
                agg.Add( x => x.Box.FirmBankLoanPositionSettledAmt ).Sum();
                agg.Add( x => x.Box.OtherBankLoanPositionSettledAmt ).Sum();

                agg.Add( x => x.Box.PledgePullback ).Sum();
                agg.Add( x => x.Box.PledgePullbackAmount ).Sum();


                agg.Add( x => x.OptimizedAmount ).Sum();
                agg.Add( x => x.OptimizedDelta ).Sum();
            } )
           .Events( events => events.Error( "onBoxCalculationGridError" ) )
))




    @(Html.Kendo().ContextMenu()
.Name( "BoxCalculationContextMenu" )
.Orientation( ContextMenuOrientation.Vertical )
    .Target( "#BoxCalculationDetails" )
.Events( events => events.Select( "onBoxCalculationContextMenuSelect" ) )
.Items( items =>
{
    items.Add().Text( "Borrow" ).Enabled( SessionSecurityService.IsEditable( ManagerTask.EditSLContract ) );
    items.Add().Text( "Loan" ).Enabled( SessionSecurityService.IsEditable( ManagerTask.EditSLContract ) );
    items.Add().Text( "Return" ).Enabled( SessionSecurityService.IsEditable( ManagerTask.EditSLContract ) );
    items.Add().Text( "Recall" ).Enabled( SessionSecurityService.IsEditable( ManagerTask.EditSLContract ) );
    items.Add().Text( "Pledge" ).Enabled( SessionSecurityService.IsEditable( ManagerTask.ViewSLCashSourcingApp ) );
    items.Add().Text( "Release" ).Enabled( SessionSecurityService.IsEditable( ManagerTask.ViewSLCashSourcingApp ) );
    items.Add().Text( "Add To AutoBorrow" ).Enabled( SessionSecurityService.IsEditable( ManagerTask.EditSLAutoBorrow ) );
    items.Add().Separator( true );
    items.Add().Text( "Refresh Data" );
    items.Add().Text( "Unsort" );
    items.Add().Text( "Select All" );
    items.Add().Text( "Reset Filter" ).Enabled( true );
    items.Add().Text( "Reset Grid" ).Enabled( true );
    items.Add().Separator( true );
    items.Add().Text( "Copy" ).Enabled( true ).HtmlAttributes( new { ID = "BoxCalcButton" } );
    items.Add().Text( "Export To Excel" );
} ))

    <label id='BoxUpdateLastTime' class="k-header width100p text-right" ></label>

</div>