@using SLTrader.Models
@using SLTrader.Tools
<script type="text/javascript">
    var initalLoad = true;

    function loadData() {
        try {
            var startValue = new Date(window.localStorage['ProfitLossStartDate']);
            var stopValue = new Date(window.localStorage['ProfitLossStopDate']);
            var entity = window.localStorage['ProfitLossEntity'];

            if ((startValue != null) && (stopValue != null) && (entity != null)) {
                $('#PLSecurityStartDateCalander').data('kendoDatePicker').value(new Date(startValue));
                $('#PLSecurityStopDateCalander').data('kendoDatePicker').value(new Date(stopValue));
                $('#PLSecurityDropdownList').data('kendoDropDownList').value(entity);
            }
        }
        catch (err) {
            alert('document load ' + err.message);
        }
    }

    function additionalData() {
       
        if (initalLoad) {
            loadData();
          
            onChange();
        }

        var startdatepicker = $("#PLSecurityStartDateCalander").data("kendoDatePicker");
        var startvalue = kendo.toString(startdatepicker.value(), 'yyyy-MM-dd');
       
        var stopdatepicker = $("#PLSecurityStopDateCalander").data("kendoDatePicker");
        var stopvalue = kendo.toString(stopdatepicker.value(), 'yyyy-MM-dd');

        var entity = $("#PLSecurityDropdownList").data("kendoDropDownList").value();

        saveData();

        return {
            entity: entity,
            startDate: startvalue,
            stopDate: stopvalue,
        };
    }

    function onError(e) {
        alert(e.message);
    }

    function onChange() {
        $('#chart').data().kendoChart.dataSource.read();
        $('#chart').data().kendoChart.refresh();
    }

    function showProfitDetails(e) {

        var startdatepicker = $("#PLSecurityStartDateCalander").data("kendoDatePicker");
        var startvalue = kendo.toString(startdatepicker.value(), 'yyyy-MM-dd');

        var stopdatepicker = $("#PLSecurityStopDateCalander").data("kendoDatePicker");
        var stopvalue = kendo.toString(stopdatepicker.value(), 'yyyy-MM-dd');

        var entity = $("#PLSecurityDropdownList").data("kendoDropDownList").value();


        var wndProfit = $("#ProfitLossDetails").data("kendoWindow");
        wndProfit.center().open();

        wndProfit.refresh({
            url: "@Url.Action("ReadProfitWindow","ProfitLoss")",
            data: {
                startDate: startvalue,
                stopDate: stopvalue,
                entity: entity,
            }
        });
    }
</script>

<div class="k-block div-size progressbar">
<div class="k-header k-shadow div-header-size">@LabelHelper.Text("PLTrend")</div>

<div class="toolbar">
<table class="toolbar">
<tr>
<td class="no-margin">                       
@LabelHelper.Label("Start Date")
</td>
<td class="no-marginn">  
@(Html.Kendo().DatePicker()
.Name("PLSecurityStartDateCalander")                
.Format("yyyy-MM-dd")
.Value(DateTime.Today)
.HtmlAttributes(new { @class="Toolbar-Cell" })
.Events(events => events.Change("onChange")))
</td> 
<td class="no-margin">                       
@LabelHelper.Label("Stop Date")
</td>
<td class="no-margin">  
@(Html.Kendo().DatePicker()
.Name("PLSecurityStopDateCalander")                
.Format("yyyy-MM-dd")
.Value(DateTime.Today)
.HtmlAttributes(new { @class="Toolbar-Cell" })
.Events(events => events.Change("onChange")))
</td>       
<td class="no-margin">                         
@LabelHelper.Label("Entity")
</td>
<td class="no-margin">  
@(Html.Kendo().DropDownList()
.Name("PLSecurityDropdownList")
.HtmlAttributes(new { @class="Toolbar-Cell" })
.DataTextField("Custodian")
.DataValueField("CompanyId")
.OptionLabel("Empty List")
.Events(e => e.Change("onChange"))
.AutoBind(true)    
.DataSource(dataSource => dataSource
.Read(read => read
.Action("Read_EntityDropdown", "ContraEntity", new {area="DomesticTrading" })))
.SelectedIndex(0))
</td> 
</tr>
</table>               
</div>
 
 <div class="chart-wrapper" >
     <div id="chart-div">
     @(Html.Kendo().Chart<ProfitLossModel>()
        .Name("ProfitLossGrid")
        .Title("")
        .AutoBind(false)
        .Legend(legend => legend
            .Position(ChartLegendPosition.Top).Color("white")
        )
       .DataSource(ds => ds
            .Read(read => read
                .Action("GetProfitLossTrend", "ProfitLoss")
                .Data("additionalData"))
            .Events(events => events
                .RequestStart("onRequestStart")
                .RequestEnd("onRequestEnd"))
        )
        .ChartArea(x => x.Background("transparent"))
        .Series(series => {
            series.Area(model => model.TotalIncome).Name("Income").Color("lightblue");
        })
        .CategoryAxis(axis => axis
            .Categories(model => model.EffectiveDate)
            .Labels(labels => labels.Rotation(-45).Color("white").Background("transparent").Color("white"))
        )
        .ValueAxis(axis => axis.Numeric()
            .Labels(labels => labels.Format("{0:N0}"))
            .MajorUnit(10000)
            .Color("white")
        )
        .Tooltip(tooltip => tooltip
            .Visible(true)
            .Format("{0:N0}")
        )
    ) 
         </div>
</div>
</div>


