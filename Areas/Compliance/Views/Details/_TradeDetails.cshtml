@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools

<script type="text/javascript">
    $('#SharedLabelCheckBox').change(function () {
        RefreshGrid("#TradeDetailGrid");
    });

    function onTradeDetailCheckData() {
        CheckGridData('#TradeDetailGrid');
    }

    function additionalTradeDetailData() {
        var datepicker = $("#TradeDetailCalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entity = $("#TradeDetailDropdownList").data("kendoDropDownList").value();

        return {
            effectiveDate: value,
            entityId: entity
        };
    }

    function onTradeDetailDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function(valid) {
                    userPreference = valid;

                    var dropdownList = $('#TradeDetailDropdownList').data("kendoDropDownList");

                    dropdownList.select(function(dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $('#TradeDetailGrid').data("kendoGrid").dataSource.read();
                },
                error: function(valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onTradeDetailError(e) {
        DisplayControllerError(e);
    }

    function onTradeDetailChange() {
        $("#TradeDetailGrid").data("kendoGrid").dataSource.read();
    }

    function onTradeDetailRowChange(e) {
        e.preventDefault();

        try {
            var entityGrid = $("#TradeDetailGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            var entityId = selectedItem["EntityId"];
            var effectiveDate = selectedItem["EffectiveDate"];
            var securityNumber = selectedItem["SecurityNumber"];
            var issueId = selectedItem["IssueId"];


            UpdateIssue( entityId, securityNumber);
            UpdateBox(effectiveDate, entityId, issueId);
            UpdateTrading(entityId, issueId);
            UpdateSharedView(effectiveDate, entityId, securityNumber);
        }
        catch (e) {
            console.log(e.message);
        }
    }

    $(document).ready(function () {
        kendo.ui.Grid.fn.options.columnMenuInit = function (e) {
            var menu = e.container.find(".k-menu").data("kendoMenu");
            menu.bind('activate', function (e) {
                if (e.item.is('.k-filter-item')) {
                    // if an element in the submenu is focused first, the issue is not observed
                    e.item.find('span.k-dropdown.k-header').first().focus();
                    // e.item.find('input').first().focus();
                }
            });
        };
    });
</script>

@(
 Html.Kendo().ToolBar()
    .Name("TradeDetailToolBar")
    .Resizable(true)
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("EffectiveDate").ToHtmlString());

        items.Add().Template(Html.Kendo().DatePicker()
                                .Name("TradeDetailCalander")
                                .Format("yyyy-MM-dd")
                                .HtmlAttributes(new { @class = "width90" })
                                .Value(DateTime.Now)
                                .Events(events => events.Change("onTradeDetailChange")).ToHtmlString());

        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
        items.Add().Template(Html.Kendo().DropDownList()
                            .Name("TradeDetailDropdownList")
                            .HtmlAttributes(new { @class = "width90" })
                            .DataTextField("Custodian")
                            .DataValueField("CompanyId")
                            .OptionLabel(LabelHelper.Text("OptionLabel"))
                            .AutoBind(true)
                            .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                            .Events(events => events.Change("onTradeDetailChange").DataBound("onTradeDetailDefaultLoad").Open("onContraEntityAutoCompleteResize"))
                            .DataSource(dataSource => dataSource
                            .Read(read => read
                            .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                            .SelectedIndex(0).ToHtmlString());
    }))

<hr class="hr-white">

<div id="TradeDetailContent" class="grid-div">
    @(
 Html.Kendo().Grid<BondFire.Entities.Projections.SL_TradeDetailExtendedProjection>()
        .Name("TradeDetailGrid")
        .Sortable()
        .HtmlAttributes(new { @class = "grid" })
        .Scrollable(x => x.Virtual(true))
        .Filterable()
        .NoRecords()
        .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
        .Navigatable()
        .Pageable(page =>
            {
                page.PreviousNext(false);
                page.Info(false);
                page.Input(false);
                page.Enabled(true);
                page.Numeric(false);     
            })
        .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
        .Events(events => events.DataBound("onTradeDetailCheckData").Change("onTradeDetailRowChange"))
        .Columns(cols =>
            {
                cols.Bound(x => x.EffectiveDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
                cols.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                cols.Bound(x => x.FirmId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.AccountNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.ShortName).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.AccountCategory).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.AccountType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.RecordType).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.IssueId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                cols.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.BuySellCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.Quantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(Quantity)#", "");
                cols.Bound(x => x.TradeDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
                cols.Bound(x => x.SettleDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
            })
         .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(100)
            .ServerOperation(false)
            .Events(events => events.Error("onTradeDetailError"))
            .Aggregates(agg =>
                {
                    agg.Add(x => x.Quantity).Sum();
                })
            .Read(read => read.Action("Read_TradeDetails", "Cns", new { area = "Compliance" }).Data("additionalTradeDetailData")))
    )
</div>




