@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools

<script type="text/javascript">
    $('#SharedLabelCheckBox').change(function () {
        RefreshGrid("#CnsAccountGrid");
    });

    function onCnsAccountCheckData() {
        CheckGridData('#CnsAccountGrid');
    }

    function createCnsAccountData() {
        var entity = $("#CnsAccountDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity
        };
    }

    function additionalCnsAccountData() {
        var entity = $("#CnsAccountDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity
        };
    }

    function onCnsAccountDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function(valid) {
                    userPreference = valid;

                    var dropdownList = $('#CnsAccountDropdownList').data("kendoDropDownList");

                    dropdownList.select(function(dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $('#CnsAccountGrid').data("kendoGrid").dataSource.read();
                },
                error: function(valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onCnsAccountError(e) {
        DisplayControllerError(e);
    }

    function onCnsAccountChange() {
        $("#CnsAccountGrid").data("kendoGrid").dataSource.read();
    }

    $(document).ready(function () {
        kendo.ui.Grid.fn.options.columnMenuInit = function (e) {
            var menu = e.container.find(".k-menu").data("kendoMenu");
            menu.bind('activate', function (e) {
                if (e.item.is('.k-filter-item')) {
                    // if an element in the submenu is focused first, the issue is not observed
                    e.item.find('span.k-dropdown.k-header').first().focus();
                    // e.item.find('input').first().focus();
                }
            });
        };
    });
</script>

@(
 Html.Kendo().ToolBar()
    .Name("CnsAccountToolBar")
    .Resizable(true)
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
        items.Add().Template(Html.Kendo().DropDownList()
                            .Name("CnsAccountDropdownList")
                            .HtmlAttributes(new { @class = "width90" })
                            .DataTextField("Custodian")
                            .DataValueField("CompanyId")
                            .OptionLabel(LabelHelper.Text("OptionLabel"))
                            .AutoBind(true)
                            .Events(events => events.Change("onCnsAccountChange").DataBound("onCnsAccountDefaultLoad").Open("onContraEntityAutoCompleteResize"))
                            .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                            .DataSource(dataSource => dataSource
                            .Read(read => read
                            .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                            .SelectedIndex(0).ToHtmlString());
    }))

<hr class="hr-white">

<div id="CnsAccountContent" class="grid-div">
    @(
 Html.Kendo().Grid<SL_CnsAccount>()
        .Name("CnsAccountGrid")
        .Sortable()
        .HtmlAttributes(new { @class = "grid" })
        .Scrollable()
        .Filterable()
        .NoRecords()
        .Editable(e => e.Mode(GridEditMode.InLine).Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLBuyInAllocation)))
        .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
        .Navigatable()
        .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
        .Events(events => events.DataBound("onCnsAccountCheckData"))
        .ToolBar(toolbar => toolbar.Create())
        .Columns(columns =>
            {
                columns.Bound(x => x.SLCnsAccount).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                columns.Bound(x => x.AccountNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound(x => x.AccountSubCategoryId).GetColumnFormat(ColumnTypeEnum.String, false, "", "_CnsAccountSubCategoryDropdown");
                columns.Command(x =>
                    {
                        if (SessionSecurityService.IsEditable(ManagerTask.EditSLRule))
                        {
                            x.Edit();                      
                            x.Destroy();
                        }
                    });
            })
         .DataSource(dataSource => dataSource
            .Ajax()
            .Events(events => events.Error("onCnsAccountError"))
            .Read(read => read.Action("Read_CnsAccount", "Cns", new { area = "Compliance" }).Data("additionalCnsAccountData"))
                .Update(update => update.Action("Update_CnsAccount", "Cns", new { area = "Compliance" }))
                .Destroy(destroy => destroy.Action("Delete_CnsAccount", "Cns", new { area = "Compliance" }))
                .Create(create => create.Action("Create_CnsAccount", "Cns", new { area = "Compliance" }).Data("additionalCnsAccountData"))
            .Model(model =>
            {
                model.Id(x => x.SLCnsAccount);
                model.Field(x => x.EntityId).Editable(false);
                model.Field(x => x.AccountNumber).Editable(true);                
                model.Field(x => x.AccountSubCategoryId).DefaultValue(SL_AccountSubCategory.MMKR);
            }))
    )
</div>


