@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools


<script type="text/javascript">
    $('#SharedLabelCheckBox').change(function () {
        RefreshGrid("#CnsExclusionListGrid");
    });

    function onCnsExclusionListCheckData() {
        CheckGridData('#CnsExclusionListGrid');
    }

    function createCnsExclusionListData() {
        var entity = $("#CnsExclusionListDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity
        };
    }

    function additionalCnsExclusionListData() {
        var entity = $("#CnsExclusionListDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity
        };
    }

    function onCnsExclusionListDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function(valid) {
                    userPreference = valid;

                    var dropdownList = $('#CnsExclusionListDropdownList').data("kendoDropDownList");

                    dropdownList.select(function(dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $('#CnsExclusionListGrid').data("kendoGrid").dataSource.read();
                },
                error: function(valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onCnsExclusionListError(e) {
        DisplayControllerError(e);
    }

    function onCnsExclusionListChange() {
        $("#CnsExclusionListGrid").data("kendoGrid").dataSource.read();
    }

    function onCnsExclusionContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case "Cancel Exclusion":
                onCnsExclusionListRemove();
                break;
        }
    }

    function onCnsExclusionListAdd(e) {
        if (e) {
            var entity = $("#CnsExclusionListDropdownList").data("kendoDropDownList").value();

            var dataItems = [];

            HelperPartialWindow(
                JSON.stringify({
                    entityId: entity
                }),
                'Add Security',
                1100,
                450,
                '/Compliance/Cns/LoadCnsExclusionListAdd'
            );
        }
    }


    function onCnsExclusionListRemove() {
        try {
            var entityGrid = $("#CnsExclusionListGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            $.ajax({
                url: '@Url.Action("Remove_CnsExclusionList", "Cns", new {area="Compliance" })',
                type: 'POST',
                data: JSON.stringify({
                    item: selectedItem
                }),
                contentType: 'application/json;',
                success: function (valid) {                  
                    $('#CnsExclusionListGrid').data("kendoGrid").dataSource.read();
                },
                error: function (valid) {
                  
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    $(document).ready(function () {
        kendo.ui.Grid.fn.options.columnMenuInit = function (e) {
            var menu = e.container.find(".k-menu").data("kendoMenu");
            menu.bind('activate', function (e) {
                if (e.item.is('.k-filter-item')) {
                    // if an element in the submenu is focused first, the issue is not observed
                    e.item.find('span.k-dropdown.k-header').first().focus();
                    // e.item.find('input').first().focus();
                }
            });
        };
    });
</script>

@(
 Html.Kendo().ToolBar()
    .Name("CnsExclusionListToolBar")
    .Resizable(true)
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
        items.Add().Template(Html.Kendo().DropDownList()
                            .Name("CnsExclusionListDropdownList")
                            .HtmlAttributes(new { @class = "width90" })
                            .DataTextField("Custodian")
                            .DataValueField("CompanyId")
                            .OptionLabel(LabelHelper.Text("OptionLabel"))
                            .AutoBind(true)
                            .Events(events => events.Change("onCnsExclusionListChange").DataBound("onCnsExclusionListDefaultLoad").Open("onContraEntityAutoCompleteResize"))
                            .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                            .DataSource(dataSource => dataSource
                            .Read(read => read
                            .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                            .SelectedIndex(0).ToHtmlString());

        items.Add().Template(Html.Kendo().Button().Name("CnsExclusionListAddButton").Enable(true).Events(x => x.Click("onCnsExclusionListAdd")).Content(LabelHelper.Text("CnsExclusionListAddButton")).ToHtmlString());
    }))

<hr class="hr-white">

<div id="CnsExclusionListContent" class="grid-div">
    @(
 Html.Kendo().Grid<BondFire.Entities.Projections.SL_CnsExclusionListProjection>()
        .Name("CnsExclusionListGrid")
        .Sortable()
        .HtmlAttributes(new { @class = "grid" })
        .Scrollable()
        .Filterable()
        .NoRecords()       
        .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
        .Navigatable()
        .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
        .Events(events => events.DataBound("onCnsExclusionListCheckData"))
        .Columns(columns =>
        {
            columns.Bound(x => x.SLCnsExclusionList).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.IssueId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden();
            columns.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.StartDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
            columns.Bound(x => x.StopDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
            columns.Bound(x => x.Comment).GetColumnFormat(ColumnTypeEnum.String, false, "", "");          
        })
         .DataSource(dataSource => dataSource
            .Ajax()
            .Events(events => events.Error("onCnsExclusionListError"))
            .Model(model => model.Id(x => x.SLCnsExclusionList))
            .Read(read => read.Action("Read_CnsExclusionList", "Cns", new { area = "Compliance" }).Data("additionalCnsExclusionListData")))
    )
</div>

@(Html.Kendo().ContextMenu()
.Name("CnsExclusionListContextMenu")
.Orientation(ContextMenuOrientation.Vertical)
        .Target("#CnsExclusionListGrid")
    .Events(events => events.Select("onCnsExclusionContextMenuSelect"))
.Items(items =>
{
    items.Add().Text("Cancel Exclusion");
}))





