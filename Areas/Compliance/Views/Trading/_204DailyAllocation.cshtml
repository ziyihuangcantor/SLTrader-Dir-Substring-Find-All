@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools

<script type="text/javascript">
    var _cnsExposureSelectAll = false;
    var _originalCnsExposureGrid = null;

    $('#SharedLabelCheckBox').change(function () {
        RefreshGrid("#CnsExposureGrid");
    });

    $(document).ready(function () {
        kendo.ui.Grid.fn.options.columnMenuInit = function (e) {
            var menu = e.container.find(".k-menu").data("kendoMenu");
            menu.bind('activate', function (e) {
                if (e.item.is('.k-filter-item')) {
                    // if an element in the submenu is focused first, the issue is not observed
                    e.item.find('span.k-dropdown.k-header').first().focus();
                    // e.item.find('input').first().focus();
                }
            });
        };

        setTimeout(function () {
            _originalCnsExposureGrid = $('#CnsExposureGrid').data('kendoGrid').getOptions();

            LoadGridLayout("#CnsExposureGrid");
        }, 5);
    });


    function onCnsExposureCheckData() {
        CheckGridData('#CnsExposureGrid');
    }

    function additionalCnsExposureData() {
        var datepicker = $("#CnsExposureCalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entity = $("#CnsExposureDropdownList").data("kendoDropDownList").value();

        return {
            effectiveDate: value,
            entityId: entity
        };
    }

    function onCnsExposureDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function(valid) {
                    userPreference = valid;

                    var dropdownList = $('#CnsExposureDropdownList').data("kendoDropDownList");

                    dropdownList.select(function(dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $('#CnsExposureGrid').data("kendoGrid").dataSource.read();
                },
                error: function(valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onCnsExposureError(e) {
        DisplayControllerError(e);
    }

    function onCnsExposureChange() {
        $("#CnsExposureGrid").data("kendoGrid").dataSource.read();
    }

    function onCnsExposureRowChange(e) {
        e.preventDefault();

        try {
            var entityGrid = $("#CnsExposureGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            var entityId = selectedItem["EntityId"];
            var effectiveDate = selectedItem["EffectiveDate"];
            var securityNumber = selectedItem["SecurityNumber"];
            var issueId = selectedItem["IssueId"];

            SidePanelUpdate(effectiveDate, entityId, issueId, securityNumber);
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onCnsExposureContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case "Refresh Data":
                onCnsExposureChange();
                break;

            case "Reset Filter":
                ResetFilter("#CnsExposureGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#CnsExposureGrid");
                $('#CnsExposureGrid').data('kendoGrid').setOptions(_originalCnsExposureGrid);
                break;

            case "Unsort":
                onCnsExposureUnsortGrid("#CnsExposureGrid");
                break;

            case "Select All":
                cnsExposureSelectAll(true);
                break;

            case "Export To Excel":
                exportToCnsExposureExcel();
                break;

            case "AutoFit Columns":
                resizeGridColumns("#CnsExposureGrid");
                break;
            
        }
    }

    function onCnsExposureUnsortGrid(e) {
        UnsortGrid(e);
    }

    function exportToCnsExposureExcel() {
        try {
            KendoGridToCSVConvertor("#CnsExposureGrid", 'CnsExposureGrid', _cnsExposureSelectAll);

            _cnsExposureSelectAll = false;
        }
        catch (e) {
            console.log(e.message);
            console.log(e.message);
        }
    }

    function cnsExposureSelectAll(e) {
        try {
            var cnsExposureGrid = $("#CnsExposureGrid").data("kendoGrid");
            cnsExposureGrid.select(cnsExposureGrid.tbody.find(">tr"));

            _cnsExposureSelectAll = true;
        }
        catch (e) {
            console.log(e.message);
        }
    }
 
    function onCnsExposureGridLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#CnsExposureGrid");
        }, 5);
    }

    function onCnsExposureSearchChange(e) {
        e.preventDefault();

        try {
            var grid = $("#CnsExposureGrid").data("kendoGrid").dataSource;
          
            var cusipTextBox = document.getElementById("CnsExposureSecuritySearchTextBox").value;

            QuickColumnFilter(grid, 'Ticker', cusipTextBox);
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onCnsExposureQuickFilterDataBound() {
        $("#CnsExposureFilterDropdownList").data("kendoDropDownList").text('@LabelHelper.Text("OptionLabel")');
    }

    function onCnsExposureFilterLoad() {
        var entity = $("#CnsExposureDropdownList").data("kendoDropDownList");

        return {
            entityId: entity.value(),
            gridName: 'CnsExposureGrid'
        }
    }

    function onCnsExposureFilterChange() {
        try {
            var grid = $("#CnsExposureGrid").data("kendoGrid");
            var entityId = $("#CnsExposureDropdownList").data("kendoDropDownList").value();;
            var filterDropDown = $('#CnsExposureFilterDropdownList').data("kendoDropDownList").value();

            $.ajax({
                url: '/DomesticTrading/BoxCalculation/QuickFilterLookup',
                type: 'POST',
                data: JSON.stringify({
                    entityId: entityId,
                    gridName: 'CnsExposureGrid',
                    filterName: filterDropDown
                }),
                contentType: 'application/json;',
                success: function (valid) {

                    if (valid != null) {
                        $("#CnsExposureSecuritySearchTextBox").val("");

                        var filter = { logic: "and", filters: [] };

                        for (i = 0; i < valid.length; i++) {
                            var quickFilter = valid[i];
                            var ops = null;

                            if (quickFilter.OperatorId == 1) {
                                ops = '@SL_Operator.gte';
                            }
                            else if (quickFilter.OperatorId == 2) {
                                ops = '@SL_Operator.gt';
                            }
                            else if (quickFilter.OperatorId == 3) {
                                ops = '@SL_Operator.lt';
                            }
                            else if (quickFilter.OperatorId == 4) {
                                ops = '@SL_Operator.lte';
                            }
                            else if (quickFilter.OperatorId == 5) {
                                ops = '@SL_Operator.eq';
                            }
                            else if (quickFilter.OperatorId == 6) {
                                ops = '@SL_Operator.neq';
                            }

                            filter.filters.push({ field: quickFilter.Field, operator: ops, value: quickFilter.Value });
                        }

                        grid.dataSource.filter(filter);
                    }
                    else {
                        grid.dataSource.filter({});
                    }
                },
                error: function (valid) {
                    grid.dataSource.filter({});
                }
            })
        }
        catch (e) {
            console.log(e.message);
        }
    }

</script>

@(
 Html.Kendo().ToolBar()
    .Name("CnsExposureToolBar")
    .Resizable(true)
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("EffectiveDate").ToHtmlString());

        items.Add().Template(Html.Kendo().DatePicker()
                                .Name("CnsExposureCalander")
                                .Format("yyyy-MM-dd")
                                .HtmlAttributes(new { @class = "width90" })
                                .Value(DateTime.Now)
                                .Events(events => events.Change("onCnsExposureChange")).ToHtmlString());

        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
        items.Add().Template(Html.Kendo().DropDownList()
                            .Name("CnsExposureDropdownList")
                            .HtmlAttributes(new { @class = "width90" })
                            .DataTextField("Custodian")
                            .DataValueField("CompanyId")
                            .OptionLabel(LabelHelper.Text("OptionLabel"))
                            .AutoBind(true)
                            .Events(events => events.Change("onCnsExposureChange").DataBound("onCnsExposureDefaultLoad"))
                            .DataSource(dataSource => dataSource
                            .Read(read => read
                            .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                            .SelectedIndex(0).ToHtmlString());

        items.Add().Template( LabelHelper.Label( "QuickFilter" ).ToHtmlString() );

        items.Add().Template( Html.Kendo().DropDownList()
                    .Name( "CnsExposureFilterDropdownList" )
                    .HtmlAttributes( new { @class = "width90" } )
                    .OptionLabel( LabelHelper.Text( "OptionLabel" ) )
                    .Value( LabelHelper.Text( "OptionLabel" ) )
                    .AutoBind( false )
                    .Events( e => e.Change( "onCnsExposureFilterChange" ).DataBound( "onCnsExposureQuickFilterDataBound" ) )
                    .DataSource( dataSource => dataSource
                    .Events( events => events.Error( "onCnsExposureError" ) )
                    .Read( read => read.Action( "LoadFilters", "BoxCalculation", new { area = "DomesticTrading" } ).Data( "onCnsExposureFilterLoad" ) ) )
                    .ToHtmlString() );

        items.Add().Template(
           "<table><tr><td>" +
           LabelHelper.LabelFor( "TickerSearch", "CnsExposureSecuritySearchTextBox" ).ToHtmlString() + "</td><td>" +
           Html.Kendo().AutoComplete().Name( "CnsExposureSecuritySearchTextBox" ).HtmlAttributes( new { @class = "width90" } ).Events( eve => eve.Filtering( "onCnsExposureSearchChange" ) ).Suggest( true ).ToHtmlString() + "</td></tr></table>"
           ).HtmlAttributes( new { @class = "tickerSearch-Text" } );

    }))

<hr class="hr-white">

<div id="CnsExposureContent" class="grid-div">
    @(
 Html.Kendo().Grid<BondFire.Entities.Projections.SL_CnsExposureExtendedProjection>()
        .Name("CnsExposureGrid")
        .Sortable()
        .HtmlAttributes(new { @class = "grid" })
        .Scrollable( x => x.Virtual(true))
        .Filterable()
        .Reorderable(reorder =>
        {
            reorder.Columns( true );
        })
        .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple))
        .Navigatable()
                    .ColumnMenu( menu =>
                    {
                        menu.Columns( true );
                        menu.Filterable( true );
                        menu.Sortable( true );
                    } )
                .Events( events =>
                {
                    events.Change( "onCnsExposureRowChange" );
                    events.DataBound( "onCnsExposureCheckData" );
                    events.ColumnHide( "onCnsExposureGridLayoutChange" );
                    events.ColumnShow( "onCnsExposureGridLayoutChange" );
                    events.ColumnResize( "onCnsExposureGridLayoutChange" );
                    events.ColumnReorder( "onCnsExposureGridLayoutChange" );
                } )
        .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
        .Columns(columns =>
        {
            columns.Bound(x => x.EffectiveDate).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.IssueId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.MarketPrice).GetColumnFormat(ColumnTypeEnum.Money, false, "#=GetMoneyDirection(MarketPrice)#", "");

            columns.Bound( x => x.MarketMakerQty ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(MarketMakerQty)#", "" );
            columns.Bound( x => x.MarketMakerAmt ).GetColumnFormat( ColumnTypeEnum.Money, true, "#=GetMoneyDirection(MarketMakerAmt)#", "" );

            columns.Bound( x => x.NonMarketMakerQty ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(NonMarketMakerQty)#", "" );
            columns.Bound( x => x.NonMarketMakerAmt ).GetColumnFormat( ColumnTypeEnum.Money, true, "#=GetMoneyDirection(NonMarketMakerAmt)#", "" );
            
            columns.Bound( x => x.ExcessSettled ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(ExcessSettled)#", "" );

            columns.Bound( x => x.BorrowAttemptedQuantity ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(BorrowAttemptedQuantity)#", "" );
            columns.Bound(x => x.BorrowAttemptedAmount).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(BorrowAttemptedAmount)#", "");

            columns.Bound( x => x.BorrowMadeQuantity ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(BorrowMadeQuantity)#", "" );
            columns.Bound(x => x.BorrowMadeAmount).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetMoneyDirection(BorrowMadeAmount)#", "");

            columns.Bound( x => x.PendingLongSellQuantity ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(PendingLongSellQuantity)#", "" );
            columns.Bound( x => x.LoanQuantity ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(LoanQuantity)#", "" );
            columns.Bound( x => x.PendingLongSellRecallQuanitty ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(PendingLongSellRecallQuanitty)#", "" );

            columns.Bound( x => x.CnsFailToDeliverPositionSettled ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(CnsFailToDeliverPositionSettled)#", "" );
            columns.Bound( x => x.CnsFailToDeliverPositionSettledAmt ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetMoneyDirection(CnsFailToDeliverPositionSettledAmt)#", "" );
            columns.Bound( x => x.CnsFailToDeliverPositionSettledDayCount ).GetColumnFormat( ColumnTypeEnum.Position, false, "#=GetPositionDirection(CnsFailToDeliverPositionSettledDayCount)#", "" );
            columns.Bound( x => x.DvpFailToDeliverPositionSettled ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(DvpFailToDeliverPositionSettled)#", "" );
            columns.Bound( x => x.DvpFailToDeliverPositionSettledAmt ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetMoneyDirection(DvpFailToDeliverPositionSettledAmt)#", "" );
            columns.Bound( x => x.DvpFailToDeliverPositionSettledDayCount ).GetColumnFormat( ColumnTypeEnum.Position, false, "#=GetPositionDirection(DvpFailToDeliverPositionSettledDayCount)#", "" );
            columns.Bound( x => x.BrokerFailToDeliverPositionSettled ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(BrokerFailToDeliverPositionSettled)#", "" );
            columns.Bound( x => x.BrokerFailToDeliverPositionSettledAmt ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetMoneyDirection(BrokerFailToDeliverPositionSettledAmt)#", "" );
            columns.Bound( x => x.BrokerFailToDeliverPositionSettledDayCount ).GetColumnFormat( ColumnTypeEnum.String, false, "#=GetPositionDirection(BrokerFailToDeliverPositionSettledDayCount)#", "" );

            columns.Bound( x => x.CnsFailToRecievePositionSettled ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(CnsFailToRecievePositionSettled)#", "" );
            columns.Bound( x => x.CnsFailToRecievePositionSettledAmt ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetMoneyDirection(CnsFailToRecievePositionSettledAmt)#", "" );
            columns.Bound( x => x.CnsFailToRecievePositionSettledDayCount ).GetColumnFormat( ColumnTypeEnum.Position, false, "#=GetPositionDirection(CnsFailToRecievePositionSettledDayCount)#", "" );
            columns.Bound( x => x.DvpFailToRecievePositionSettled ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(DvpFailToRecievePositionSettled)#", "" );
            columns.Bound( x => x.DvpFailToRecievePositionSettledAmt ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetMoneyDirection(DvpFailToRecievePositionSettledAmt)#", "" );
            columns.Bound( x => x.DvpFailToRecievePositionSettledDayCount ).GetColumnFormat( ColumnTypeEnum.Position, false, "#=GetPositionDirection(DvpFailToRecievePositionSettledDayCount)#", "" );
            columns.Bound( x => x.BrokerFailToRecievePositionSettled ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(BrokerFailToRecievePositionSettled)#", "" );
            columns.Bound( x => x.BrokerFailToRecievePositionSettledAmt ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetMoneyDirection(BrokerFailToRecievePositionSettledAmt)#", "" );
            columns.Bound( x => x.BrokerFailToRecievePositionSettledDayCount ).GetColumnFormat( ColumnTypeEnum.String, false, "#=GetPositionDirection(BrokerFailToRecievePositionSettledDayCount)#", "" );
        })
         .DataSource(dataSource => dataSource
            .Ajax()
            .ServerOperation(false)
            .PageSize(50)
            .Events(events => events.Error("onCnsExposureError"))
            .Aggregates(agg =>
            {
                agg.Add( x => x.ExcessSettled ).Sum();

                agg.Add( x => x.NonMarketMakerQty ).Sum();
                agg.Add( x => x.NonMarketMakerAmt ).Sum();
              
                agg.Add( x => x.MarketMakerQty ).Sum();
                agg.Add( x => x.MarketMakerAmt ).Sum();
                                             
                agg.Add( x => x.BorrowAttemptedQuantity ).Sum();                
                agg.Add( x => x.BorrowMadeQuantity ).Sum();
              

                agg.Add(x => x.BorrowAttemptedAmount).Sum();
                agg.Add(x => x.BorrowMadeAmount).Sum();

                agg.Add( x => x.PendingLongSellQuantity ).Sum();
                agg.Add( x => x.PendingLongSellRecallQuanitty ).Sum();
                agg.Add( x => x.LoanQuantity ).Sum();

                agg.Add( x => x.CnsFailToDeliverPositionSettled ).Sum();
                agg.Add( x => x.CnsFailToDeliverPositionSettledAmt ).Sum();
                agg.Add( x => x.DvpFailToDeliverPositionSettled ).Sum();
                agg.Add( x => x.DvpFailToDeliverPositionSettledAmt ).Sum();
                agg.Add( x => x.BrokerFailToDeliverPositionSettled ).Sum();
                agg.Add( x => x.BrokerFailToDeliverPositionSettledAmt ).Sum();

                agg.Add( x => x.CnsFailToRecievePositionSettled ).Sum();
                agg.Add( x => x.CnsFailToRecievePositionSettledAmt ).Sum();
                agg.Add( x => x.DvpFailToRecievePositionSettled ).Sum();
                agg.Add( x => x.DvpFailToRecievePositionSettledAmt ).Sum();
                agg.Add( x => x.BrokerFailToRecievePositionSettled ).Sum();
                agg.Add( x => x.BrokerFailToRecievePositionSettledAmt ).Sum();
            })
            .Read(read => read.Action("Read_CnsExposure", "Cns", new { area = "Compliance" }).Data("additionalCnsExposureData")))
    )
</div>


@(Html.Kendo().ContextMenu()
.Name( "CnsExposureContextMenuSelect" )
.Orientation( ContextMenuOrientation.Vertical )
.Target( "#CnsExposureGrid" )
.Events( events => events.Select( "onCnsExposureContextMenuSelect" ) )
.Items( items =>
{
    items.Add().Text( "Refresh Data" );
    items.Add().Separator(true);
    items.Add().Text("AutoFit Columns");
    items.Add().Text("Unsort");
    items.Add().Text( "Reset Filter" );
    items.Add().Text( "Reset Grid" );
    items.Add().Separator(true);
    items.Add().Text( "Select All" );
    items.Add().Text( "Export To Excel" );
} ))


