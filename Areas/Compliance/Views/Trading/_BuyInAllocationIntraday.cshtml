@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools

<script type="text/javascript">

    var _cnsBuyInIntradaySelectAll = false;
    var _originalBuyInAllocationIintradayGrid = null;


    $('#SharedLabelCheckBox').change(function () {
        RefreshGrid("#CnsBuyInIntradayGrid");
    });

    $(document).ready(function () {
        kendo.ui.Grid.fn.options.columnMenuInit = function (e) {
            var menu = e.container.find(".k-menu").data("kendoMenu");
            menu.bind('activate', function (e) {
                if (e.item.is('.k-filter-item')) {
                    // if an element in the submenu is focused first, the issue is not observed
                    e.item.find('span.k-dropdown.k-header').first().focus();
                    // e.item.find('input').first().focus();
                }
            });
        };

        setTimeout(function () {
            _originalBuyInAllocationIintradayGrid = $('#CnsBuyInIntradayGrid').data('kendoGrid').getOptions();

            LoadGridLayout("#CnsBuyInIntradayGrid");
        }, 5);
    });

    function onCnsBuyInIntradayCheckData() {
        CheckGridData('#CnsBuyInIntradayGrid');
    }

    function onBuyInAllocationIntradayGridLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#CnsBuyInIntradayGrid");
        }, 5);
    }

    function additionalCnsBuyInData() {
        var datepicker = $("#CnsBuyInIntradayCalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entity = $("#CnsBuyInIntradayDropdownList").data("kendoDropDownList").value();
        var criteria = document.getElementById("CnsBuyInIntradaySecuritySearchTextBox").value;

        return {
            effectiveDate: value,
            entityId: entity,
            criteria: criteria
        };
    }

    function onCnsBuyInIntradayDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function(valid) {
                    userPreference = valid;

                    var dropdownList = $('#CnsBuyInIntradayDropdownList').data("kendoDropDownList");

                    dropdownList.select(function(dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $("#CnsBuyInIntradayGrid").data("kendoGrid").dataSource.read();
                },
                error: function(valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onCnsBuyInIntradayError(e) {
        DisplayControllerError(e);
    }

    function onCnsBuyInIntradayChange() {
        $("#CnsBuyInIntradayGrid").data("kendoGrid").dataSource.read();
    }

    function onCnsBuyInIntradayRowChange(e) {
        e.preventDefault();

        try {
            var entityGrid = $("#CnsBuyInIntradayGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            var entityId = selectedItem["EntityId"];
            var effectiveDate = selectedItem["EffectiveDate"];
            var securityNumber = selectedItem["SecurityNumber"];
            var issueId = selectedItem["IssueId"];


            UpdateIssue(entityId, securityNumber);
            UpdateBox(effectiveDate, entityId, issueId);
            UpdateTrading(entityId, issueId);
            UpdateSharedView(entityId, securityNumber);
        }
        catch (e) {
            console.log(e.message);
        }

        _cnsBuyInIntradaySelectAll = false;
    }


    function onCnsBuyInIntradaySecurityLookup(e) {
        $("#CnsBuyInIntradayGrid").data("kendoGrid").dataSource.read();
    }

    function onCnsBuyInIntradayContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case "Refresh Data":
                onCnsBuyInIntradayChange();
                break;

            case "Reset Filter":             
                ResetFilter("#CnsBuyInIntradayGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#CnsBuyInIntradayGrid");
                $('#CnsBuyInIntradayGrid').data('kendoGrid').setOptions(_originalBuyInAllocationIintradayGrid);		
                break;

            case "Unsort":
                onCnsBuyInIntradayUnsortGrid("#CnsBuyInIntradayGrid");
                break;

            case "Select All":
                cnsBuyInIntradaySelectAll(true);
                break;

            case "Export To Excel":
                exportToCnsBuyInIntradayExcel();
                break;

            case "AutoFit Columns":
                resizeGridColumns("#CnsBuyInIntradayGrid");
                break;
        }
    }

    function onCnsBuyInIntradayUnsortGrid(e) {
        UnsortGrid(e);
    }

    function exportToCnsBuyInIntradayExcel() {
        try {
            KendoGridToCSVConvertor("#CnsBuyInIntradayGrid", 'CnsBuyInIntradayGrid', _cnsBuyInIntradaySelectAll);

            _cnsBuyInIntradaySelectAll = false;
        }
        catch (e) {
            console.log(e.message);
            console.log(e.message);
        }
    }

    function cnsBuyInIntradaySelectAll(e) {
        try {
            var boxGrid = $("#CnsBuyInIntradayGrid").data("kendoGrid");
            boxGrid.select(boxGrid.tbody.find(">tr"));

            _cnsBuyInIntradaySelectAll = true;
        }
        catch (e) {
            console.log(e.message);
        }
    }

 function onCnsBuyInIntradaySearchChange(e) {
        e.preventDefault();

        try {
            var grid = $("#CnsBuyInIntradayGrid").data("kendoGrid").dataSource;
          
            var cusipTextBox = document.getElementById("CnsBuyInIntradaySecuritySearchTextBox").value;

            QuickColumnFilter(grid, 'Ticker', cusipTextBox);
        }
        catch (e) {
            console.log(e.message);
        }
    }

</script>

@(
 Html.Kendo().ToolBar()
    .Name("CnsBuyInIntradayToolBar")
    .Resizable(true)
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("EffectiveDate").ToHtmlString());

        items.Add().Template(Html.Kendo().DatePicker()
                                .Name("CnsBuyInIntradayCalander")
                                .Format("yyyy-MM-dd")
                                .HtmlAttributes(new { @class = "width90" })
                                .Value(DateTime.Now)
                                .Events(events => events.Change("onCnsBuyInIntradayChange")).ToHtmlString());

        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
        items.Add().Template(Html.Kendo().DropDownList()
                            .Name("CnsBuyInIntradayDropdownList")
                            .HtmlAttributes(new { @class = "width90" })
                            .DataTextField("Custodian")
                            .DataValueField("CompanyId")
                            .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                            .OptionLabel(LabelHelper.Text("OptionLabel"))
                            .AutoBind(true)
                            .Events(events => events.DataBound("onCnsBuyInIntradayDefaultLoad").Open("onContraEntityAutoCompleteResize").Change("onCnsBuyInIntradayChange"))
                            .DataSource(dataSource => dataSource
                            .Read(read => read
                            .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                            .SelectedIndex(0).ToHtmlString());

        items.Add().Template(
          "<table><tr>" +
          "<td>" + LabelHelper.LabelFor("TickerSearch", "CnsBuyInIntradaySecuritySearchTextBox").ToHtmlString() + "</td>" +
          "<td>" + Html.Kendo().AutoComplete().Name("CnsBuyInIntradaySecuritySearchTextBox").HtmlAttributes(new { @class = "width90" }).Events( eve => eve.Filtering("onCnsBuyInIntradaySearchChange") ).Suggest( true ).ToHtmlString() + "</td>" + "</tr></table>"                    
          ).HtmlAttributes(new { @class= "tickerSearch-Text" });  
    }))

<hr class="hr-white">

<div id="CnsBuyInContent" class="grid-div">
    @(
 Html.Kendo().Grid<BondFire.Entities.Projections.SL_CnsBuyInAllocationIntradaySummaryProjection>()
        .Name("CnsBuyInIntradayGrid")
        .Sortable()
        .HtmlAttributes(new { @class = "grid" })
        .Scrollable(scroll =>
        {
            scroll.Virtual(true);
        })
        .Filterable()
        .Pageable(page =>
        {
            page.PageSizes(false);
            page.Enabled(true);
            page.Numeric(false);
            page.PreviousNext(false);
            page.Info(false);
        })
        .AutoBind(true)
        .Reorderable(reorder => reorder.Columns(true))
        .ColumnMenu(menu =>
        {
            menu.Columns(true);
            menu.Filterable(true);
            menu.Sortable(true);
        })
            .Events(events =>
            {
                events.Change("onCnsBuyInIntradayRowChange");
                events.DataBound("onCnsBuyInIntradayCheckData");
                events.ColumnHide("onBuyInAllocationIntradayGridLayoutChange");
                events.ColumnShow("onBuyInAllocationIntradayGridLayoutChange");
                events.ColumnResize("onBuyInAllocationIntradayGridLayoutChange");
                events.ColumnReorder("onBuyInAllocationIntradayGridLayoutChange");
            })
        .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple))
        .Navigatable()
        .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
        .Columns(columns =>
        {
            columns.Bound(x => x.EffectiveDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
            columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.IssueId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
            columns.Bound(x => x.AccountNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.AccountSubCategoryId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
            columns.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");

            columns.Bound(x => x.NetBalance).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(NetBalance)#", "");
            columns.Bound(x => x.NetBalanceAge).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(NetBalanceAge)#", "");
            columns.Bound(x => x.NetBalanceIntraday).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(NetBalanceIntraday)#", "");

            columns.Bound(x => x.NetStockBorrow).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(NetStockBorrow)#", "");
            columns.Bound(x => x.NetStockBorrowIntraday).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(NetStockBorrowIntraday)#", "");

            columns.Bound(x => x.AccountExposure).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(AccountExposure)#", "");
            columns.Bound(x => x.AccountExposureAge).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(AccountExposureAge)#", "");
            columns.Bound(x => x.AccountExposureIntraday).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(AccountExposureIntraday)#", "");

            columns.Bound(x => x.CnsSettledFtdCurrent).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(CnsSettledFtdCurrent)#", "");
            columns.Bound(x => x.CnsFtdDC).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(CnsFtdDC)#", "");
            columns.Bound(x => x.CnsSettledFtrCurrent).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(CnsSettledFtrCurrent)#", "");

            columns.Bound(x => x.DvpSettledFtdCurrent).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(DvpSettledFtdCurrent)#", "");
            columns.Bound(x => x.DvpFtdDC).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(DvpFtdDC)#", "");
            columns.Bound(x => x.DvpSettledFtrCurrent).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(DvpSettledFtrCurrent)#", "");

            columns.Bound(x => x.BrokerSettledFtdCurrent).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(BrokerSettledFtdCurrent)#", "");
            columns.Bound(x => x.BrokerFtdDC).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(BrokerFtdDC)#", "");
            columns.Bound(x => x.BrokerSettledFtrCurrent).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(BrokerSettledFtrCurrent)#", "");
        })
         .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(100)
            .ServerOperation(false)
            .Events(events => events.Error("onCnsBuyInIntradayError"))
            .Aggregates(agg =>
            {
                agg.Add( x => x.NetBalance ).Sum();
                agg.Add(x => x.NetBalanceIntraday).Sum();

                agg.Add( x => x.NetStockBorrow).Sum();
                agg.Add(x => x.NetStockBorrowIntraday).Sum();

                agg.Add(x => x.AccountExposure).Sum();
                agg.Add(x => x.AccountExposureIntraday).Sum();

                agg.Add(x => x.CnsSettledFtdCurrent).Sum();
                agg.Add( x => x.CnsSettledFtrCurrent ).Sum();

                agg.Add( x => x.DvpSettledFtdCurrent ).Sum();
                agg.Add( x => x.DvpSettledFtrCurrent ).Sum();

                agg.Add( x => x.BrokerSettledFtdCurrent ).Sum();
                agg.Add( x => x.BrokerSettledFtrCurrent ).Sum();

            }).Sort(sort =>
            {
                sort.Add( "EffectiveDate" ).Ascending();
            })
                .Read(read => read.Action("Read_CnsBuyInAllocationIntradaySummary", "Cns", new { area = "Compliance" }).Data("additionalCnsBuyInData")))
    )
</div>


@(Html.Kendo().ContextMenu()
.Name("BuyInAllocationIntradayContextMenu")
.Orientation(ContextMenuOrientation.Vertical)
        .Target("#CnsBuyInIntradayGrid")
    .Events(events => events.Select("onCnsBuyInIntradayContextMenuSelect"))
.Items(items =>
{
    items.Add().Text("Refresh Data");
    items.Add().Separator(true);
    items.Add().Text("AutoFit Columns");
    items.Add().Text("Unsort");
    items.Add().Text( "Reset Filter" );
    items.Add().Text( "Reset Grid" );
    items.Add().Separator(true);
    items.Add().Text("Select All");
    items.Add().Text("Export To Excel");
}))
