@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools

<script type="text/javascript">

    var _cnsBuyInSelectAll = false;
    var _originalBuyInAllocationGrid = null;


    $('#SharedLabelCheckBox').change(function () {
        RefreshGrid("#CnsBuyInGrid");
    });

    $(document).ready(function () {
        kendo.ui.Grid.fn.options.columnMenuInit = function (e) {
            var menu = e.container.find(".k-menu").data("kendoMenu");
            menu.bind('activate', function (e) {
                if (e.item.is('.k-filter-item')) {
                    // if an element in the submenu is focused first, the issue is not observed
                    e.item.find('span.k-dropdown.k-header').first().focus();
                    // e.item.find('input').first().focus();
                }
            });
        };

        setTimeout(function () {
            _originalBuyInAllocationGrid = $('#CnsBuyInGrid').data('kendoGrid').getOptions();

            LoadGridLayout("#CnsBuyInGrid");
        }, 5);
    });

    function onCnsBuyInCheckData() {
        CheckGridData('#CnsBuyInGrid');
    }

    function onBuyInAllocationGridLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#CnsBuyInGrid");
        }, 5);
    }

    function additionalCnsBuyInData() {
        var datepicker = $("#CnsBuyInCalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entity = $("#CnsBuyInDropdownList").data("kendoDropDownList").value();
        var criteria = document.getElementById("CnsBuyInSecuritySearchTextBox").value;

        return {
            effectiveDate: value,
            entityId: entity,
            criteria: criteria
        };
    }

    function onCnsBuyInDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function(valid) {
                    userPreference = valid;

                    var dropdownList = $('#CnsBuyInDropdownList').data("kendoDropDownList");

                    dropdownList.select(function(dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });
                },
                error: function(valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onCnsBuyInError(e) {
        DisplayControllerError(e);
    }

    function onCnsBuyInChange() {
        $("#CnsBuyInGrid").data("kendoGrid").dataSource.read();
    }

    function onCnsBuyInRowChange(e) {
        e.preventDefault();

        try {
            var entityGrid = $("#CnsBuyInGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            var entityId = selectedItem["EntityId"];
            var effectiveDate = selectedItem["EffectiveDate"];
            var securityNumber = selectedItem["SecurityNumber"];
            var issueId = selectedItem["IssueId"];

            SidePanelUpdate(effectiveDate, entityId, issueId, securityNumber);
        }
        catch (e) {
            console.log(e.message);
        }

        _cnsBuyInSelectAll = false;
    }


    function onCnsBuyInSecurityLookup(e) {
        $("#CnsBuyInGrid").data("kendoGrid").dataSource.read();
    }

    function onCnsBuyInContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case "Refresh Data":
                onCnsBuyInChange();
                break;

            case "Reset Filter":             
                ResetFilter("#CnsBuyInGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#CnsBuyInGrid");
                $('#CnsBuyInGrid').data('kendoGrid').setOptions(_originalBuyInAllocationGrid);
                break;

            case "Unsort":
                onCnsBuyInUnsortGrid("#CnsBuyInGrid");
                break;

            case "Select All":
                cnsBuyInSelectAll(true);
                break;

            case "Export To Excel":
                exportToCnsBuyInExcel();
                break;

            case "AutoFit Columns":
                resizeGridColumns("#CnsBuyInGrid");
                break;
            
        }
    }

    function onCnsBuyInUnsortGrid(e) {
        UnsortGrid(e);
    }

    function exportToCnsBuyInExcel() {
        try {
            KendoGridToCSVConvertor("#CnsBuyInGrid", 'CnsBuyInGrid', _cnsBuyInSelectAll);

            _cnsBuyInSelectAll = false;
        }
        catch (e) {
            console.log(e.message);
            console.log(e.message);
        }
    }

    function cnsBuyInSelectAll(e) {
        try {
            var boxGrid = $("#CnsBuyInGrid").data("kendoGrid");
            boxGrid.select(boxGrid.tbody.find(">tr"));

            _cnsBuyInSelectAll  = true;
        }
        catch (e) {
            console.log(e.message);
        }
    }
</script>

@(
 Html.Kendo().ToolBar()
    .Name("CnsBuyInToolBar")
    .Resizable(true)
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("EffectiveDate").ToHtmlString());

        items.Add().Template(Html.Kendo().DatePicker()
                                .Name("CnsBuyInCalander")
                                .Format("yyyy-MM-dd")
                                .HtmlAttributes(new { @class = "width90" })
                                .Value(DateTime.Now)
                                .Events(events => events.Change("onCnsBuyInChange")).ToHtmlString());

        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
        items.Add().Template(Html.Kendo().DropDownList()
                            .Name("CnsBuyInDropdownList")
                            .HtmlAttributes(new { @class = "width90" })
                            .DataTextField("Custodian")
                            .DataValueField("CompanyId")
                            .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                            .OptionLabel(LabelHelper.Text("OptionLabel"))
                            .AutoBind(true)
                            .Events(events => events.DataBound("onCnsBuyInDefaultLoad").Open("onContraEntityAutoCompleteResize"))
                            .DataSource(dataSource => dataSource
                            .Read(read => read
                            .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                            .SelectedIndex(0).ToHtmlString());

        items.Add().Template(
          "<table><tr>" +
          "<td>" + LabelHelper.LabelFor("TickerSearch", "CnsBuyInSecuritySearchTextBox").ToHtmlString() + "</td>" +
          "<td>" + Html.Kendo().AutoComplete().Name("CnsBuyInSecuritySearchTextBox").HtmlAttributes(new { @class = "width90" }).ToHtmlString() + "</td>" +
          "<td>" + Html.Kendo().Button().Name("CnsBuyInSecurityLookupButton").Content("<i class='fa fa-search fa-1x'></i>").Events(ev => ev.Click("onCnsBuyInSecurityLookup")).ToHtmlString() + "</td>" + "</tr></table>"
          ).HtmlAttributes(new { @class = "tickerSearch-Text" });
    }))

<hr class="hr-white">

<div id="CnsBuyInContent" class="grid-div">
    @(
 Html.Kendo().Grid<BondFire.Entities.Projections.SL_CnsBuyInAllocationProjection>()
        .Name("CnsBuyInGrid")
        .Sortable()
        .HtmlAttributes(new { @class = "grid" })
        .Scrollable(scroll =>
            {
                scroll.Virtual(true);
            })
        .Filterable()
        .Pageable(page =>
        {
            page.PageSizes(false);
            page.Enabled(true);
            page.Numeric(false);
            page.PreviousNext(false);
            page.Info(false);
        })
        .AutoBind(false)
        .Reorderable(reorder => reorder.Columns(true))
        .ColumnMenu(menu =>
        {
            menu.Columns(true);
            menu.Filterable(true);
            menu.Sortable(true);
        })
            .Events(events =>
        {
            events.Change("onCnsBuyInRowChange");
            events.DataBound("onCnsBuyInCheckData");
            events.ColumnHide("onBuyInAllocationGridLayoutChange");
            events.ColumnShow("onBuyInAllocationGridLayoutChange");
            events.ColumnResize("onBuyInAllocationGridLayoutChange");
            events.ColumnReorder("onBuyInAllocationGridLayoutChange");
        })
        .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple))
        .Navigatable()
        .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
        .Columns(columns =>
            {
                columns.Bound(x => x.EffectiveDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "");
                columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                columns.Bound(x => x.IssueId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                columns.Bound(x => x.AccountNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound(x => x.AccountSubCategoryId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                columns.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                
                columns.Bound(x => x.TradedBalance).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(TradedBalance)#", "");                
                columns.Bound(x => x.SettledBalance).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(SettledBalance)#", "");
                columns.Bound(x => x.NetBalance).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(NetBalance)#", "");
                columns.Bound(x => x.NetStockBorrow).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(NetStockBorrow)#", "");
                columns.Bound(x => x.AccountExposure).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(AccountExposure)#", "");
			
		columns.Bound(x => x.TradedFirmBalance).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(TradedFirmBalance)#", "");
                
                columns.Bound(x => x.CloseOfBuisnessCnsFtd).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(CloseOfBuisnessCnsFtd)#", "");
                columns.Bound(x => x.LastActivityDate).GetColumnFormat(ColumnTypeEnum.Date, true, "", "");
                columns.Bound(x => x.NetBalanceAge).GetColumnFormat(ColumnTypeEnum.Position, false, "#=GetPositionDirection(NetBalanceAge)#", "");
                columns.Bound(x => x.CurrentNetCnsPosition).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(CurrentNetCnsPosition)#", "");
                
                columns.Bound(x => x.CnsSettledFtdCurrent).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(CnsSettledFtdCurrent)#", "");
                columns.Bound( x => x.CnsFtdDC ).GetColumnFormat( ColumnTypeEnum.Position, false, "#=GetPositionDirection(CnsFtdDC)#", "" );
                columns.Bound( x => x.CnsSettledFtrCurrent ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(CnsSettledFtrCurrent)#", "" );
                                
                columns.Bound( x => x.DvpSettledFtdCurrent ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(DvpSettledFtdCurrent)#", "" );
                columns.Bound( x => x.DvpFtdDC ).GetColumnFormat( ColumnTypeEnum.Position, false, "#=GetPositionDirection(DvpFtdDC)#", "" );
                columns.Bound( x => x.DvpSettledFtrCurrent ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(DvpSettledFtrCurrent)#", "" );

                columns.Bound( x => x.BrokerSettledFtdCurrent ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(BrokerSettledFtdCurrent)#", "" );
                columns.Bound( x => x.BrokerFtdDC ).GetColumnFormat( ColumnTypeEnum.Position, false, "#=GetPositionDirection(BrokerFtdDC)#", "" );
                columns.Bound( x => x.BrokerSettledFtrCurrent ).GetColumnFormat( ColumnTypeEnum.Position, true, "#=GetPositionDirection(BrokerSettledFtrCurrent)#", "" );
            })
         .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(100)
            .ServerOperation(false)
            .Events(events => events.Error("onCnsBuyInError"))           
            .Aggregates(agg =>
                {
                    agg.Add( x => x.TradedBalance ).Sum();
                    agg.Add(x => x.SettledBalance).Sum();
                    agg.Add( x => x.NetBalance ).Sum();
                    agg.Add( x => x.NetStockBorrow ).Sum();
                    agg.Add(x => x.AccountExposure).Sum();
                    agg.Add(x => x.TradedFirmBalance).Sum();                    
                    agg.Add(x => x.CloseOfBuisnessCnsFtd).Sum();                    
                    agg.Add(x => x.CurrentNetCnsPosition).Sum();

                    agg.Add(x => x.CnsSettledFtdCurrent).Sum();
                    agg.Add( x => x.CnsSettledFtrCurrent ).Sum();

                    agg.Add( x => x.DvpSettledFtdCurrent ).Sum();
                    agg.Add( x => x.DvpSettledFtrCurrent ).Sum();

                    agg.Add( x => x.BrokerSettledFtdCurrent ).Sum();
                    agg.Add( x => x.BrokerSettledFtrCurrent ).Sum();
                    
                }).Sort(sort =>
                    {
                        sort.Add( "EffectiveDate" ).Ascending();
                    })
                .Read(read => read.Action("Read_CnsBuyInAllocation", "Cns", new { area = "Compliance" }).Data("additionalCnsBuyInData")))
    )
</div>


@(Html.Kendo().ContextMenu()
.Name("BuyInAllocationContextMenu")
.Orientation(ContextMenuOrientation.Vertical)
        .Target("#CnsBuyInGrid")
    .Events(events => events.Select("onCnsBuyInContextMenuSelect"))
.Items(items =>
{
    items.Add().Text("Refresh Data");
    items.Add().Separator(true);
    items.Add().Text("AutoFit Columns");
    items.Add().Text("Unsort");
    items.Add().Text( "Reset Filter" );
    items.Add().Text( "Reset Grid" );
    items.Add().Separator(true);
    items.Add().Text("Select All");
    items.Add().Text("Export To Excel");
}))
