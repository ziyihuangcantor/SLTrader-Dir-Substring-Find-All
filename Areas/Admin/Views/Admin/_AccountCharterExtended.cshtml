@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools

<script type="text/javascript">   
    var _accountCharterExtendedSelectAll = false;

    function onAccountCharterExtendedCheckData() {
        CheckGridData('#AccountCharterExtendedListGrid');
        resizeGridColumns("#AccountCharterExtendedListGrid");
    }

    function onRuleError(e) {
        DisplayControllerError(e);
    }

    function additionalAccountCharterExtendedData() {
        var entity = $("#AccountCharterExtendedDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity
        };
    }


    function onAccountCharterExtendedDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    userPreference = valid;

                    var dropdownList = $('#AccountCharterExtendedDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $('#AccountCharterExtendedListGrid').data("kendoGrid").dataSource.read();
                    
                },
                error: function (valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onAccountCharterExtendedChange() {
        $("#AccountCharterExtendedListGrid").data("kendoGrid").dataSource.read();
    }

    $(document).ready(function () {
        kendo.ui.Grid.fn.options.columnMenuInit = function (e) {
            var menu = e.container.find(".k-menu").data("kendoMenu");
            menu.bind('activate', function (e) {
                if (e.item.is('.k-filter-item')) {
                    // if an element in the submenu is focused first, the issue is not observed
                    e.item.find('span.k-dropdown.k-header').first().focus();
                    // e.item.find('input').first().focus();
                }
            });
        };
    });

    function onAccountCharterExtendedListContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {

            case 'Select All':
                onAccountCharterExtendedListSelectAll(true);
                break;

            case 'Export To Excel':
                KendoGridToCSVConvertor("#AccountCharterExtendedListGrid", 'AccountCharterExtendedListGrid', _accountCharterExtendedSelectAll);
                break;
        }
    }

    function onAccountCharterExtendedListSelectAll() {
        try {
            var contractBreakOutGrid = $("#AccountCharterExtendedListGrid").data("kendoGrid");
            contractBreakOutGrid.select(contractBreakOutGrid.tbody.find(">tr"));

            _accountCharterExtendedSelectAll = true;
        } catch (e) {
            console.log(e.message);
        }
    }

</script>

@(
 Html.Kendo().ToolBar()
    .Name("AccountCharterExtendedToolBar")
    .Resizable(true)
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
        items.Add().Template(Html.Kendo().DropDownList()
                            .Name("AccountCharterExtendedDropdownList")
                            .HtmlAttributes(new { @class = "Toolbar-Cell" })
                            .DataTextField("Custodian")
                            .DataValueField("CompanyId")
                            .OptionLabel(LabelHelper.Text("OptionLabel"))
                            .AutoBind(true)
                            .Events(events => events.Change("onAccountCharterExtendedChange").DataBound("onAccountCharterExtendedDefaultLoad"))
                            .DataSource(dataSource => dataSource
                            .Read(read => read
                            .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                            .SelectedIndex(0).ToHtmlString());
    }))

<hr class="hr-white">

<div id="AccountCharterExtendedListGridContent" class="grid-div">
    @(
         Html.Kendo().Grid<BondFire.Entities.Projections.SL_AccountCharterExtendedProjection>()
                .Name("AccountCharterExtendedListGrid")
                .Sortable()
                .HtmlAttributes(new { @class = "grid" })
                .Scrollable(scroll => scroll.Enabled(true).Virtual(true))
                .Filterable()
                .NoRecords()
                .Editable(e => e.Mode(GridEditMode.InLine).Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLRule)))
                .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple))
                .Navigatable()
                .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
                .Events(events => events.DataBound("onAccountCharterExtendedCheckData"))
                .ToolBar(tbar => tbar.Create())
                .Columns(columns =>
                {
                    columns.Command(x =>
                    {
                        x.Edit();
                        x.Destroy();
                    }).Width(100);
                    columns.Bound(x => x.SLAccountCharterExtendedId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                    columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                    columns.Bound(x => x.AccountNumberLow).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                    columns.Bound(x => x.AccountNumberHigh).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                    columns.Bound(x => x.AccountCode).GetColumnFormat(ColumnTypeEnum.String, false, "", "_AccountCharterExtendedCodeAutoComplete");
                    columns.Bound(x => x.AccountCodeName).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                    columns.Bound(x => x.UserName).GetColumnFormat(ColumnTypeEnum.String, false, "", "");

                })
                 .DataSource(dataSource => dataSource
                    .Ajax()
                    .ServerOperation(false)
                    .PageSize(100)
                    .Read(read => read.Action("GetAccountCharterExtended", "AccountCharter", new { area = "Admin" }).Data("additionalAccountCharterExtendedData"))
                    .Create(update => update.Action("AddAccountCharterExtended", "AccountCharter", new { area = "Admin" }).Data("additionalAccountCharterExtendedData"))
                    .Update(update => update.Action("UpdateAccountCharterExtended", "AccountCharter", new { area = "Admin" }))
                    .Destroy(destroy => destroy.Action("DestroyAccountCharterExtended", "AccountCharter", new { area = "Admin" }))
                    .Model(model =>
                    {
                        model.Id(x => x.SLAccountCharterExtendedId);
                        model.Field(x => x.EntityId).Editable(false);
                        model.Field(x => x.AccountNumberLow).Editable(true).DefaultValue("");
                        model.Field(x => x.AccountNumberHigh).Editable(true).DefaultValue("");
                        model.Field(x => x.AccountCode).Editable(true);
                        model.Field(x => x.AccountCodeName).Editable(false);
                        model.Field(x => x.UserName).Editable(false);
                    }))
    )


    @(
        Html.Kendo().ContextMenu()
        .Name("AccountCharterExtendedContextMenu")
            .Target("#AccountCharterExtendedListGrid")
                .Events(events => events.Select("onAccountCharterExtendedListContextMenuSelect"))
            .Items(items =>
            {
                items.Add().Text("Select All").Enabled(true);
                items.Add().Text("Export To Excel").Enabled(true);
            })
    )
</div>