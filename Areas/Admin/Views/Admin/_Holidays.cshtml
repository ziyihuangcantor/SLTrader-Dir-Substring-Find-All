@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools

<script type="text/javascript">
    function onHolidayCheckData() {
        CheckGridData('#HolidayListGrid');
    }

    function onRuleError(e) {
        DisplayControllerError(e);
    }

    function onAdd() {
        HelperPartialAdminWindow(
            null,
            "New Holiday",
            525,
            325,
            "/Admin/Admin/LoadHolidayByNewHoliday");
    }

    function onRefresh() {
        $('#HolidayListGrid').data('kendoGrid').dataSource.read();
    }

    $(document).ready(function () {
        kendo.ui.Grid.fn.options.columnMenuInit = function (e) {
            var menu = e.container.find(".k-menu").data("kendoMenu");
            menu.bind('activate', function (e) {
                if (e.item.is('.k-filter-item')) {
                    // if an element in the submenu is focused first, the issue is not observed
                    e.item.find('span.k-dropdown.k-header').first().focus();
                    // e.item.find('input').first().focus();
                }
            });
        };
    });
</script>

@(
 Html.Kendo().ToolBar()
    .Name( "HolidayToolBar" )
    .Resizable( true )
    .Items( items =>
    {
        items.Add().Template( Html.Kendo().Button().Enable( SessionSecurityService.IsEditable( ManagerTask.EditHolidays ) ).Name( "AddHolidayCommand" ).Content( "Add Holiday" ).Events( events => events.Click( "onAdd" ) ).ToHtmlString() );
        items.Add().Template( Html.Kendo().Button().Name( "RefreshHolidayCommand" ).Content( "Refresh" ).Events( events => events.Click( "onRefresh" ) ).ToHtmlString() );
    } ))

<hr class="hr-white">


    @(
 Html.Kendo().Grid<Holiday>()
        .Name( "HolidayListGrid" )
        .Sortable()
        .NoRecords()
        .HtmlAttributes( new { @class = "grid" } )
        .Scrollable()
        .Filterable()
        .Editable( e => e.Mode( GridEditMode.InCell ).Enabled( SessionSecurityService.IsEditable( ManagerTask.EditHolidays ) ) )
        .Selectable( selectable => selectable.Mode( GridSelectionMode.Single ) )
        .Navigatable()
        .Resizable( cols => cols.Columns( bool.Parse( DataSystemValues.LoadSystemValue( "ResizeableGrid", "true" ) ) ) )
        .Events( events => events.DataBound( "onHolidayCheckData" ) )
        .Columns( columns =>
        {
            columns.Bound( x => x.HolidayId ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
            columns.Bound( x => x.Country ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" ).Hidden( true );
            columns.Bound( x => x.Description ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
            columns.Bound( x => x.HolidayDate ).GetColumnFormat( ColumnTypeEnum.Date, false, "", "" );
            columns.Bound(x => x.Country).GetColumnFormat(ColumnTypeEnum.String, false, "", "");

            if ( SessionSecurityService.IsEditable( ManagerTask.EditHolidays ) )
            {
                columns.Command( x =>
                {
                    x.Destroy();
                } );
            }
        } )
         .DataSource( dataSource => dataSource
            .Ajax()
            .AutoSync( true )
            .Read( read => read.Action( "GetHoliday", "Holiday", new { area = "Admin" } ) )
            .Update( update => update.Action( "UpdateHoliday", "Holiday", new { area = "Admin" } ) )
            .Destroy( destroy => destroy.Action( "DeleteHolidayById", "Holiday", new { area = "Admin" } ) )
            .Model( model =>
            {
                model.Id( x => x.HolidayId );
                model.Field( x => x.Country ).Editable( false );
                model.Field( x => x.Description ).Editable( true );
                model.Field( x => x.HolidayDate ).Editable( true );
            } ) )
    )
