@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Tools
@using SLTrader.Helpers.SessionHelper

@model SL_LocateClient
<script>
    var _originalLocateClientUserGrid = null;
    var _originalLocateClientToolBar = null;
    var _clientSelectedRows = [];
    
    $(document).ready(function () {
        setTimeout(function () {
            _originalLocateClientUserGrid = $("#LocateClientUserGrid").data('kendoGrid').getOptions();
            _originalLocateClientToolBar = $("#LocateClientUserGrid .k-grid-toolbar").html();

            LoadGridLayout("#LocateClientUserGrid");

            $("#LocateClientUserGrid .k-grid-toolbar").html(_originalLocateClientToolBar);
            $("#LocateClientUserGrid .k-grid-toolbar").addClass("k-grid-top");
        }, 5);
    });

    function BackupLocateClientRowSelection() {
        var grid = $("#LocateClientUserGrid").data("kendoGrid");

        var rows = grid.select();

        rows.each(function (index, row) {
            var selectedItem = grid.dataItem(row);
            _clientSelectedRows.push(selectedItem);
        });
    }

    function onLocateClientUserLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#LocateClientUserGrid");
        }, 5);
    }

    function RestoreLocateClientRowSelection() {
        if (_clientSelectedRows.length != 0) {
            for (var i = 0; i < _clientSelectedRows.length; i++) {
                var curr_id = _clientSelectedRows[i].uid;

                $('#LocateClientUserGrid').data("kendoGrid").tbody.find("tr[data-uid='" + curr_id + "']").addClass("k-state-selected");
            }
        }
    }
    $('#SharedLabelCheckBox').change(function () {
        $("#LocateClientUserGrid").data("kendoGrid").refresh();
    });

    $(function () {
        $('#LocateClientUserGrid').on('click', '.allowPendChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#LocateClientUserGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('AllowPend', checked);
            dataSource.sync();
        });

        $('#LocateClientUserGrid').on('click', '.allowNoPartialChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#LocateClientUserGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('AllowNoPartial', checked);
            dataSource.sync();
        });

        $('#LocateClientUserGrid').on('click', '.allowEasyChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#LocateClientUserGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('AllowEasy', checked);
            dataSource.sync();
        });

        $('#LocateClientUserGrid').on('click', '.allowNoLendChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#LocateClientUserGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('AllowNoLend', checked);
            dataSource.sync();
        });

        $('#LocateClientUserGrid').on('click', '.allowRestrictedChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#LocateClientUserGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('AllowRestricted', checked);
            dataSource.sync();
        });

        
        $('#LocateClientUserGrid').on('click', '.allowThresholdChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#LocateClientUserGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('AllowThreshold', checked);
            dataSource.sync();
        });
       
        $('#LocateClientUserGrid').on('click', '.allowIsActiveChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#LocateClientUserGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('IsActive', checked);
            dataSource.sync();
        });
    });

    function onLocateClientData() {
        var entityId = $("#LocateClientDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entityId,
        }
    }

    function onLocateClientUserCheckData() {
        try {
            CheckGridData('#LocateClientUserGrid');
        }
        catch (e)
        { }

        RestoreLocateClientRowSelection();
    }

    function onLocateClientRowChange(e) {
        _clientSelectedRows = [];

        try {
            BackupLocateClientRowSelection();
        }
        catch (e) {
        }
    }

    function onLocateCreateClientData() {
        var entity = $("#LocateClientDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity
        };
    }

    function onLocateClientDefaultLoad() {
        try {
            var UserPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    UserPreference = valid;

                    var dropdownList = $('#LocateClientDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == UserPreference.DefaultFirm;
                    });

                    $('#LocateClientUserGrid').data("kendoGrid").dataSource.read();
                },
                error: function (valid) {
                    UserPreference = null;
                }
            })
        }
        catch (e) { }
    }

    function onLocateClientChange() {
        $('#LocateClientUserGrid').data('kendoGrid').dataSource.read();
    }


    function onLocateClientError(e) {
        DisplayControllerError(e);
    }

    function onLocateClientContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#LocateClientUserGrid");
                break;

            case "Reset Filter":
                ResetFilter("#LocateClientUserGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#LocateClientUserGrid");

                $("#LocateClientUserGrid").data('kendoGrid').setOptions(_originalLocateClientUserGrid);
                $("#LocateClientUserGrid .k-grid-toolbar").html(_originalLocateClientToolBar);
                $("#LocateClientUserGrid .k-grid-toolbar").addClass("k-grid-top");
                $('#LocateClientUserGrid').data("kendoGrid").dataSource.read();
                break;

            case 'Unsort':
                UnsortGrid("#LocateClientUserGrid");
                break;
        }
    }
</script>

@*<style>
    #LocateClientUserDiv  {
        width:700px;
    }
</style>*@

<div id="LocateClientUserDiv" class="grid-div">
@(
 Html.Kendo().Grid<SL_LocateClientUserProjection>()
.Name("LocateClientUserGrid")
        .Sortable()
        .HtmlAttributes(new { @class = "grid" })
        .Scrollable()
        .Filterable()
        .ColumnMenu(menu =>
        {
            menu.ComponentType("modern");
        })
        .Editable(e => e.Mode(GridEditMode.InLine).Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLLocateClient)))
        .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
        .Navigatable()
        .Events(ev => ev.DataBound("onLocateClientUserCheckData").Change("onLocateClientRowChange"))
        .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
        .NoRecords()
          .Events(events =>
          {
              events.DataBound("onLocateClientUserCheckData");
              events.ColumnHide("onLocateClientUserLayoutChange");
              events.ColumnShow("onLocateClientUserLayoutChange");
              events.ColumnResize("onLocateClientUserLayoutChange");
              events.ColumnReorder("onLocateClientUserLayoutChange");
          })
.ToolBar(tbar =>
{
    tbar.Create();
})
.Columns(cols =>
{
    cols.Command(cmd =>
    {
        cmd.Edit();
    }).Width(70);
    cols.Bound(x => x.SLLocateClientUser).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
    cols.Bound(x => x.LocateClientId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
    cols.Bound(x => x.ClientName).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
    cols.Bound(x => x.UserId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
    cols.Bound(x => x.UserName).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
    cols.Bound(x => x.ViewClient).GetColumnFormat(ColumnTypeEnum.String, false, "<input class='allowViewClientChkbx' type='checkbox'  #=(ViewClient) ? checked='checked' : '' # />", "");
    cols.Bound(x => x.EditClient).GetColumnFormat(ColumnTypeEnum.String, false, "<input class='allowEditClientChkbx' type='checkbox'  #=(EditClient) ? checked='checked' : '' # />", "");
})
     .DataSource(ds =>
     {
         ds.Ajax()
             .ServerOperation(false)
             .Events(ev => ev.Error("onLocateClientError"))
             .Read(read => read.Action("Load_LocateClientUser", "Client", new { area = "Locates" }).Data("onLocateClientData"))
             .Create(create => create.Action("Create_LocateClientUser", "Client", new { area = "Locates" }).Data("onLocateCreateClientData"))
             .Update(update => update.Action("Update_LocateClientUser", "Client", new { area = "Locates" }))
             .Model(model =>
             {
                 model.Id(x => x.SLLocateClientUser);
                 model.Field(x => x.LocateClientId).Editable(false).DefaultValue(Model.SLLocateClient);
                 model.Field(x => x.ClientName).Editable(false).DefaultValue(Model.ClientName);
                 model.Field(x => x.UserId).Editable(true);

             });
     }))
</div>