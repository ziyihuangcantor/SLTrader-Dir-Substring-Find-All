@using SLTrader.Enums
@using SLTrader.Tools
@using SLTrader.Helpers.SessionHelper


<script>
    var _originalLocateClientGrid = null;
    var _originalLocateClientToolBar = null;
    var _clientSelectedRows = [];
    
    $(document).ready(function () {
        setTimeout(function () {
            _originalLocateClientGrid = $("#LocateClientGrid").data('kendoGrid').getOptions();
            _originalLocateClientToolBar = $("#LocateClientGrid .k-grid-toolbar").html();

            LoadGridLayout("#LocateClientGrid");

            $("#LocateClientGrid .k-grid-toolbar").html(_originalLocateClientToolBar);
            $("#LocateClientGrid .k-grid-toolbar").addClass("k-grid-top");
        }, 5);
    });

    function BackupLocateClientRowSelection() {
        var grid = $("#LocateClientGrid").data("kendoGrid");

        var rows = grid.select();

        rows.each(function (index, row) {
            var selectedItem = grid.dataItem(row);
            _clientSelectedRows.push(selectedItem);
        });
    }

    function onLocateClientLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#LocateClientGrid");
        }, 5);
    }

    function RestoreLocateClientRowSelection() {
        if (_clientSelectedRows.length != 0) {
            for (var i = 0; i < _clientSelectedRows.length; i++) {
                var curr_id = _clientSelectedRows[i].uid;

                $('#LocateClientGrid').data("kendoGrid").tbody.find("tr[data-uid='" + curr_id + "']").addClass("k-state-selected");
            }
        }
    }
    $('#SharedLabelCheckBox').change(function () {
        $("#LocateClientGrid").data("kendoGrid").refresh();
    });

    $(function () {
        $('#LocateClientGrid').on('click', '.allowPendChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#LocateClientGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('AllowPend', checked);
            dataSource.sync();
        });

        $('#LocateClientGrid').on('click', '.allowNoPartialChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#LocateClientGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('AllowNoPartial', checked);
            dataSource.sync();
        });

        $('#LocateClientGrid').on('click', '.allowEasyChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#LocateClientGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('AllowEasy', checked);
            dataSource.sync();
        });

        $('#LocateClientGrid').on('click', '.allowNoLendChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#LocateClientGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('AllowNoLend', checked);
            dataSource.sync();
        });

        $('#LocateClientGrid').on('click', '.allowRestrictedChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#LocateClientGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('AllowRestricted', checked);
            dataSource.sync();
        });

        
        $('#LocateClientGrid').on('click', '.allowThresholdChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#LocateClientGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('AllowThreshold', checked);
            dataSource.sync();
        });
       
        $('#LocateClientGrid').on('click', '.allowIsActiveChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#LocateClientGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('IsActive', checked);
            dataSource.sync();
        });
    });

    function onLocateClientData() {
        var entityId = $("#LocateClientDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entityId,
        }
    }

    function onLocateClientCheckData() {
        try {
            CheckGridData('#LocateClientGrid');
        }
        catch (e)
        { }

        RestoreLocateClientRowSelection();
    }

    function onLocateClientRowChange(e) {
        _clientSelectedRows = [];

        try {
            BackupLocateClientRowSelection();
        }
        catch (e) {
        }
    }

    function onLocateCreateClientData() {
        var entity = $("#LocateClientDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity
        };
    }

    function onLocateClientDefaultLoad() {
        try {
            var UserPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    UserPreference = valid;

                    var dropdownList = $('#LocateClientDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == UserPreference.DefaultFirm;
                    });

                    $('#LocateClientGrid').data("kendoGrid").dataSource.read();
                },
                error: function (valid) {
                    UserPreference = null;
                }
            })
        }
        catch (e) { }
    }

    function onLocateClientChange() {
        $('#LocateClientGrid').data('kendoGrid').dataSource.read();
    }


    function onLocateClientError(e) {
        DisplayControllerError(e);
    }

    function onLocateClientContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#LocateClientGrid");
                break;

            case "Reset Filter":
                ResetFilter("#LocateClientGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#LocateClientGrid");

                $("#LocateClientGrid").data('kendoGrid').setOptions(_originalLocateClientGrid);
                $("#LocateClientGrid .k-grid-toolbar").html(_originalLocateClientToolBar);
                $("#LocateClientGrid .k-grid-toolbar").addClass("k-grid-top");
                $('#LocateClientGrid').data("kendoGrid").dataSource.read();
                break;

            case 'Unsort':
                UnsortGrid("#LocateClientGrid");
                break;
        }
    }

    function LoadClientUsers() {
        var dataItems = getCSVDataItems('#LocateClientGrid', false);
        console.log(dataItems);
        HelperPartialLocateWindow(
            JSON.stringify({
                client: dataItems
            }),
            "Assign Users",
            0,
            0,
            "/Locates/Client/LoadLocateList");
    }
</script>

@(Html.Kendo().ToolBar()
    .Name("LocateClientToolBar")
    .Resizable(true)
    .HtmlAttributes(new { @class = "tBar" })
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
        items.Add().Template((Html.Kendo().DropDownList()
            .Name("LocateClientDropdownList")
            .HtmlAttributes(new { @class = "Toolbar-Cell" })
            .Animation(true)
            .Events(e => e.Change("onLocateClientChange").DataBound("onLocateClientDefaultLoad").Open("onContraEntityAutoCompleteResize"))
            .DataTextField("Custodian")
            .DataValueField("CompanyId")
            .OptionLabel(LabelHelper.Text("OptionLabel"))
            .AutoBind(true)
            .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
            .DataSource(dataSource => dataSource
            .Read(read => read
            .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
            .SelectedIndex(0)).ToHtmlString());

        items.Add().Type(CommandType.Button).Text(LabelHelper.Text("Assign users")).Click("LoadClientUsers");
    }))
<hr class="hr-white">

<div id="LocateClientDiv" class="grid-div">
@(
 Html.Kendo().Grid<SL_LocateClient>()
.Name("LocateClientGrid")
        .Sortable()
        .HtmlAttributes(new { @class = "grid" })
        .Scrollable()
        .Filterable()
        .ColumnMenu(menu =>
        {
            menu.ComponentType("modern");
        })
        .Editable(e => e.Mode(GridEditMode.InCell).Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLLocateClient)))
        .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
        .Navigatable()
        .Events(ev => ev.DataBound("onLocateClientCheckData").Change("onLocateClientRowChange"))
        .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
        .NoRecords()
          .Events(events =>
          {
              events.DataBound("onLocateClientCheckData");
              events.Change("onLocateClientRowChange");
              events.ColumnHide("onLocateClientLayoutChange");
              events.ColumnShow("onLocateClientLayoutChange");
              events.ColumnResize("onLocateClientLayoutChange");
              events.ColumnReorder("onLocateClientLayoutChange");
          })
.ToolBar(tbar =>
{
    tbar.Create();
})
.Columns(cols =>
{
    cols.Bound(x => x.SLLocateClient).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
    cols.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
    cols.Bound(x => x.Client).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
    cols.Bound(x => x.ClientName).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
    cols.Bound(x => x.ClientTypeId).GetColumnFormat(ColumnTypeEnum.String, false, "", "_LocateClientTypeDropdown");
    cols.Bound(x => x.MinPrice).GetColumnFormat(ColumnTypeEnum.Money, false, "", "Number");
    cols.Bound(x => x.MinQty).GetColumnFormat(ColumnTypeEnum.Position, false, "", "DecimalNumber");
    cols.Bound(x => x.AutoApprovalQty).GetColumnFormat(ColumnTypeEnum.Position, false, "", "DecimalNumber");
    cols.Bound(x => x.DecrementationTypeId).GetColumnFormat(ColumnTypeEnum.Position, false, "", "_LocateClientDecrementationTypeDropdown");
    cols.Bound(x => x.InventoryPercentage).GetColumnFormat(ColumnTypeEnum.Percent, false, "", "Number");
    cols.Bound(x => x.AllowNoPartial).GetColumnFormat(ColumnTypeEnum.String, false, "<input class='allowNoPartialChkbx' type='checkbox'  #=(AllowNoPartial) ? checked='checked' : '' # />", "");
    cols.Bound(x => x.AllowPend).GetColumnFormat(ColumnTypeEnum.String, false, "<input class='allowPendChkbx' type='checkbox'  #=(AllowPend) ? checked='checked' : '' # />", "");
    cols.Bound(x => x.AllowEasy).GetColumnFormat(ColumnTypeEnum.String, false, "<input class='allowEasyChkbx' type='checkbox'  #=(AllowEasy) ? checked='checked' : '' # />", "");
    cols.Bound(x => x.AllowNoLend).GetColumnFormat(ColumnTypeEnum.String, false, "<input class='allowNoLendChkbx' type='checkbox'  #=(AllowNoLend) ? checked='checked' : '' # />", "");
    cols.Bound(x => x.AllowRestricted).GetColumnFormat(ColumnTypeEnum.String, false, "<input class='allowRestrictedChkbx' type='checkbox'  #=(AllowRestricted) ? checked='checked' : '' # />", "");
    cols.Bound(x => x.AllowThreshold).GetColumnFormat(ColumnTypeEnum.String, false, "<input class='allowThresholdChkbx' type='checkbox'  #=(AllowThreshold) ? checked='checked' : '' # />", "");
    cols.Bound(x => x.IsActive).GetColumnFormat(ColumnTypeEnum.String, false, "<input class='allowIsActiveChkbx' type='checkbox'  #=(IsActive) ? checked='checked' : '' # />", "");

})
     .DataSource(ds =>
     {
         ds.Ajax()
             .AutoSync(true)
             .ServerOperation(false)
             .Events(ev => ev.Error("onLocateClientError"))
             .Read(read => read.Action("Load_LocateClient", "Client", new { area = "Locates" }).Data("onLocateClientData"))
             .Create(create => create.Action("Create_LocateClient", "Client", new { area = "Locates" }).Data("onLocateCreateClientData"))
             .Update(update => update.Action("Update_LocateClient", "Client", new { area = "Locates" }))
             .Model(model =>
             {
                 model.Id(x => x.SLLocateClient);
                 model.Field(x => x.EntityId).Editable(false);
                 model.Field(x => x.Client).Editable(true);
             });
     }))
</div>
@(Html.Kendo().ContextMenu()
.Name("LocateClientContextMenu")
    .Target("#LocateClientGrid")
    .Events(events => events.Select("onLocateClientContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
    }))
