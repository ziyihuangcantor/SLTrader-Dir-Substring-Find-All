@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Tools
<style scoped>
    #inventoryContextMenu {
       position:fixed;
    }
</style>

<script>

    $('#SharedLabelCheckBox').change(function () {
        $("#InventoryGrid").data("kendoGrid").refresh();
    })
    $("#InventorySearchCriteria").keyup(function (event) {
        if (event.keyCode == 13) {
            $("#InventorySearchSubmitButton").click();
        }
    });

    function onInventoryCheckData() {
        CheckGridData('#InventoryGrid');
    }

    function onInventorySearch()
    {
        $('#InventoryGrid').data('kendoGrid').dataSource.read();
    }

    function onInventoryData() {
        var entityId = $("#InventoryDropdownList").data("kendoDropDownList").value();
        var criteria = document.getElementById('InventorySearchCriteria').value;
     
        return {
            entity: entityId,
            criteria: criteria,
        };
    }

    function onDefaultLoad() {
        try {
            var UserPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    UserPreference = valid;

                    var dropdownList = $('#InventoryDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == UserPreference.DefaultFirm;
                    });

                    $('#InventoryGrid').data("kendoGrid").dataSource.read();
                },
                error: function (valid) {
                    UserPreference = null;
                }
            })
        }
        catch (e) { }
    }

    function onChartBound() {
        console.log("Data Loaded");
    }

    function onError(e) {
        console.log(e.message);
    }

    function onInventoryChange() {

        $('#InventoryGrid').data('kendoGrid').dataSource.read();

        $('#HistoryInventoryChart').data('kendoChart').dataSource.read();
        $('#HistoryInventoryChart').data('kendoChart').refresh();
    }

    function exportToExcel() {
        KendoGridToCSVConvertor("#InventoryGrid", 'InventoryGrid');
    }

</script>

<div class="toolbar">
  <table id="toolbar">
        <tr>                      
        <td>                       
        @LabelHelper.Label("Entity")
        </td>
        <td>
        @(Html.Kendo().DropDownList()
        .Name("InventoryDropdownList")
        .HtmlAttributes(new { @class = "Toolbar-Cell" })
        .Animation(false)
        .DataTextField("Custodian")
        .DataValueField("CompanyId")
        .OptionLabel(LabelHelper.Text("OptionLabel"))
        .AutoBind(true)              
        .Events(e => e.DataBound("onDefaultLoad").Change("onInventoryChange"))      
        .DataSource(dataSource => dataSource
        .Read(read => read
        .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" }))))
        </td><td>
        @Html.TextBox("InventorySearchCriteria", "", new { @class = "k-textbox" })
        </td><td>
        @Html.Kendo().Button().Name("InventorySearchSubmitButton").Content("Search").Events(e => e.Click("onInventorySearch"))
        </td>
        </tr>
    </table>               
</div> 
<hr class="hr-white">
<div id="InventoryDiv" class="grid-div" >
          @(Html.Kendo().Grid<SL_InventoryProjection>()
            .Name("InventoryGrid")
            .HtmlAttributes(new { @class="grid" })
            .Filterable()
            .Scrollable()
            .AutoBind(true)           
            .Selectable(select =>
            {
                select.Enabled(true);
                select.Mode(GridSelectionMode.Single);
                select.Type(GridSelectionType.Row);
            })
            .Events(events =>
            {
                events.DataBound("onInventoryCheckData");
            })           
            .Columns(cols =>
            {
                cols.Bound(x => x.EffectiveDate).GetColumnFormat(ColumnTypeEnum.Date, false,"","");
                cols.Bound(x => x.DateTimeId).GetColumnFormat(ColumnTypeEnum.Time, false, "", "");
                cols.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);               
                cols.Bound(x => x.Source).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.Source).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.Quantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(Quantity)#", "");
                cols.Bound(x => x.RebateRate).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(RebateRate)#", "");
              
            })
            .DataSource(ds =>
            {
                ds.Ajax()
                    .ServerOperation(false)                 
                    .Aggregates(agg =>
                        {
                            agg.Add(x => x.Quantity).Sum();                                
                        })
                    .Sort(sort =>
                        {
                            sort.Add(x => x.EffectiveDate).Descending();
                        })
                    .Read(read => read.Action("LoadInventoryByIssue", "Inventory", new { area = "Locates" }).Data("onInventoryData"));
            }))
</div>
