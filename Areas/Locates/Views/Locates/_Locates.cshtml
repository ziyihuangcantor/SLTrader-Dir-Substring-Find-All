@using BondFire.Entities.Projections
@using SLTrader.Enums
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Tools

<style scoped>
    #LocateToolBar .k-checkbox-label {
        padding-left: 20px;
    }

    #LocateGrid .k-grid-content td {
        height: 25px;
    }

    k-filtercell-operator {
        display: none;
    }
</style>

<script type="text/javascript">
    var _locateSelectedRows = [];
    var _locateSelectAll = false;
    var _originalLocatesGrid = null;
    var _locateGridLoadingData = false;
 
    $(document).ready(function () {
        try {
            Notification.requestPermission();
        }
        catch (e) {
            console.log(e.message);
        }

        setTimeout(function () {
            _originalLocatesGrid = $('#LocateGrid').data('kendoGrid').getOptions();

            LoadGridLayout("#LocateGrid");
        }, 5);
    });

    function exportToLocatesExcel() {
        KendoGridToCSVConvertor("#LocateGrid", 'LocatesGrid', _locateSelectAll);
    }

    function onLocateRequestEnd(e) {
        traderHubProxy.on('updateLocate', function (update) {
            updateLocateRow(update);
        });
    }

    function onLocateLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#LocateGrid");
        }, 5);
    }

    function onLocateRequestStart(e) {
        traderHubProxy.off('updateLocate');
    }

    $('#SharedLabelCheckBox').change(function () {
        $("#LocateGrid").data("kendoGrid").refresh();
    })

    function BackupLocateRowSelection() {
        var grid = $("#LocateGrid").data("kendoGrid");

        var rows = grid.select();

        rows.each(function (index, row) {
            var selectedItem = grid.dataItem(row);
            _locateSelectedRows.push(selectedItem);
        });
    }

    function RestoreLocateRowSelection() {
        if (_locateSelectedRows.length != 0) {
            for (var i = 0; i < _locateSelectedRows.length; i++) {
                var curr_id = _locateSelectedRows[i].uid;

                $('#LocateGrid').data("kendoGrid").tbody.find("tr[data-uid='" + curr_id + "']").addClass("k-state-selected");
            }
        }
    }

    function onLocateUnsortGrid(e) {
        UnsortGrid(e);
    }

    function onLocateSelectAll(e) {
        try {
            var locatesGrid = $("#LocateGrid").data("kendoGrid");

            locatesGrid.select(locatesGrid.tbody.find(">tr"));

            _locateSelectAll = true;
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onCanccelLocates(e) {
        try {
            var dataItems = getCSVDataItems('#LocateGrid', _locateSelectAll);

            HelperPartialLocateWindow(
                JSON.stringify({
                    list: dataItems
                }),
                "Cancel Locate(s)",
                0,
                0,
                "/Locates/Locates/LoadCancelLocatePartial");
        }
        catch (e) {
            console.log(e.messaege);
        }
    }

    function onRerunLocates() {
        var dataItems = getCSVDataItems('#LocateGrid', _locateSelectAll);

        $.ajax({
            url: '@Url.Action("RerunLocates", "Locates", new { area = "Locates" })',
            type: 'POST',
            contentType: 'application/json;',
            data: JSON.stringify({ locateList: dataItems }),
            success: function (valid) {
                DisplayControllerByStringError("Info", "Rerun " + valid.length + " locate(s).");
            },
            error: function (valid) {
                DisplayError(valid);
            }
        });
    }

    function onLocateContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'Add Locate List':
                onLocateListOpen();
                break;

            case 'Add Inventory List':
                onInventoryListOpen();
                break;

            case 'Add Single Locate':
                onSingleLocateOpen();
                break;

            case 'AutoFit Columns':
                resizeGridColumns("#LocateGrid");
                break;

            case "Cancel Locate(s)":
                onCanccelLocates();
                break;

            case "Rerun Locate(s)":
                onRerunLocates();
                break;

            case "Reset Filter":
                ResetFilter("#LocateGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#LocateGrid");
                $('#LocateGrid').data('kendoGrid').setOptions(_originalLocatesGrid);
                break;
            case 'Unsort':
                onLocateUnsortGrid("#LocateGrid");
                break;

            case 'Select All':
                onLocateSelectAll(true);
                break;

            case 'Export To Excel':
                exportToLocatesExcel();
                break;
        }
    }

    function onLocateDefaultLoad() {
        try {
            var UserPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    UserPreference = valid;

                    var dropdownList = $('#LocateDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == UserPreference.DefaultFirm;
                    });

                    $('#LocateGrid').data("kendoGrid").dataSource.read();
                },
                error: function (valid) {
                    UserPreference = null;
                }
            })
        }
        catch (e) { }
    }
    function getFormattedDate(date) {
        var year = date.getFullYear();

        var month = (1 + date.getMonth()).toString();
        month = month.length > 1 ? month : '0' + month;

        var day = date.getDate().toString();
        day = day.length > 1 ? day : '0' + day;

        return year + '-' + month + '-' + day;
    }


    function updateLocateRow(update) {
        try {
            _locateGridLoadingData = true;

            var datepicker = $("#LocateCalander").data("kendoDatePicker");
            var dateValue = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

            var entity = $("#LocateDropdownList").data("kendoDropDownList").value();
            var newItems = [];
            var data = $("#LocateGrid").data("kendoGrid").dataSource;

            $.each(update, function (i, obj) {
                var effectiveDate = kendo.parseDate(obj['EffectiveDate']);
                obj['EffectiveDate'] = effectiveDate;

                var date = new Date(obj['EffectiveDate']);
                var outputDateString = getFormattedDate(date);
            
                if ((obj.EntityId == entity) && (outputDateString == dateValue)) {                 
                    try
                    {
                        var effectiveDate = kendo.parseDate(obj['EffectiveDate']);
                        obj['EffectiveDate'] = effectiveDate;

                        var dateTimeId = kendo.parseDate(obj['DateTimeId']);
                        obj['DateTimeId'] = dateTimeId;

                        var requestDateTimeId = kendo.parseDate(obj['RequestTime']);
                        obj['RequestTime'] = requestDateTimeId;
                    }
                    catch(error1)
                    {
                        console.log(error1.message);
                    }

                    newItems.push(obj);
                }
            });

            data.pushUpdate(newItems);
       }
        catch (e) {
            console.log('updateLocateRow err::' + e.message);
        }

        _locateGridLoadingData = false;
    }

    function onLocateCheckData(e) {
        try {
            var grid = $("#LocateGrid").data("kendoGrid");
            var gridData = grid.dataSource.view();

            for (var i = 0; i < gridData.length; i++) {
                if (gridData[i].Comment == 'Restricted item') {
                    grid.table.find("tr[data-uid='" + gridData[i].uid + "']").addClass("k-block k-error-colored");
                }
            }

            CheckGridData('#LocateGrid');
            ReInitVirtualScroll("#LocateGrid");
        }
        catch (e)
        { }

        RestoreLocateRowSelection();
    }

    function onLocateTotalData() {
        try {
            var datepicker = $("#LocateCalander").data("kendoDatePicker");
            var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

            var entity = $("#LocateDropdownList").data("kendoDropDownList").value();

            var entityGrid = $("#LocateGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());
            var issueId = selectedItem["IssueId"];

            return {
                effectiveDate: value,
                entityId: entity,
                issueId: issueId
            }
        } catch (e) {
            return {
                effectiveDate: '@DateTime.Today.ToString("yyyy-MM-dd")',
                entity: '',
                issueId: -1
            }
        }
    }

    function onLocateRowChange(e) {
        _locateSelectedRows = [];

        try
        {
            if (_locateGridLoadingData == false) {
                var entityGrid = $("#LocateGrid").data("kendoGrid");
                var selectedItem = entityGrid.dataItem(entityGrid.select());

                var entityId = selectedItem["EntityId"];
                var securityNumber = selectedItem["SecurityNumber"];
                var issueId = selectedItem["IssueId"];
                var effectiveDate = selectedItem["EffectiveDate"];

                var effectiveDate = selectedItem["EffectiveDate"];

                if (securityNumber == null) {
                    securityNumber = selectedItem["Sedol"];

                    if (securityNumber == null) {
                        securityNumber = selectedItem["Isin"];
                    }
                }

                SidePanelUpdate(effectiveDate, entityId, issueId, securityNumber);
               
                if ('@SessionSecurityService.IsEditable(ManagerTask.ViewSLLocateClientRestricted)' != 'True') {
                    $('#LocateTotalGrid').data('kendoGrid').dataSource.read();
                    $('#InventoryLocateGrid').data('kendoGrid').dataSource.read();
                    $('#LocateAllocationGrid').data('kendoGrid').dataSource.read();
                }
            }
            _locateSelectAll = false;
        }
        catch (e)
        {
        }        
    }

    function onInventoryLocateData() {
        try {
            var entityGrid = $("#LocateGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            var entityId = selectedItem["EntityId"]
            var issueId = selectedItem["SecurityNumber"];

            var datepicker = $("#LocateCalander").data("kendoDatePicker");
            var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');


            return {
                effectiveDate: value,
                entity: entityId,
                criteria: issueId
            }
        } catch (e) {
            return {
                effectiveDate: '@DateTime.Today.ToString("yyyy-MM-dd")',
                entity: '',
                criteria: ''
            }
        }
    }

    function onLocateChange() {
        $('#LocateGrid').data('kendoGrid').dataSource.read();
    }

    function onSingleLocateOpen() {
        var entityId = $("#LocateDropdownList").data("kendoDropDownList").value();

        HelperPartialLocateWindow(
                JSON.stringify({
                    entityId: entityId
                }),
                "Single Locate",
                0,
                0,
                "/Locates/Locates/LoadSingleLocate");
    }

    function onLocateListOpen() {
        var entityId = $("#LocateDropdownList").data("kendoDropDownList").value();

        HelperPartialLocateWindow(
                JSON.stringify({
                    entityId: entityId
                }),
                "Locate List",
                0,
                0,
                "/Locates/Locates/LoadLocateList");
    }

    function onInventoryListOpen() {
        var entityId = $("#LocateDropdownList").data("kendoDropDownList").value();

        HelperPartialLocateWindow(
                JSON.stringify({
                    entityId: entityId
                }),
                "Inventory List",
                0,
                0,
                "/Locates/Locates/LoadInventoryList");
    }

    function onAdditionalLocateData() {
        var datepicker = $("#LocateCalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entity = $("#LocateDropdownList").data("kendoDropDownList");

        return {
            entityId: entity.value(),
            effectiveDate: value,
        };
    }

    function onLocateAllocationData() {
        try {
            var entityGrid = $("#LocateGrid").data("kendoGrid");
            var selectedItem = entityGrid.dataItem(entityGrid.select());

            return {
                locateId: selectedItem.LocateId
            }
        } catch (e) {
            return {
                locateId: -1
            }
        }
    }

    function onLocateRowEdit(e) {
        var entityGrid = $("#LocateGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());

        if ('@SessionSecurityService.IsEditable(ManagerTask.EditSLLocateRate)' == 'True')
        {
            var input = e.container.find("input");
            setTimeout(function () { input.select(); });
        }
        else if (selectedItem.LocateStatus != '@Convert.ToInt32(SL_LocateStatus.Pend)') {
            $('#LocateGrid').data("kendoGrid").closeCell();
        }
        else if (selectedItem.StatusMain != '@Convert.ToInt32(StatusMain.Settled)') {
            $('#LocateGrid').data("kendoGrid").closeCell();
        }
        else {
            var input = e.container.find("input");
            setTimeout(function () { input.select(); });
        }
    }

    function onLocateChildError(e) {
        console.log(e);
    }

    function onLocateError(e) {
        DisplayControllerByStringError("Error", e.Message);
    }

    function onLocateSearchChange(e) {
        e.preventDefault();

        try {
            var cusipTextBox = document.getElementById("LocateSecuritySearchTextBox").value;

            QuickColumnGrid("#LocateGrid", cusipTextBox);
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function onLocatesPendingCheckBoxChange() {
        try {
            if ($("#LocatesPendingCheckBox").is(':checked')) {
                QuickColumnFilter($("#LocateGrid").data("kendoGrid").dataSource, 'LocateStatus', '@Convert.ToInt32(SL_LocateStatus.Pend)');
                QuickColumnFilter($("#LocateGrid").data("kendoGrid").dataSource, 'StatusMain', '@Convert.ToInt32(StatusMain.Settled)');
                $("#LocateGrid").data("kendoGrid").dataSource.read();
            }
            else {
                QuickColumnFilter($("#LocateGrid").data("kendoGrid").dataSource, 'LocateStatus', '');
                QuickColumnFilter($("#LocateGrid").data("kendoGrid").dataSource, 'StatusMain', '');
                $("#LocateGrid").data("kendoGrid").dataSource.read();
            }
        }
        catch (e) {
            console.log(e.message);
        }
    }


    function ReInitVirtualScroll(e) {
        var grid = $(e).data("kendoGrid");
        grid._rowHeight = undefined;
        grid.virtualScrollable.refresh();
    }
</script>

@(
 Html.Kendo().ToolBar()
        .Name("LocateToolBar")
    .Resizable(true)
    .HtmlAttributes(new { @class = "tBar" })
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("EffectiveDate").ToHtmlString());

        items.Add().Template(Html.Kendo().DatePicker()
                    .Name("LocateCalander")
                    .Format("yyyy-MM-dd")
                    .Value(DateTime.Now)
                    .Events(events => events.Change("onLocateChange")).ToHtmlString());

        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
        items.Add().Template(Html.Kendo().DropDownList()
                    .Name("LocateDropdownList")
                    .HtmlAttributes(new { @class = "Toolbar-Cell" })
                    .Animation(true)
                    .DataTextField("Custodian")
                    .DataValueField("CompanyId")
                    .OptionLabel(LabelHelper.Text("OptionLabel"))
                    .AutoBind(true)
                    .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span>#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                    .Events(e => e.Change("onLocateChange").DataBound("onLocateDefaultLoad").Open("onContraEntityAutoCompleteResize"))
                    .DataSource(dataSource => dataSource
                    .Read(read => read
                    .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                    .SelectedIndex(0).ToHtmlString());

        items.Add().Template(Html.Kendo().CheckBox()
           .Name("LocatesPending")
           .Checked(false)
           .Label(LabelHelper.Text("LocatesPending"))
           .HtmlAttributes(new { id = "LocatesPendingCheckBox", onclick = "onLocatesPendingCheckBoxChange()" }).ToHtmlString());


        items.Add().Template(
"<table><tr><td>" +
LabelHelper.LabelFor("TickerSearch", "LocateSecuritySearchTextBox").ToHtmlString() + "</td><td>" +
Html.Kendo().AutoComplete().Name("LocateSecuritySearchTextBox").HtmlAttributes(new { @class = "width90" }).Events(eve => eve.Filtering("onLocateSearchChange")).Suggest(true).ToHtmlString() + "</td></tr></table>"
).HtmlAttributes(new { @class = "float-right" });
    }))
<hr class="hr-white">
<div id="LocateDiv" class="grid-div">
@(Html.Kendo().Splitter()
.Name("LocateSplitter")
.HtmlAttributes(new { @class = "grid" })
.Orientation(SplitterOrientation.Vertical)
.Panes(panes =>
{
    panes.Add()
        .Scrollable(false)
        .Content(@<text>
              @(Html.Kendo().Grid<SL_LocateProjection>()
            .Name("LocateGrid")
            .HtmlAttributes(new { @class = "grid" })
            .Scrollable(scroll =>
            {
                scroll.Virtual(true);
                scroll.Enabled(true);
            })
            .ColumnMenu(menu =>
            {
                menu.Columns(true);
                menu.Filterable(true);
                menu.Sortable(true);
                menu.ComponentType("modern");
            })
            .PersistSelection()
            .Reorderable(reorder => reorder.Columns(true))
            .Selectable(select =>
            {
                select.Enabled(true);
                select.Mode(GridSelectionMode.Multiple);
                select.Type(GridSelectionType.Row);
            })
            .Events(events =>
            {
                events.DataBound("onLocateCheckData");
                events.Change("onLocateRowChange");
                events.Edit("onLocateRowEdit");
                events.ColumnHide("onLocateLayoutChange");
                events.ColumnShow("onLocateLayoutChange");
                events.ColumnResize("onLocateLayoutChange");
                events.ColumnReorder("onLocateLayoutChange");
            })
            .Pageable(pagable =>
            {
                pagable.Numeric(false);
                pagable.PreviousNext(false);
                pagable.Messages(config =>
                {
                    config.Display("Showing {2} locate(s)");
                });
            })
            .NoRecords()
            .Sortable()
            .Editable(edit =>
            {
                edit.Enabled(true);
                edit.Mode(GridEditMode.InCell);
            })
            .Filterable(filter =>
            {
                filter.Enabled(true);
                filter.Mode(GridFilterMode.Menu);
            })
            .Resizable(resize =>
            {
                resize.Columns(true);
            })
            .Columns(cols =>
            {
                cols.Bound(x => x.LocateId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.EffectiveDate).GetColumnFormat(ColumnTypeEnum.Date, false, "", "").Hidden(true);
                cols.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                cols.Bound(x => x.Clientid).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.IssueId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
                cols.Bound(x => x.SecurityNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.Ticker).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.SecNumber).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound( x => x.Isin ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
                cols.Bound( x => x.Sedol ).GetColumnFormat( ColumnTypeEnum.String, false, "", "" );
                cols.Bound(x => x.Quick).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.Price).GetColumnFormat(ColumnTypeEnum.Money, false, "", "");
                cols.Bound(x => x.RequestTime).GetColumnFormat(ColumnTypeEnum.Time, false, "", "");
                cols.Bound(x => x.RequestedBy).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.RequestQuantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(RequestQuantity)#", "");
                cols.Bound(x => x.AllocatedQuantity).GetColumnFormat(ColumnTypeEnum.Position, true, "#=GetPositionDirection(AllocatedQuantity)#", "DecimalNumber");
                cols.Bound(x => x.Source).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.AllocatedTime).GetColumnFormat(ColumnTypeEnum.Time, false, "", "").Hidden(true);
                cols.Bound(x => x.AllocatedBy).GetColumnFormat(ColumnTypeEnum.Time, false, "", "").Hidden(true);
                cols.Bound(x => x.RebateRate).GetColumnFormat(ColumnTypeEnum.Rate, false, "#=GetRateDirection(RebateRate)#", "Rate");
                cols.Bound(x => x.RebateIncome).GetColumnFormat(ColumnTypeEnum.Money, true, "#=GetMoneyDirection(RebateIncome)#", "");
                cols.Bound(x => x.ExternalTradeXRef).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.ModifiedBy).GetColumnFormat(ColumnTypeEnum.Time, false, "", "");
                cols.Bound(x => x.LocateStatus).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.ClientComment).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.Comment).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.ParentLocateId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.StatusMain).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                cols.Bound(x => x.DateTimeId).GetColumnFormat(ColumnTypeEnum.Time, false, "", "");
            })
            .DataSource(ds =>
            {
                ds.Ajax()
                    .AutoSync(true)
                    .PageSize(20)
                    .Sort(sort =>
                    {
                        sort.Add(x => x.LocateId).Ascending();
                    })
                    .Events(events => events
                    .RequestStart("onLocateRequestStart")
                    .RequestEnd("onLocateRequestEnd")
                    .Error("onLocateError"))
                    .Model(model =>
                    {
                        model.Id(x => x.LocateId);
                        model.Field(x => x.LocateId).Editable(false);
                        model.Field(x => x.EffectiveDate).Editable(false);
                        model.Field(x => x.EntityId).Editable(false);
                        model.Field(x => x.Clientid).Editable(false);
                        model.Field(x => x.IssueId).Editable(false);
                        model.Field(x => x.SecurityNumber).Editable(false);
                        model.Field(x => x.Ticker).Editable(false);
                        model.Field(x => x.Isin).Editable(false);
                        model.Field(x => x.Sedol).Editable(false);
                        model.Field(x => x.Quick).Editable(false);
                        model.Field(x => x.Price).Editable(false);
                        model.Field(x => x.RequestTime).Editable(false);
                        model.Field(x => x.RequestQuantity).Editable(false);
                        model.Field(x => x.AllocatedQuantity).Editable(SessionSecurityService.IsEditable(ManagerTask.EditSLLocate));
                        model.Field(x => x.Source).Editable(false);
                        model.Field(x => x.AllocatedTime).Editable(false);
                        model.Field(x => x.AllocatedBy).Editable(false);
                        model.Field(x => x.RebateRate).Editable(false);
                        model.Field(x => x.RebateIncome).Editable(false);
                        model.Field(x => x.ExternalTradeXRef).Editable(false);
                        model.Field(x => x.ModifiedBy).Editable(false);
                        model.Field(x => x.LocateStatus).Editable(false);
                        model.Field(x => x.Comment).Editable(false);
                        model.Field(x => x.RequestedBy).Editable(false);
                        model.Field(x => x.ClientComment).Editable(false);
                        model.Field(x => x.ParentLocateId).Editable(false);
                        model.Field(x => x.StatusMain).Editable(false);
                        model.Field(x => x.DateTimeId).Editable(false);
                    })
                    .ServerOperation(false)
                    .Read(read =>
                    {
                        read.Action("LoadLocates", "Locates", new { area = "Locates" }).Data("onAdditionalLocateData");
                    })
                    .Update(udpate =>
                    {
                        udpate.Action("UpdateLocate", "Locates", new { area = "Locates" });
                    })
                    .Aggregates(agg =>
                    {
                        agg.Add(x => x.RequestQuantity).Sum();
                        agg.Add(x => x.AllocatedQuantity).Sum();
                        agg.Add(x => x.RebateIncome).Sum();
                    });
            }))
            </text>);

      panes.Add()
           .Scrollable(false)
           .Collapsed((SessionSecurityService.IsEditable(ManagerTask.ViewSLLocateClientRestricted)))
           .Collapsible((!SessionSecurityService.IsEditable(ManagerTask.ViewSLLocateClientRestricted)))
        .Content(@<text>
            @(Html.Kendo().Splitter()
        .Name("LocateBottomSplitter")
        .Orientation(SplitterOrientation.Horizontal)
        .HtmlAttributes(new { @class = "grid" })
        .Panes(childPanes =>
        {
            childPanes.Add()
                 .Scrollable(false)
               .Content(
                   (Html.Kendo().Grid<SL_LocateInventorySummaryProjection>()
                   .Name("InventoryLocateGrid")
                   .AutoBind(false)
                   .NoRecords()
                   .HtmlAttributes(new { @class = "grid" })
                   .ToolBar(t =>
                   {
                       t.Template(LabelHelper.Label("InventoryInformation").ToString());
                   })
                   .Columns(cols =>
                   {
                       cols.Bound(x => x.IssueId).Hidden(true);
                       cols.Bound(x => x.MarkerColor).GetColumnFormat(ColumnTypeEnum.String, false, "#=OnColorPreview(MarkerColor)#", "").HtmlAttributes(new { title = "#= OnColorPreviewDescription(MarkerDesceiption) #" });
                       cols.Bound(x => x.Source).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                       cols.Bound(x => x.InventoryQuantity).GetColumnFormat(ColumnTypeEnum.Position, true, "", "");
                       cols.Bound(x => x.AllocatedQuantity).GetColumnFormat(ColumnTypeEnum.Position, true, "", "");
                       cols.Bound(x => x.TotalQuantity).GetColumnFormat(ColumnTypeEnum.Position, true, "", "");
                   })
                   .Scrollable(scroll =>
                   {
                       scroll.Enabled(true);
                       scroll.Virtual(true);
                   })
                   .DataSource(ds =>
                   {
                       ds.Ajax()
                           .ServerOperation(false)
                       .Events(ev => ev.Error("onLocateChildError"))
                       .Read(r => r.Action("LoadLocateInventoryByIssue", "Inventory", new { area = "Locates" }).Data("onInventoryLocateData"))
                       .Aggregates(agg =>
                       {
                           agg.Add(x => x.InventoryQuantity).Sum();
                           agg.Add(x => x.AllocatedQuantity).Sum();
                           agg.Add(x => x.TotalQuantity).Sum();
                       });
                   }).ToHtmlString()));

            childPanes.Add()
         .Scrollable(false)
   .Content(
       (Html.Kendo().Grid<SL_LocateInventory>()
       .Name("LocateAllocationGrid")
       .AutoBind(false)
       .HtmlAttributes(new { @class = "grid" })
       .ToolBar(t =>
       {
           t.Template(LabelHelper.Label("LocateAllocation").ToString());
       })
       .NoRecords()
       .Columns(cols =>
       {
           cols.Bound(x => x.Locate).Hidden(true);
           cols.Bound(x => x.Source).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
           cols.Bound(x => x.AllocQty).GetColumnFormat(ColumnTypeEnum.Position, true, "", "");
       })
       .Scrollable(scroll =>
       {
           scroll.Enabled(true);
           scroll.Virtual(true);
       })
       .DataSource(ds =>
       {
           ds.Ajax()
           .ServerOperation(false)
           .Events(ev => ev.Error("onLocateChildError"))
           .Read(r => r.Action("LoadLocateInventoryByLocate", "Locates", new { area = "Locates" }).Data("onLocateAllocationData"))
           .Aggregates(agg =>
           {
               agg.Add(x => x.AllocQty).Sum();
           });
       }).ToHtmlString()));

            childPanes.Add()
                .Scrollable(false)
     .Content(
         (Html.Kendo().Grid<LocateTotalModel>()
         .Name("LocateTotalGrid")
         .AutoBind(false)
          .HtmlAttributes(new { @class = "grid" })
          .ToolBar(t =>
          {
              t.Template(LabelHelper.Label("LocateTotalInformation").ToString());
          })
              .Columns(cols =>
              {
                  cols.Bound(x => x.IssueId).Hidden(true);
                  cols.Bound(x => x.ClientId).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
                  cols.Bound(x => x.Requested).GetColumnFormat(ColumnTypeEnum.Position, true, "", "");
                  cols.Bound(x => x.Located).GetColumnFormat(ColumnTypeEnum.Position, true, "", "");
              })
              .Scrollable(scroll =>
              {
                  scroll.Enabled(true);
                  scroll.Virtual(true);
              })
              .NoRecords()
              .DataSource(ds =>
              {
                  ds.Ajax()
                      .ServerOperation(false)
                      .Events(ev => ev.Error("onLocateChildError"))
                      .Read(r => r.Action("LoadLocateTotal", "Locates", new { area = "Locates" }).Data("onLocateTotalData"))
                      .Aggregates(agg =>
                      {
                          agg.Add(x => x.Located).Sum();
                          agg.Add(x => x.Requested).Sum();
                      });
              }).ToHtmlString()));
        }))
        </text>);
}))
             
</div>
@Html.Kendo().Tooltip().Callout(true).Animation(true).AutoHide(true).For("#InventoryLocateGrid").Filter("td[title]")


@(Html.Kendo().ContextMenu()
    .Name("LocateContextMenu")
    .Target("#LocateGrid")
    .Events(events => events.Select("onLocateContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("Add Locate List").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLLocate) || (SessionSecurityService.IsEditable(ManagerTask.ViewSLLocateClientRestricted)));
        items.Add().Text("Add Single Locate").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLLocate));
        items.Add().Text("Add Inventory List").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLLocate));
        //items.Add().Separator(true);
        items.Add().Text("Cancel Locate(s)").Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLLocate));
        items.Add().Text("Rerun Locate(s)").Enabled(false);
        items.Add().Separator(true);
        items.Add().Text("AutoFit Columns").Enabled(true);
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
        items.Add().Separator(true);
        items.Add().Text("Select All").Enabled(true);
        items.Add().Text("Export To Excel").Enabled(true);
        
        
    }))


