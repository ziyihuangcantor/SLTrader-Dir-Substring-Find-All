@using SLTrader.Enums
@using SLTrader.Tools
@using SLTrader.Helpers.SessionHelper

<script type="text/javascript">
    var _originalClientEmailGrid = null;
    var _originalClientEmailToolBar = null;

    var _clientEmailSelectedRows = [];

    $(document).ready(function () {
        setTimeout(function () {
            _originalClientEmailGrid = $("#ClientEmailGrid").data('kendoGrid').getOptions();
            _originalClientEmailToolBar = $("#ClientEmailGrid .k-grid-toolbar").html();

            LoadGridLayout("#ClientEmailGrid");

            $("#ClientEmailGrid .k-grid-toolbar").html(_originalClientEmailToolBar);
            $("#ClientEmailGrid .k-grid-toolbar").addClass("k-grid-top");
        }, 5);
    });

    function onClientEmailLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#ClientEmailGrid");
        }, 5);
    }

    $(function () {
        $('#ClientEmailGrid').on('click', '.allowInventoryChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#ClientEmailGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('AllowInventory', checked);
            dataSource.sync();
        });

        $('#ClientEmailGrid').on('click', '.allowLocateChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#ClientEmailGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('AllowLocate', checked);
            dataSource.sync();
        });

        $('#ClientEmailGrid').on('click', '.allowNeedChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#ClientEmailGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('AllowNeed', checked);
            dataSource.sync();
        });

        $('#ClientEmailGrid').on('click', '.allowClientEmailIsActiveChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#ClientEmailGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('IsActive', checked);
            dataSource.sync();
        });

        $('#ClientEmailGrid').on('click', '.allowInventoryPrevDayChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#ClientEmailGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('AllowInventoryPrevDay', checked);
            dataSource.sync();
        });


        $('#ClientEmailGrid').on('click', '.allowUseLinkingOnlyChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#ClientEmailGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('UseLinkingOnly', checked);
            dataSource.sync();
        });        
    });

    function BackupLocateClientEmailRowSelection() {
        var grid = $("#ClientEmailGrid").data("kendoGrid");

        var rows = grid.select();

        rows.each(function (index, row) {
            var selectedItem = grid.dataItem(row);
            _clientEmailSelectedRows.push(selectedItem);
        });
    }

    function RestoreLocateClientEmailRowSelection() {
        if (_clientEmailSelectedRows.length != 0) {
            for (var i = 0; i < _clientEmailSelectedRows.length; i++) {
                var curr_id = _clientEmailSelectedRows[i].uid;

                $('#ClientEmailGrid').data("kendoGrid").tbody.find("tr[data-uid='" + curr_id + "']").addClass("k-state-selected");
            }
        }
    }

    function additionalClientEmailData() {
        var entity = $("#ClientEmailDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity
        };
    }

    $('#SharedLabelCheckBox').change(function () {
        RefreshGrid("#ClientEmailGrid");
    });
    
    function onClientEmailError(e) {
        DisplayControllerError(e);
    }

    function onClientEmailDefaultLoad() {
        try {
            var userPreference;

            $.ajax({
                url: '/Header/Header/GetUserPreference',
                type: 'POST',
                contentType: 'application/json;',
                success: function (valid) {
                    userPreference = valid;

                    var dropdownList = $('#ClientEmailDropdownList').data("kendoDropDownList");

                    dropdownList.select(function (dataItem) {
                        return dataItem.CompanyId == userPreference.DefaultFirm;
                    });

                    $('#ClientEmailGrid').data("kendoGrid").dataSource.read();
                },
                error: function (valid) {
                    userPreference = null;
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function additionalCreateClientEmailData() {
        var entity = $("#ClientEmailDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity
        };
    }

    function onClientEmailChange() {
        $("#ClientEmailGrid").data("kendoGrid").dataSource.read();
    }

    function onClientEmailRowChange() {
        _clientEmailSelectedRows = [];

        BackupLocateClientEmailRowSelection();
    }

    function onClientEmailEdit(e) {
        var input = e.container.find("input");
        setTimeout(function () {
            input.select();
        }, 25);
    }


    function getDisplayClientName(e) {

        var response = "";

        try {
            if (e == '-1') {
                response = "<b> N.A. </b>";
            }
            else {
                $.ajax({
                    url: '@Url.Action("Read_LocateClientByPk", "Client", new { area = "Locates" })',
                    data: JSON.stringify({ value: e }),
                    type: 'POST',
                    async: false,
                    contentType: 'application/json;',
                    success: function (valid) {
                        var clientId = valid;

                        response = "<b>" + clientId.Client + "</b>";
                    },
                    error: function (valid) {
                        response = "<b> N.A. </b>";
                    }
                });
            }
        }
        catch (e) {            
        }

        return response;
    }

    function onClientEmailContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'Linkings':
                onClientEmailLinking();
                break;


            case 'AutoFit Columns':
                resizeGridColumns("#ClientEmailGrid");
                break;

            case "Reset Filter":
                ResetFilter("#ClientEmailGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#ClientEmailGrid");

                $("#ClientEmailGrid").data('kendoGrid').setOptions(_originalClientEmailGrid);
                $("#ClientEmailGrid .k-grid-toolbar").html(_originalClientEmailToolBar);
                $("#ClientEmailGrid .k-grid-toolbar").addClass("k-grid-top");
                $('#ClientEmailGrid').data("kendoGrid").dataSource.read();
                break;

            case 'Unsort':
                UnsortGrid("#ClientEmailGrid");
                break;
        }
    }

    function onClientEmailLinking() {
        var clientEmailGrid = $("#ClientEmailGrid").data("kendoGrid");
        var selectedItem = clientEmailGrid.dataItem(clientEmailGrid.select());

        var SLClientEmail = selectedItem["SLClientEmail"];

        HelperHeaderPartialWindow(
            JSON.stringify({
                clientEmailId: SLClientEmail,
            }),
            'ClientEmail Linkings',
            0,
            0,
            '/Locates/Client/ReadClientEmailLinking');
    }
</script>
@(
 Html.Kendo().ToolBar()
    .Name("ClientEmailToolBar")
    .Resizable(true)
    .Items(items =>
    {
        items.Add().Template(LabelHelper.Label("Entity").ToHtmlString());
        items.Add().Template(Html.Kendo().DropDownList()
                            .Name("ClientEmailDropdownList")
                            .HtmlAttributes(new { @class = "width90" })
                            .DataTextField("Custodian")
                            .DataValueField("CompanyId")
                            .OptionLabel(LabelHelper.Text("OptionLabel"))
                            .AutoBind(true)
                            .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                       "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                       "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                            .Events(events => events.Change("onClientEmailChange").DataBound("onClientEmailDefaultLoad").Open("onContraEntityAutoCompleteResize"))
                            .DataSource(dataSource => dataSource
                            .Read(read => read
                            .Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                            .SelectedIndex(0).ToHtmlString());
    }))

<hr class="hr-white">

<div id="ClientEmailContent" class="grid-div">
    @(  Html.Kendo().Grid<BondFire.Entities.SL_ClientEmail>()
    .Name("ClientEmailGrid")
    .Sortable()
    .HtmlAttributes(new { @class = "grid" })
    .Scrollable()
    .Filterable()
    .Editable(e => e.Mode(GridEditMode.InCell).Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLLocateClient)))
    .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
    .Navigatable()
    .NoRecords()
    .Reorderable(cols => cols.Columns(true))
    .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
    .Events(events =>
    {
        events.Edit("onClientEmailEdit");
        events.Change("onClientEmailRowChange");
        events.ColumnHide("onClientEmailLayoutChange");
        events.ColumnShow("onClientEmailLayoutChange");
        events.ColumnResize("onClientEmailLayoutChange");
        events.ColumnReorder("onClientEmailLayoutChange");
    })
    .NoRecords()
    .ColumnMenu(menu =>
    {
        menu.Sortable(true);
        menu.ComponentType("modern");
    })
    .ToolBar(toolbar =>
    {
        toolbar.Create();
    })
    .Columns(columns =>
    {
        columns.Bound(x => x.SLClientEmail).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden();
        columns.Bound(x => x.DateTimeId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden();
        columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden();
        columns.Bound(x => x.EmailAddress).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.SLFileDownloadConfigId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden();
        columns.Bound(x => x.UseLinkingOnly).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox' class='allowUseLinkingOnlyChkbx' #=(UseLinkingOnly) ? checked='checked' :'' # />", "");
        columns.Bound(x => x.AllowInventory).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox' class='allowInventoryChkbx' #=(AllowInventory) ? checked='checked' :'' # />", "");
        columns.Bound(x => x.AllowInventoryPrevDay).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox' class='allowInventoryPrevDayChkbx' #=(AllowInventoryPrevDay) ? checked='checked' : '' # />", "");
        columns.Bound(x => x.AllowNeed).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox' class='allowNeedChkbx' #=(AllowNeed) ? checked='checked' :'' # />", "");
        columns.Bound(x => x.Source).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.AllowLocate).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox' class='allowLocateChkbx' #=(AllowLocate) ? checked='checked' : '' # />", "");
        columns.Bound(x => x.ClientId).GetColumnFormat(ColumnTypeEnum.String, false, "#= getDisplayClientName(ClientId) #", "_ClientEmailLocateClientDropdown");
        columns.Bound(x => x.IsActive).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox' class='allowClientEmailIsActiveChkbx' #=(IsActive) ? checked='checked' : '' # />", "");
    })
    .DataSource(dataSource => dataSource
    .Ajax()
    .AutoSync(true)
    .ServerOperation(false)
    .Events(ev => ev.Error("onClientEmailError"))
    .Read(read => read.Action("Read_ClientEmail", "Client", new { area = "Locates" }).Data("additionalClientEmailData"))
    .Update(update => update.Action("Update_ClientEmail", "Client", new { area = "Locates" }))
    .Create(update => update.Action("Create_ClientEmail", "Client", new { area = "Locates" }).Data("additionalCreateClientEmailData"))
    .Model(model =>
    {
        model.Id(x => x.SLClientEmail);
        model.Field(x => x.AllowLocate).Editable(true);
        model.Field(x => x.AllowInventory).Editable(true);
    })))
</div>

@(Html.Kendo().ContextMenu()
.Name("ClientEmailContextMenu")
    .Target("#ClientEmailGrid")
    .Events(events => events.Select("onClientEmailContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("Linkings");
        items.Add().Separator(true);
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Unsort").Enabled(true);
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
    }))