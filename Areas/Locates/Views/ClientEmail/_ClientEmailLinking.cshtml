@using SLTrader.Enums
@using SLTrader.Tools
@using SLTrader.Helpers.SessionHelper

@model int
<script type="text/javascript">
    var _originalClientEmailLinkingGrid = null;
    var _originalClientEmailToolBar = null;

    var _clientEmailSelectedRows = [];

    $(document).ready(function () {
        setTimeout(function () {
            _originalClientEmailLinkingGrid = $("#ClientEmailLinkingGrid").data('kendoGrid').getOptions();
            _originalClientEmailToolBar = $("#ClientEmailLinkingGrid .k-grid-toolbar").html();

            LoadGridLayout("#ClientEmailLinkingGrid");

            $("#ClientEmailLinkingGrid .k-grid-toolbar").html(_originalClientEmailToolBar);
            $("#ClientEmailLinkingGrid .k-grid-toolbar").addClass("k-grid-top");
        }, 5);
    });

    function onClientEmailLinkingLayoutChange(e) {
        e.preventDefault();

        setTimeout(function () {
            UpdateGridLayout("#ClientEmailLinkingGrid");
        }, 5);
    }

    $(function () {
        $('#ClientEmailLinkingGrid').on('click', '.allowClientEmailLinkingIsActiveChkbx', function () {
            var checked = $(this).is(':checked');
            var grid = $('#ClientEmailLinkingGrid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            dataItem.set('IsActive', checked);
            dataSource.sync();
        });
    });

 
    function additionalClientEmailData() {
        var entity = $("#ClientEmailDropdownList").data("kendoDropDownList").value();

        return {
            clientId: '@Model.ToString()'
        };
    }

    $('#SharedLabelCheckBox').change(function () {
        RefreshGrid("#ClientEmailLinkingGrid");
    });
    
    function onClientEmailError(e) {
        DisplayControllerError(e);
    }

    function additionalCreateClientEmailLinkingData() {
        var entity = $("#ClientEmailDropdownList").data("kendoDropDownList").value();

        return {
            entityId: entity,
            clientId : '@Model'
        };
    }

    function onClientEmailChange() {
        $("#ClientEmailLinkingGrid").data("kendoGrid").dataSource.read();
    }

    function onClientEmailRowChange() {
        _clientEmailSelectedRows = [];

        BackupLocateClientEmailRowSelection();
    }

    function onClientEmailLinkingEdit(e) {
        var input = e.container.find("input");

        setTimeout(function () {
            input.select();
        }, 25);
    }

    function onClientEmailContextMenuSelect(e) {
        switch ($(e.item).children(".k-link").text()) {
            case 'AutoFit Columns':
                resizeGridColumns("#ClientEmailLinkingGrid");
                break;

            case "Reset Filter":
                ResetFilter("#ClientEmailLinkingGrid");
                break;

            case "Reset Grid":
                ResetUserLayout("#ClientEmailLinkingGrid");

                $("#ClientEmailLinkingGrid").data('kendoGrid').setOptions(_originalClientEmailLinkingGrid);
                $("#ClientEmailLinkingGrid .k-grid-toolbar").html(_originalClientEmailToolBar);
                $("#ClientEmailLinkingGrid .k-grid-toolbar").addClass("k-grid-top");
                $('#ClientEmailLinkingGrid').data("kendoGrid").dataSource.read();
                break;
        }
    }
</script>

@*<style scoped>
    #ClientEmailLinkingContent {
        width: 600px;
    }
</style>*@
<div id="ClientEmailLinkingContent" class="grid-div">
    @(  Html.Kendo().Grid<BondFire.Entities.SL_ClientEmailLinking>()
    .Name("ClientEmailLinkingGrid")
    .Sortable()
    .HtmlAttributes(new { @class = "grid" })
    .Scrollable()
    .Filterable()
    .Editable(e => e.Mode(GridEditMode.InLine).Enabled(SessionSecurityService.IsEditable(ManagerTask.EditSLLocateClient)))
    .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
    .Navigatable()
    .NoRecords()
    .Resizable(cols => cols.Columns(bool.Parse(DataSystemValues.LoadSystemValue("ResizeableGrid", "true"))))
    .Events(events =>
    {
        events.Edit("onClientEmailLinkingEdit");
        events.ColumnHide("onClientEmailLinkingLayoutChange");
        events.ColumnShow("onClientEmailLinkingLayoutChange");
        events.ColumnResize("onClientEmailLinkingLayoutChange");
        events.ColumnReorder("onClientEmailLinkingLayoutChange");
    })
    .NoRecords()
    .ToolBar(toolbar =>
    {
        toolbar.Create();
    })
    .Columns(columns =>
    {
        columns.Bound(x => x.SLClientEmailLinking).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden();
        columns.Bound(x => x.DateTimeId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden();
        columns.Bound(x => x.EntityId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden();
        columns.Bound(x => x.EmailAddress).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.Source).GetColumnFormat(ColumnTypeEnum.String, false, "", "");
        columns.Bound(x => x.ClientId).GetColumnFormat(ColumnTypeEnum.String, false, "", "").Hidden(true);
        columns.Bound(x => x.IsActive).GetColumnFormat(ColumnTypeEnum.String, false, "<input type='checkbox' class='allowClientEmailLinkingIsActiveChkbx' #=(IsActive) ? checked='checked' : '' # />", "");

        columns.Command(x =>
        {
            x.Edit();            
        });
    })
    .DataSource(dataSource => dataSource
    .Ajax()
    .ServerOperation(false)
    .Events(ev => ev.Error("onClientEmailError"))
    .Read(read => read.Action("Read_ClientEmailLinking", "Client", new { area = "Locates" }).Data("additionalClientEmailData"))
    .Update(update => update.Action("Update_ClientEmailLinking", "Client", new { area = "Locates" }))
    .Create(update => update.Action("Create_ClientEmailLinking", "Client", new { area = "Locates" }).Data("additionalCreateClientEmailLinkingData"))
    .Model(model =>
    {
        model.Id(x => x.SLClientEmailLinking);
        model.Field(x => x.EmailAddress).Editable(true);
        model.Field(x => x.Source).Editable(true);
        model.Field(x => x.IsActive).Editable(true);
    })))
</div>

@(Html.Kendo().ContextMenu()
.Name("ClientEmailContextMenu")
    .Target("#ClientEmailLinkingGrid")
    .Events(events => events.Select("onClientEmailContextMenuSelect"))
    .Items(items =>
    {
        items.Add().Text("AutoFit Columns");
        items.Add().Text("Reset Filter").Enabled(true);
        items.Add().Text("Reset Grid").Enabled(true);
    }))