@using SLTrader.Enums
@using SLTrader.Models
@using SLTrader.Tools

<script type="text/javascript">
    function onRowChange(e) {
        var entityGrid = $("#ObligationGrid").data("kendoGrid");

        var selectedItem = entityGrid.dataItem(entityGrid.select());
        var entityId = selectedItem["EntityId"];
        var effectiveDate = selectedItem["EffectiveDate"];
        var issueId = selectedItem["IssueId"];
        var secNumber = selectedItem["SecurityNumber"];

        try {
            $.ajax({
                url: "@Url.Action("LoadMonitor", "Monitor")",
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({
                    effectiveDate: effectiveDate,
                    entityId:entityId,
                    issueId: issueId
                }),
                success: function (valid) {
                    $("#MonitorContent").html(valid);
                }
            })
        } catch (e) { }

        try {
            $.ajax({
                url: "@Url.Action("LoadDepo", "Monitor")",
                type: 'POST',
                contentType: 'application/json;',
                data: JSON.stringify({
                    effectiveDate: effectiveDate,
                    entityId: entityId,
                    issueId: secNumber
                }),
                success: function (valid) {
                    $("#DepoDiv").html(valid);
                }
            })
        } catch (e) { }
    }

    function additionalData() {

        var datepicker = $("#ObligationCalander").data("kendoDatePicker");
        var value = kendo.toString(datepicker.value(), 'yyyy-MM-dd');

        var entity = $("#ObligationDropdownList").data("kendoDropDownList");
        var type = $("#ObligationTypeDropdown").data("kendoDropDownList");

        return {
            effectiveDate: value,
            entityId: entity.value(),
            type: type.value(),
        };
    }

    function onError(e) {
        alert(e.message);
    }
    
    function onGridCheckData() {
        //Get the number of Columns in the grid
        var colCount = $("#ObligationGrid").find('.k-grid-header colgroup > col').length;
        var gridDataSource = $("#ObligationGrid").data("kendoGrid").dataSource;
        //If There are no results place an indicator row
        if (gridDataSource._view.length == 0) {
            $("#ObligationGrid").find('.k-grid-content tbody')
                .append('<tr class="kendo-data-row"><td colspan="' +
                    colCount +
                    '" style="text-align:center"><b>No Results Found!</b></td></tr>');
        }
    }

    function onChange(){
        $("#ObligationGrid").data("kendoGrid").dataSource.read();
    }
</script>

<div class="toolbar">
<table class="toolbar">
<tr>
<td class="no-margin">                        
@LabelHelper.Label("EffectiveDate")
                                   
</td>
<td class="no-margin"> 
@(Html.Kendo().DatePicker()
.Name("ObligationCalander")
.Format("yyyy-MM-dd")
.Value(DateTime.Now)
.Events(events => events.Change("onChange")))
</td>       
<td class="no-margin">                        
@LabelHelper.Label("Entity")
</td>
<td class="no-margin"> 
@(Html.Kendo().DropDownList()
                .Name("ObligationDropdownList")
                .DataTextField("Custodian")
                .DataValueField("CompanyId")
                .OptionLabel("Empty List")
                .Animation(true)
                .AutoBind(true)
                .Events(events => events.Change("onChange"))
                .DataSource(dataSource => dataSource
                .Read(read => read.Action("Read_EntityDropdown", "Monitor")))
                .SelectedIndex(0))
</td>  
<td class="no-margin">
    @LabelHelper.Label("Obligations")
</td>
<td class="no-margin">
    @(Html.Kendo().DropDownList()
          .Name("ObligationTypeDropdown")
          .BindTo(Enum.GetNames(typeof(ObligationType)).ToList())
          .Events(
              events => events.Change("onChange")
          ).Value(ObligationType.StockBorrow.ToString()))
</td>
<td style="width:100%;"></td>    
<td class="no-margin" ><a href="#" onclick="onChange()" class="a-nolink"><i class="icon-refresh icon-2x" /></a></td>                         
</tr>
</table>               
</div> 

<hr class="hr-white">

<div id="ObligationContent" style="height:95%;">
@(   Html.Kendo().Grid<ObligationModel>()
    .Name("ObligationGrid")
    .HtmlAttributes(new { style = "height:300px;" })
    .Sortable()
    .Scrollable()
    .Filterable()
    .Navigatable()
    .Events(events => events.Change("onRowChange").DataBound("onGridCheckData"))
    .Selectable(select => select.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
    .Columns(columns =>
        {
            columns.Bound(p => p.EffectiveDate).Hidden(true);
            columns.Bound(p => p.EntityId).Hidden(true);
            columns.Bound(p => p.IssueId).Hidden(true);
            columns.Bound(p => p.SecurityNumber).HeaderHtmlAttributes(new { @class = "gridcolumn-text-Header" }).HtmlAttributes(new { @class = "gridcolumn-text" });
            columns.Bound(p => p.Ticker).HeaderHtmlAttributes(new { @class = "gridcolumn-text-Header" }).HtmlAttributes(new { @class = "gridcolumn-text" });
            columns.Bound(p => p.Quantity).HeaderHtmlAttributes(new { @class = "gridcolumn-text-Header" }).HtmlAttributes(new { @class = "gridcolumn-number"}).ClientFooterTemplate("#= kendo.format('{0:n}', sum)#").FooterHtmlAttributes(new { @class = "gridcolumn-number-footer" }).Format("{0:#,##0}");
            columns.Bound(p => p.Amount).HeaderHtmlAttributes(new { @class = "gridcolumn-text-Header" }).HtmlAttributes(new { @class = "gridcolumn-number"}).ClientFooterTemplate("#= kendo.format('{0:n}', sum)#").FooterHtmlAttributes(new { @class = "gridcolumn-number-footer" }).Format("{0:#,##0}");
            columns.Bound(p => p.Type).HeaderHtmlAttributes(new { @class = "gridcolumn-text-Header" }).HtmlAttributes(new { @class = "gridcolumn-text" });   
        })
        .Resizable(resize => resize.Columns(true))
        .DataSource(dataSource => dataSource
        .Ajax()
        .Read(read => read
            .Action("LoadObligations", "Monitor")
            .Data("additionalData"))
            .Events(events => events
            .Error("onError"))
            .ServerOperation(false)
            .Aggregates(aggregates =>
            {
                aggregates.Add(p => p.Quantity).Sum();
                aggregates.Add(p => p.Amount).Sum();
            })
        ))
</div>
