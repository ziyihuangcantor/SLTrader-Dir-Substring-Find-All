@model IEnumerable<BondFire.Entities.Projections.SL_MonitorExtendedProjection>


<script type="text/javascript">
    function onError(e) {
        alert(e.message);
    }
    
    function onCheckData() {
        //Get the number of Columns in the grid
        var colCount = $("#MonitorGrid").find('.k-grid-header colgroup > col').length;
        var gridDataSource = $("#MonitorGrid").data("kendoGrid").dataSource;
        //If There are no results place an indicator row
        if (gridDataSource._view.length == 0) {
            $("#MonitorGrid").find('.k-grid-content tbody')
                .append('<tr class="kendo-data-row"><td colspan="' +
                    colCount +
                    '" style="text-align:center"><b>No Results Found!</b></td></tr>');
        }
    }
</script>

<div id="MonitorContent" style="height:95%;">
    @(   Html.Kendo().Grid(Model)
            .Name("MonitorGrid")
            .HtmlAttributes(new { style = "height:95%;" })
            .Sortable()
            .Scrollable()
            .Filterable()
            .Navigatable()
            .Events(events => events.DataBound("onCheckData"))
            .Selectable(select => select.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
            .Columns(columns =>
                {
                    columns.Bound(p => p.EntityId).Hidden(true);
                    columns.Bound(p => p.IssueId).Hidden(true);
                    columns.Bound(p => p.ContraEntityId).HeaderHtmlAttributes(new { @class = "gridcolumn-text-Header" }).HtmlAttributes(new { @class = "gridcolumn-text" });
                    columns.Bound(p => p.SecurityNumber).HeaderHtmlAttributes(new { @class = "gridcolumn-text-Header" }).HtmlAttributes(new { @class = "gridcolumn-text" });
                    columns.Bound(p => p.Ticker).HeaderHtmlAttributes(new { @class = "gridcolumn-text-Header" }).HtmlAttributes(new { @class = "gridcolumn-text" });
                    columns.Bound(p => p.Quantity).HeaderHtmlAttributes(new { @class = "gridcolumn-text-Header" }).HtmlAttributes(new { @class = "gridcolumn-number" }).Format("{0:#,##0}");
                    columns.Bound(p => p.MonitorDirection).HeaderHtmlAttributes(new { @class = "gridcolumn-text-Header" }).HtmlAttributes(new { @class = "gridcolumn-text" });
                    columns.Bound(p => p.MonitorFlag).HeaderHtmlAttributes(new { @class = "gridcolumn-text-Header" }).HtmlAttributes(new { @class = "gridcolumn-text" });
                })
                .Resizable(resize => resize.Columns(true))
                  .DataSource(read => read.Ajax()
                      .ServerOperation(false)
                      .Model(model => model.Id(x => x.SLMonitor)))
               )
</div>