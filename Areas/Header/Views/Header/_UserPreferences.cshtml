@using System.ComponentModel
@using System.Collections;
@using System.Collections.Generic;
@using System.Globalization;
@using SLTrader.Helpers.SessionHelper
@using SLTrader.Enums
@using SLTrader.Tools
@using SLTrader.Models
@using BondFire.Entities.Projections
@using EnumExtensions = SLTrader.Tools.EnumExtensions

<script type="text/javascript">
    function onHeaderFontSizeChange(e) {     
        changeFontSize(this.value());        
    }

    function onHeaderFontFamilyChange(e) {
        changeFontFamily(this.value())
    }

    function onUserPrefSubmit() {

        var entityList = $("#DefaultFirmMultipleDropdownList").data("kendoMultiSelect").value();


        $("#DefaultFirmMultipleHidden").val(entityList.toString());
        
        var form = $("#UserPreferenceForm");        

        try
        {
            $.ajax({
                url: "@Url.Action("UpdateProfile", "Header", new { area = "Header" })",
                data: form.serializeArray(),                
                type: "POST",
                success: function (e) {
                    $("#UserPrefStatusLabel").text("User settings updated.");                    
                    $('#LocalHeaderDetailWindow').data("kendoWindow").close();
                },
                error: function (e) {                  
                    $("#UserPrefStatusLabel").text("User settings update failed.");
                }
            });
        } catch (e) {
            console.log(e.message);
        }
    }

    function onCancel(e) {

    }   
</script>

<style>
    #UserPreference {
        border-collapse: collapse;
        width: 100%;
    }

        #UserPreference th,
        #UserPreference td {
            min-height: 50px;
            padding: 5px 0px 0px 5px;
        }

    #UserPreferenceDiv {
        width: 100%;
    }
</style>

@{ SL_UserPreference userPreference = SessionService.UserPreference;  }

<div id="UserPreferenceDiv">
    @using (Html.BeginForm("", "", FormMethod.Post, new { id = "UserPreferenceForm" }))
    {
        <table id="UserPreference">
            <tr>
                <td>@LabelHelper.Text("DefaultFirm")</td>
                <td colspan="2">
                    @if (userPreference.DefaultFirm == null)
                    {
                        @(Html.Kendo().DropDownListFor(x => userPreference.DefaultFirm)
                                                       .DataTextField("Custodian")
                                                       .DataValueField("CompanyId")
                                                       .OptionLabel("Empty List")
                                                       .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                                           "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                                           "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                                                       .Animation(true)
                                                       .AutoBind(true)
                                                       .DataSource(dataSource => dataSource
                                                       .Read(read => read.Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" }))))
                    }
                    else
                    {
                        @(Html.Kendo().DropDownListFor(x => userPreference.DefaultFirm)
                                                       .DataTextField("Custodian")
                                                       .DataValueField("CompanyId")
                                                       .OptionLabel("Empty List")
                                                       .Template("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                                                        "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                                                        "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                                                       .Animation(true)
                                                       .AutoBind(true)
                                                       .DataSource(dataSource => dataSource
                                                       .Read(read => read.Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" })))
                                                       .Value(userPreference.DefaultFirm.ToString()))
                    }
                </td>
            </tr>
            <tr>
                <td>@LabelHelper.Text("DefaultFirm")</td>
                <td colspan="2">
                    @if (userPreference.DefaultFirmMultiple == null)
                    {
                        @(Html.Kendo().MultiSelectFor(x => userPreference.DefaultFirmMultiple)
                                                  .Name("DefaultFirmMultipleDropdownList")
                                                     .AutoClose(true)
                                                  .HtmlAttributes(new { @style = "width:150px;" })
                                                 .TagMode(TagMode.Multiple)
                                                 .AutoWidth(true)
                                                 .Enable(true)
                                                 .Placeholder("No records selected")
                                                 .AutoBind(true)
                                                 .ItemTemplate("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                                                  "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                                                  "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                                                  .DataTextField("Custodian")
                                                  .DataValueField("CompanyId")
                                                  .DataSource(ds =>
                                                  {
                                                      ds.Read(read => read.Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" }));
                                                  }));
                    }
                    else
                    {
                        @(Html.Kendo().MultiSelect()
                                                 .Name("DefaultFirmMultipleDropdownList")
                                                    .AutoClose(true)
                                                 .HtmlAttributes(new { @style = "width:150px;" })
                                                .TagMode(TagMode.Multiple)
                                                .AutoWidth(true)
                                                .Enable(true)
                                                .Placeholder("No records selected")
                                                .AutoBind(true)
                                                .ItemTemplate("#if(data.Custodian == \"" + LabelHelper.Text("OptionLabel") + "\")" +
                                                                 "{#<span class=\"k-state-default\">#:data.Custodian#</span>#}" +
                                                                 "else {# <span class=\"k-state-default\">#:data.Custodian# #:data.Name#</span> #}#")
                                                 .DataTextField("Custodian")
                                                 .DataValueField("CompanyId")
                                                 .Value(SessionService.UserDefaultFrimMultiple)
                                                 .DataSource(ds =>
                                                 {
                                                     ds.Read(read => read.Action("Read_EntityDropdown", "ContraEntity", new { area = "DomesticTrading" }));
                                                 }));
                    }
                </td>
            </tr>
            <tr>
                <td>@LabelHelper.Text("DefautltApplication")</td>
                <td colspan="2">
                    @(Html.Kendo().DropDownListFor(x => userPreference.Application)
                                                  .BindTo(SessionSecurityService.LoadApplications())
                                                  .Value(EnumExtensions.GetEnumSelectListItem(userPreference.Application).Value.ToString()))
                </td>
            </tr>
            <tr>
                <td>@LabelHelper.Text("DefaultStyle")</td>
                <td colspan="2">
                    @(Html.Kendo().DropDownListFor(x => userPreference.Customcss)
                                            .BindTo(new List<string>() {
                                            "black",
                                            "blueopal",
                                            "bootstrap",
                                            "default",
                                            "fiori",
                                            "flat",
                                            "highcontrast",
                                            "material",
                                            "materialblack",
                                            "metro",
                                            "metroblack",
                                            "moonlight",
                                            "nova",
                                            "office365",
                                            "uniform",
                                            "silver",
                                            "default-v2",
                                            "bootstrap-v4"
                                            })
                                            .Events(e => e.Change("ThemeBuilderChange"))
                                            .Value(userPreference.Customcss))
                </td>
            </tr>
            <tr>
                <td>@LabelHelper.Text("DefaultFont")</td>
                <td colspan="2">
                    @(Html.Kendo().DropDownListFor(x => userPreference.FontFamily)
                                            .BindTo(new List<string>() {
                                    "Impact",
                                    "Palatino Linotype",
                                    "Tahoma",
                                    "Calibri Light",
                                    "Century Gothic",
                                    "Lucida Sans Unicode",
                                    "Arial Black",
                                    "Times New Roman",
                                    "Arial Narrow",
                                    "Verdana",
                                    "Copperplate",
                                    "Lucida Console",
                                    "Gill Sans",
                                    "Trebuchet MS",
                                    "Courier New",
                                    "Arial",
                                    "Georgia"})
                                            .Events(e => e.Change("onHeaderFontFamilyChange"))
                                            .Value(userPreference.FontFamily))
                </td>
            </tr>
            <tr>
                <td>@LabelHelper.Text("DefaultFontSize")</td>
                <td colspan="2">
                    @(Html.Kendo().NumericTextBoxFor(x => userPreference.FontSize).HtmlAttributes(new { ID = "DefaultFontSizeNumericTextBox" }).Max(36).Min(8).Value(userPreference.FontSize).Spinners(true).Events(ev => ev.Change("onHeaderFontSizeChange")))
                </td>
            </tr>
            <tr style="display:none">
                <td>@LabelHelper.Text("ScratchPadLayoutType")</td>
                <td colspan="2" align="center" valign="middle">
                    @(Html.Kendo().DropDownListFor(x => userPreference.SLTradeLayoutTypeId)
                                            .BindTo(EnumExtensions.GetEnumSelectList<SL_TradeLayoutType>())
                                            .Value(EnumExtensions.GetEnumSelectListItem(userPreference.SLTradeLayoutTypeId).Value.ToString()))
                </td>
            </tr>
            <tr>
                <td>@LabelHelper.Text("ShowMatchingIssues")</td>
                <td colspan="2" valign="middle">
                    @(Html.Kendo().CheckBoxFor(x => userPreference.ShowMatchingIssues))
                </td>
            </tr>
            <tr>
                <td>@LabelHelper.Text("ShowInventoryMarker")</td>
                <td colspan="2" valign="middle">
                    @(Html.Kendo().CheckBoxFor(x => userPreference.ShowInventoryMarker))
                </td>
            </tr>
            <tr>
                <td>@LabelHelper.Text("ShowRollupEntity")</td>
                <td colspan="2" valign="middle">
                    @(Html.Kendo().CheckBoxFor(x => userPreference.RollupEntity))
                </td>
            </tr>
            <tr>
                <td>@LabelHelper.Text("ShowReportingCurrency")</td>
                <td colspan="2" valign="middle">
                    @(Html.Kendo().DropDownListFor(x => userPreference.ReportingCurrency)
                            .HtmlAttributes(new { @class = "width100" })
                            .AutoWidth(true)
                            .DataValueField("Value")
                            .DataTextField("Text")
                            .AutoBind(true)
                            .SelectedIndex(0)
                            .Value("60")
                            .BindTo(SLTrader.Tools.EnumExtensions.GetEnumSelectList<Currency>()))
                </td>
            </tr>
            <tr>
                <td>@LabelHelper.Text("UserType")</td>
                <td colspan="2" align="center" valign="middle">
                    @(Html.Kendo().DropDownListFor(x => userPreference.UserTypeId)
                                            .Enable(true)
                                            .BindTo(EnumExtensions.GetEnumSelectList<SL_UserType>())
                                            .Value(EnumExtensions.GetEnumSelectListItem(userPreference.UserTypeId).Value.ToString()))
                </td>
            </tr>
            <tr>
                <td>@LabelHelper.Text("SecurityLayoutType")</td>
                <td colspan="2" align="center" valign="middle">
                    @(Html.Kendo().DropDownListFor(x => userPreference.SLSecurityLayoutTypeId)
                                            .Enable(true)
                                            .BindTo(EnumExtensions.GetEnumSelectList<SL_SecurityLayoutType>())
                                            .Value(EnumExtensions.GetEnumSelectListItem(userPreference.SLSecurityLayoutTypeId).Value.ToString()))
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    <p style="word-wrap:break-word;width:200px">**This setting will only take effect after logging <BR />and out and back in to the system.</p>
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    <label id="UserPrefStatusLabel" class="label-status"></label>
                </td>
            </tr>
            <tr>
                <td colspan="2" align="right">
                    @Html.Kendo().Button().Name("PostUserChangeButton").Events(ev => ev.Click("onUserPrefSubmit")).Content(@LabelHelper.Text("PostUserChange"))                   
                </td>
            </tr>
        </table>

        @Html.HiddenFor(x => userPreference.UserId);
        @Html.HiddenFor(x => userPreference.SLUserPreference);
        @Html.HiddenFor(x => userPreference.Application);
        @Html.HiddenFor(x => userPreference.Thumbnail);
        @Html.HiddenFor(x => userPreference.DefaultFirm);
        @Html.HiddenFor(x => userPreference.Customcss);
        @Html.HiddenFor(x => userPreference.ShowOnStartUp);
        @Html.HiddenFor(x => userPreference.ShowInventoryMarker);
        @Html.HiddenFor(x => userPreference.ReportingCurrency);
        @Html.HiddenFor(x => userPreference.DefaultFirmMultiple, new { id = "DefaultFirmMultipleHidden" });
    }
</div>
